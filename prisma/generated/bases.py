# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseCabinet(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Cabinet']] = 'Cabinet'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CabinetActions[_PrismaModelT]':
        from .client import get_client

        return actions.CabinetActions[_PrismaModelT](client or get_client(), cls)


class BaseClient(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Client']] = 'Client'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ClientActions[_PrismaModelT]':
        from .client import get_client

        return actions.ClientActions[_PrismaModelT](client or get_client(), cls)


class BaseClientHistory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ClientHistory']] = 'ClientHistory'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ClientHistoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.ClientHistoryActions[_PrismaModelT](client or get_client(), cls)


class BaseDepartment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Department']] = 'Department'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DepartmentActions[_PrismaModelT]':
        from .client import get_client

        return actions.DepartmentActions[_PrismaModelT](client or get_client(), cls)


class BaseDepartmentUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['DepartmentUser']] = 'DepartmentUser'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DepartmentUserActions[_PrismaModelT]':
        from .client import get_client

        return actions.DepartmentUserActions[_PrismaModelT](client or get_client(), cls)


class BaseOffice(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Office']] = 'Office'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OfficeActions[_PrismaModelT]':
        from .client import get_client

        return actions.OfficeActions[_PrismaModelT](client or get_client(), cls)


class BaseOpportunity(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Opportunity']] = 'Opportunity'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OpportunityActions[_PrismaModelT]':
        from .client import get_client

        return actions.OpportunityActions[_PrismaModelT](client or get_client(), cls)


class BasePosition(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Position']] = 'Position'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PositionActions[_PrismaModelT]':
        from .client import get_client

        return actions.PositionActions[_PrismaModelT](client or get_client(), cls)


class BaseProduct(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Product']] = 'Product'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ProductActions[_PrismaModelT]':
        from .client import get_client

        return actions.ProductActions[_PrismaModelT](client or get_client(), cls)


class BaseProductSale(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ProductSale']] = 'ProductSale'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ProductSaleActions[_PrismaModelT]':
        from .client import get_client

        return actions.ProductSaleActions[_PrismaModelT](client or get_client(), cls)


class BaseReview(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Review']] = 'Review'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ReviewActions[_PrismaModelT]':
        from .client import get_client

        return actions.ReviewActions[_PrismaModelT](client or get_client(), cls)


class BaseRole(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Role']] = 'Role'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RoleActions[_PrismaModelT]':
        from .client import get_client

        return actions.RoleActions[_PrismaModelT](client or get_client(), cls)


class BaseSchedule(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Schedule']] = 'Schedule'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ScheduleActions[_PrismaModelT]':
        from .client import get_client

        return actions.ScheduleActions[_PrismaModelT](client or get_client(), cls)


class BaseService(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Service']] = 'Service'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ServiceActions[_PrismaModelT]':
        from .client import get_client

        return actions.ServiceActions[_PrismaModelT](client or get_client(), cls)


class BaseServiceCategory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ServiceCategory']] = 'ServiceCategory'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ServiceCategoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.ServiceCategoryActions[_PrismaModelT](client or get_client(), cls)


class BaseServiceRecord(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ServiceRecord']] = 'ServiceRecord'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ServiceRecordActions[_PrismaModelT]':
        from .client import get_client

        return actions.ServiceRecordActions[_PrismaModelT](client or get_client(), cls)


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseUserOnCabinet(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserOnCabinet']] = 'UserOnCabinet'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserOnCabinetActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserOnCabinetActions[_PrismaModelT](client or get_client(), cls)


class BaseWorkerOnService(_PrismaModel):
    __prisma_model__: ClassVar[Literal['WorkerOnService']] = 'WorkerOnService'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.WorkerOnServiceActions[_PrismaModelT]':
        from .client import get_client

        return actions.WorkerOnServiceActions[_PrismaModelT](client or get_client(), cls)


