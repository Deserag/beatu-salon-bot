# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('D:/beatu-salon-bot/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'windows': 'C:\\Users\\pavel\\.cache\\prisma-python\\binaries\\5.17.0\\393aa359c9ad4a4bb28630fb5613f9c281cde053\\node_modules\\prisma\\query-engine-windows.exe'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    cabinet: 'actions.CabinetActions[models.Cabinet]'
    client: 'actions.ClientActions[models.Client]'
    clienthistory: 'actions.ClientHistoryActions[models.ClientHistory]'
    department: 'actions.DepartmentActions[models.Department]'
    departmentuser: 'actions.DepartmentUserActions[models.DepartmentUser]'
    office: 'actions.OfficeActions[models.Office]'
    opportunity: 'actions.OpportunityActions[models.Opportunity]'
    position: 'actions.PositionActions[models.Position]'
    product: 'actions.ProductActions[models.Product]'
    productsale: 'actions.ProductSaleActions[models.ProductSale]'
    review: 'actions.ReviewActions[models.Review]'
    role: 'actions.RoleActions[models.Role]'
    schedule: 'actions.ScheduleActions[models.Schedule]'
    service: 'actions.ServiceActions[models.Service]'
    servicecategory: 'actions.ServiceCategoryActions[models.ServiceCategory]'
    servicerecord: 'actions.ServiceRecordActions[models.ServiceRecord]'
    user: 'actions.UserActions[models.User]'
    useroncabinet: 'actions.UserOnCabinetActions[models.UserOnCabinet]'
    workeronservice: 'actions.WorkerOnServiceActions[models.WorkerOnService]'

    __slots__ = (
        'cabinet',
        'client',
        'clienthistory',
        'department',
        'departmentuser',
        'office',
        'opportunity',
        'position',
        'product',
        'productsale',
        'review',
        'role',
        'schedule',
        'service',
        'servicecategory',
        'servicerecord',
        'user',
        'useroncabinet',
        'workeronservice',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set([]),
            active_provider='postgresql',
            default_datasource_name='db',
        )

        self.cabinet = actions.CabinetActions[models.Cabinet](self, models.Cabinet)
        self.client = actions.ClientActions[models.Client](self, models.Client)
        self.clienthistory = actions.ClientHistoryActions[models.ClientHistory](self, models.ClientHistory)
        self.department = actions.DepartmentActions[models.Department](self, models.Department)
        self.departmentuser = actions.DepartmentUserActions[models.DepartmentUser](self, models.DepartmentUser)
        self.office = actions.OfficeActions[models.Office](self, models.Office)
        self.opportunity = actions.OpportunityActions[models.Opportunity](self, models.Opportunity)
        self.position = actions.PositionActions[models.Position](self, models.Position)
        self.product = actions.ProductActions[models.Product](self, models.Product)
        self.productsale = actions.ProductSaleActions[models.ProductSale](self, models.ProductSale)
        self.review = actions.ReviewActions[models.Review](self, models.Review)
        self.role = actions.RoleActions[models.Role](self, models.Role)
        self.schedule = actions.ScheduleActions[models.Schedule](self, models.Schedule)
        self.service = actions.ServiceActions[models.Service](self, models.Service)
        self.servicecategory = actions.ServiceCategoryActions[models.ServiceCategory](self, models.ServiceCategory)
        self.servicerecord = actions.ServiceRecordActions[models.ServiceRecord](self, models.ServiceRecord)
        self.user = actions.UserActions[models.User](self, models.User)
        self.useroncabinet = actions.UserOnCabinetActions[models.UserOnCabinet](self, models.UserOnCabinet)
        self.workeronservice = actions.WorkerOnServiceActions[models.WorkerOnService](self, models.WorkerOnService)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': 'D:/beatu-salon-bot/prisma/schema.prisma',
        }

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    cabinet: 'CabinetBatchActions'
    client: 'ClientBatchActions'
    clienthistory: 'ClientHistoryBatchActions'
    department: 'DepartmentBatchActions'
    departmentuser: 'DepartmentUserBatchActions'
    office: 'OfficeBatchActions'
    opportunity: 'OpportunityBatchActions'
    position: 'PositionBatchActions'
    product: 'ProductBatchActions'
    productsale: 'ProductSaleBatchActions'
    review: 'ReviewBatchActions'
    role: 'RoleBatchActions'
    schedule: 'ScheduleBatchActions'
    service: 'ServiceBatchActions'
    servicecategory: 'ServiceCategoryBatchActions'
    servicerecord: 'ServiceRecordBatchActions'
    user: 'UserBatchActions'
    useroncabinet: 'UserOnCabinetBatchActions'
    workeronservice: 'WorkerOnServiceBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.cabinet = CabinetBatchActions(self)
        self.client = ClientBatchActions(self)
        self.clienthistory = ClientHistoryBatchActions(self)
        self.department = DepartmentBatchActions(self)
        self.departmentuser = DepartmentUserBatchActions(self)
        self.office = OfficeBatchActions(self)
        self.opportunity = OpportunityBatchActions(self)
        self.position = PositionBatchActions(self)
        self.product = ProductBatchActions(self)
        self.productsale = ProductSaleBatchActions(self)
        self.review = ReviewBatchActions(self)
        self.role = RoleBatchActions(self)
        self.schedule = ScheduleBatchActions(self)
        self.service = ServiceBatchActions(self)
        self.servicecategory = ServiceCategoryBatchActions(self)
        self.servicerecord = ServiceRecordBatchActions(self)
        self.user = UserBatchActions(self)
        self.useroncabinet = UserOnCabinetBatchActions(self)
        self.workeronservice = WorkerOnServiceBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CabinetBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CabinetCreateInput,
        include: Optional[types.CabinetInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Cabinet,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CabinetCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Cabinet,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CabinetWhereUniqueInput,
        include: Optional[types.CabinetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Cabinet,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CabinetUpdateInput,
        where: types.CabinetWhereUniqueInput,
        include: Optional[types.CabinetInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Cabinet,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CabinetWhereUniqueInput,
        data: types.CabinetUpsertInput,
        include: Optional[types.CabinetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Cabinet,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CabinetUpdateManyMutationInput,
        where: types.CabinetWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Cabinet,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CabinetWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Cabinet,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ClientBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ClientCreateInput,
        include: Optional[types.ClientInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Client,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ClientCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Client,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ClientWhereUniqueInput,
        include: Optional[types.ClientInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Client,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ClientUpdateInput,
        where: types.ClientWhereUniqueInput,
        include: Optional[types.ClientInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Client,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ClientWhereUniqueInput,
        data: types.ClientUpsertInput,
        include: Optional[types.ClientInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Client,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ClientUpdateManyMutationInput,
        where: types.ClientWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Client,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ClientWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Client,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ClientHistoryBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ClientHistoryCreateInput,
        include: Optional[types.ClientHistoryInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ClientHistory,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ClientHistoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ClientHistory,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ClientHistoryWhereUniqueInput,
        include: Optional[types.ClientHistoryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ClientHistory,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ClientHistoryUpdateInput,
        where: types.ClientHistoryWhereUniqueInput,
        include: Optional[types.ClientHistoryInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ClientHistory,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ClientHistoryWhereUniqueInput,
        data: types.ClientHistoryUpsertInput,
        include: Optional[types.ClientHistoryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ClientHistory,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ClientHistoryUpdateManyMutationInput,
        where: types.ClientHistoryWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ClientHistory,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ClientHistoryWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ClientHistory,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DepartmentBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DepartmentCreateInput,
        include: Optional[types.DepartmentInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Department,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DepartmentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Department,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DepartmentWhereUniqueInput,
        include: Optional[types.DepartmentInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Department,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DepartmentUpdateInput,
        where: types.DepartmentWhereUniqueInput,
        include: Optional[types.DepartmentInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Department,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DepartmentWhereUniqueInput,
        data: types.DepartmentUpsertInput,
        include: Optional[types.DepartmentInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Department,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DepartmentUpdateManyMutationInput,
        where: types.DepartmentWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Department,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DepartmentWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Department,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DepartmentUserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DepartmentUserCreateInput,
        include: Optional[types.DepartmentUserInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.DepartmentUser,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DepartmentUserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.DepartmentUser,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DepartmentUserWhereUniqueInput,
        include: Optional[types.DepartmentUserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.DepartmentUser,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DepartmentUserUpdateInput,
        where: types.DepartmentUserWhereUniqueInput,
        include: Optional[types.DepartmentUserInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.DepartmentUser,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DepartmentUserWhereUniqueInput,
        data: types.DepartmentUserUpsertInput,
        include: Optional[types.DepartmentUserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.DepartmentUser,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DepartmentUserUpdateManyMutationInput,
        where: types.DepartmentUserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.DepartmentUser,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DepartmentUserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.DepartmentUser,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class OfficeBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.OfficeCreateInput,
        include: Optional[types.OfficeInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Office,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.OfficeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Office,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.OfficeWhereUniqueInput,
        include: Optional[types.OfficeInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Office,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.OfficeUpdateInput,
        where: types.OfficeWhereUniqueInput,
        include: Optional[types.OfficeInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Office,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.OfficeWhereUniqueInput,
        data: types.OfficeUpsertInput,
        include: Optional[types.OfficeInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Office,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.OfficeUpdateManyMutationInput,
        where: types.OfficeWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Office,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.OfficeWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Office,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class OpportunityBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.OpportunityCreateInput,
        include: Optional[types.OpportunityInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Opportunity,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.OpportunityCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Opportunity,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.OpportunityWhereUniqueInput,
        include: Optional[types.OpportunityInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Opportunity,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.OpportunityUpdateInput,
        where: types.OpportunityWhereUniqueInput,
        include: Optional[types.OpportunityInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Opportunity,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.OpportunityWhereUniqueInput,
        data: types.OpportunityUpsertInput,
        include: Optional[types.OpportunityInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Opportunity,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.OpportunityUpdateManyMutationInput,
        where: types.OpportunityWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Opportunity,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.OpportunityWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Opportunity,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PositionBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PositionCreateInput,
        include: Optional[types.PositionInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Position,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PositionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Position,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PositionWhereUniqueInput,
        include: Optional[types.PositionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Position,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PositionUpdateInput,
        where: types.PositionWhereUniqueInput,
        include: Optional[types.PositionInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Position,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PositionWhereUniqueInput,
        data: types.PositionUpsertInput,
        include: Optional[types.PositionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Position,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PositionUpdateManyMutationInput,
        where: types.PositionWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Position,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PositionWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Position,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ProductBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ProductCreateInput,
        include: Optional[types.ProductInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Product,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ProductCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Product,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ProductWhereUniqueInput,
        include: Optional[types.ProductInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Product,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ProductUpdateInput,
        where: types.ProductWhereUniqueInput,
        include: Optional[types.ProductInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Product,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ProductWhereUniqueInput,
        data: types.ProductUpsertInput,
        include: Optional[types.ProductInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Product,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ProductUpdateManyMutationInput,
        where: types.ProductWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Product,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ProductWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Product,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ProductSaleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ProductSaleCreateInput,
        include: Optional[types.ProductSaleInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ProductSale,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ProductSaleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ProductSale,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ProductSaleWhereUniqueInput,
        include: Optional[types.ProductSaleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ProductSale,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ProductSaleUpdateInput,
        where: types.ProductSaleWhereUniqueInput,
        include: Optional[types.ProductSaleInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ProductSale,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ProductSaleWhereUniqueInput,
        data: types.ProductSaleUpsertInput,
        include: Optional[types.ProductSaleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ProductSale,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ProductSaleUpdateManyMutationInput,
        where: types.ProductSaleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ProductSale,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ProductSaleWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ProductSale,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ReviewBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ReviewCreateInput,
        include: Optional[types.ReviewInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Review,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ReviewCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Review,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ReviewWhereUniqueInput,
        include: Optional[types.ReviewInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Review,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ReviewUpdateInput,
        where: types.ReviewWhereUniqueInput,
        include: Optional[types.ReviewInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Review,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ReviewWhereUniqueInput,
        data: types.ReviewUpsertInput,
        include: Optional[types.ReviewInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Review,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ReviewUpdateManyMutationInput,
        where: types.ReviewWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Review,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ReviewWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Review,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class RoleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.RoleCreateInput,
        include: Optional[types.RoleInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Role,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.RoleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Role,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.RoleWhereUniqueInput,
        include: Optional[types.RoleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Role,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.RoleUpdateInput,
        where: types.RoleWhereUniqueInput,
        include: Optional[types.RoleInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Role,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.RoleWhereUniqueInput,
        data: types.RoleUpsertInput,
        include: Optional[types.RoleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Role,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.RoleUpdateManyMutationInput,
        where: types.RoleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Role,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.RoleWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Role,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ScheduleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ScheduleCreateInput,
        include: Optional[types.ScheduleInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Schedule,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ScheduleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Schedule,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ScheduleWhereUniqueInput,
        include: Optional[types.ScheduleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Schedule,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ScheduleUpdateInput,
        where: types.ScheduleWhereUniqueInput,
        include: Optional[types.ScheduleInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Schedule,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ScheduleWhereUniqueInput,
        data: types.ScheduleUpsertInput,
        include: Optional[types.ScheduleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Schedule,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ScheduleUpdateManyMutationInput,
        where: types.ScheduleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Schedule,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ScheduleWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Schedule,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ServiceBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ServiceCreateInput,
        include: Optional[types.ServiceInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Service,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ServiceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Service,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ServiceWhereUniqueInput,
        include: Optional[types.ServiceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Service,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ServiceUpdateInput,
        where: types.ServiceWhereUniqueInput,
        include: Optional[types.ServiceInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Service,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ServiceWhereUniqueInput,
        data: types.ServiceUpsertInput,
        include: Optional[types.ServiceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Service,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ServiceUpdateManyMutationInput,
        where: types.ServiceWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Service,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ServiceWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Service,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ServiceCategoryBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ServiceCategoryCreateInput,
        include: Optional[types.ServiceCategoryInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ServiceCategory,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ServiceCategoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ServiceCategory,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ServiceCategoryWhereUniqueInput,
        include: Optional[types.ServiceCategoryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ServiceCategory,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ServiceCategoryUpdateInput,
        where: types.ServiceCategoryWhereUniqueInput,
        include: Optional[types.ServiceCategoryInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ServiceCategory,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ServiceCategoryWhereUniqueInput,
        data: types.ServiceCategoryUpsertInput,
        include: Optional[types.ServiceCategoryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ServiceCategory,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ServiceCategoryUpdateManyMutationInput,
        where: types.ServiceCategoryWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ServiceCategory,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ServiceCategoryWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ServiceCategory,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ServiceRecordBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ServiceRecordCreateInput,
        include: Optional[types.ServiceRecordInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ServiceRecord,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ServiceRecordCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ServiceRecord,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ServiceRecordWhereUniqueInput,
        include: Optional[types.ServiceRecordInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ServiceRecord,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ServiceRecordUpdateInput,
        where: types.ServiceRecordWhereUniqueInput,
        include: Optional[types.ServiceRecordInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ServiceRecord,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ServiceRecordWhereUniqueInput,
        data: types.ServiceRecordUpsertInput,
        include: Optional[types.ServiceRecordInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ServiceRecord,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ServiceRecordUpdateManyMutationInput,
        where: types.ServiceRecordWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ServiceRecord,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ServiceRecordWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ServiceRecord,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.User,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.User,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.User,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.User,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.User,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserOnCabinetBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserOnCabinetCreateInput,
        include: Optional[types.UserOnCabinetInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.UserOnCabinet,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserOnCabinetCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.UserOnCabinet,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserOnCabinetWhereUniqueInput,
        include: Optional[types.UserOnCabinetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.UserOnCabinet,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserOnCabinetUpdateInput,
        where: types.UserOnCabinetWhereUniqueInput,
        include: Optional[types.UserOnCabinetInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.UserOnCabinet,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserOnCabinetWhereUniqueInput,
        data: types.UserOnCabinetUpsertInput,
        include: Optional[types.UserOnCabinetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.UserOnCabinet,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserOnCabinetUpdateManyMutationInput,
        where: types.UserOnCabinetWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.UserOnCabinet,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserOnCabinetWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.UserOnCabinet,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class WorkerOnServiceBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.WorkerOnServiceCreateInput,
        include: Optional[types.WorkerOnServiceInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.WorkerOnService,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.WorkerOnServiceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.WorkerOnService,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.WorkerOnServiceWhereUniqueInput,
        include: Optional[types.WorkerOnServiceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.WorkerOnService,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.WorkerOnServiceUpdateInput,
        where: types.WorkerOnServiceWhereUniqueInput,
        include: Optional[types.WorkerOnServiceInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.WorkerOnService,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.WorkerOnServiceWhereUniqueInput,
        data: types.WorkerOnServiceUpsertInput,
        include: Optional[types.WorkerOnServiceInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.WorkerOnService,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.WorkerOnServiceUpdateManyMutationInput,
        where: types.WorkerOnServiceWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.WorkerOnService,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.WorkerOnServiceWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.WorkerOnService,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma