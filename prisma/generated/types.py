# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _ECabinetStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ECabinetStatus']]


class _ECabinetStatusListFilterHasInput(TypedDict):
    has: 'enums.ECabinetStatus'


class _ECabinetStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ECabinetStatus']


class _ECabinetStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ECabinetStatus']


class _ECabinetStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ECabinetStatusListFilter = Union[
    _ECabinetStatusListFilterHasInput,
    _ECabinetStatusListFilterEqualsInput,
    _ECabinetStatusListFilterHasSomeInput,
    _ECabinetStatusListFilterIsEmptyInput,
    _ECabinetStatusListFilterHasEveryInput,
]


class _ECabinetStatusListUpdateSet(TypedDict):
    set: List['enums.ECabinetStatus']


class _ECabinetStatusListUpdatePush(TypedDict):
    push: List['enums.ECabinetStatus']


ECabinetStatusListUpdate = Union[
    List['enums.ECabinetStatus'],
    _ECabinetStatusListUpdateSet,
    _ECabinetStatusListUpdatePush,
]

class _EGradeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.EGrade']]


class _EGradeListFilterHasInput(TypedDict):
    has: 'enums.EGrade'


class _EGradeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.EGrade']


class _EGradeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.EGrade']


class _EGradeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


EGradeListFilter = Union[
    _EGradeListFilterHasInput,
    _EGradeListFilterEqualsInput,
    _EGradeListFilterHasSomeInput,
    _EGradeListFilterIsEmptyInput,
    _EGradeListFilterHasEveryInput,
]


class _EGradeListUpdateSet(TypedDict):
    set: List['enums.EGrade']


class _EGradeListUpdatePush(TypedDict):
    push: List['enums.EGrade']


EGradeListUpdate = Union[
    List['enums.EGrade'],
    _EGradeListUpdateSet,
    _EGradeListUpdatePush,
]

class _EStatusRecordListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.EStatusRecord']]


class _EStatusRecordListFilterHasInput(TypedDict):
    has: 'enums.EStatusRecord'


class _EStatusRecordListFilterHasEveryInput(TypedDict):
    has_every: List['enums.EStatusRecord']


class _EStatusRecordListFilterHasSomeInput(TypedDict):
    has_some: List['enums.EStatusRecord']


class _EStatusRecordListFilterIsEmptyInput(TypedDict):
    is_empty: bool


EStatusRecordListFilter = Union[
    _EStatusRecordListFilterHasInput,
    _EStatusRecordListFilterEqualsInput,
    _EStatusRecordListFilterHasSomeInput,
    _EStatusRecordListFilterIsEmptyInput,
    _EStatusRecordListFilterHasEveryInput,
]


class _EStatusRecordListUpdateSet(TypedDict):
    set: List['enums.EStatusRecord']


class _EStatusRecordListUpdatePush(TypedDict):
    push: List['enums.EStatusRecord']


EStatusRecordListUpdate = Union[
    List['enums.EStatusRecord'],
    _EStatusRecordListUpdateSet,
    _EStatusRecordListUpdatePush,
]


# Cabinet types

class CabinetOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Cabinet create method"""
    officeId: _str
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    status: 'enums.ECabinetStatus'
    Office: 'OfficeCreateNestedWithoutRelationsInput'
    Schedule: 'ScheduleCreateManyNestedWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordCreateManyNestedWithoutRelationsInput'
    UserOnCabinet: 'UserOnCabinetCreateManyNestedWithoutRelationsInput'


class CabinetCreateInput(CabinetOptionalCreateInput):
    """Required arguments to the Cabinet create method"""
    id: _str
    number: _str
    creatorId: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CabinetOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Cabinet create method, without relations"""
    officeId: _str
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    status: 'enums.ECabinetStatus'


class CabinetCreateWithoutRelationsInput(CabinetOptionalCreateWithoutRelationsInput):
    """Required arguments to the Cabinet create method, without relations"""
    id: _str
    number: _str
    creatorId: _str
    updatedAt: datetime.datetime

class CabinetConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CabinetCreateWithoutRelationsInput'
    where: 'CabinetWhereUniqueInput'

class CabinetCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CabinetCreateWithoutRelationsInput'
    connect: 'CabinetWhereUniqueInput'
    connect_or_create: 'CabinetConnectOrCreateWithoutRelationsInput'


class CabinetCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CabinetCreateWithoutRelationsInput', List['CabinetCreateWithoutRelationsInput']]
    connect: Union['CabinetWhereUniqueInput', List['CabinetWhereUniqueInput']]
    connect_or_create: Union['CabinetConnectOrCreateWithoutRelationsInput', List['CabinetConnectOrCreateWithoutRelationsInput']]

_CabinetWhereUnique_id_Input = TypedDict(
    '_CabinetWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

CabinetWhereUniqueInput = _CabinetWhereUnique_id_Input


class CabinetUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    number: _str
    createdAt: datetime.datetime
    creatorId: _str
    deletedAt: Optional[datetime.datetime]
    updatedAt: datetime.datetime
    status: 'enums.ECabinetStatus'
    Office: 'OfficeUpdateOneWithoutRelationsInput'
    Schedule: 'ScheduleUpdateManyWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordUpdateManyWithoutRelationsInput'
    UserOnCabinet: 'UserOnCabinetUpdateManyWithoutRelationsInput'


class CabinetUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    number: _str
    createdAt: datetime.datetime
    creatorId: _str
    deletedAt: Optional[datetime.datetime]
    updatedAt: datetime.datetime
    status: 'enums.ECabinetStatus'


class CabinetUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CabinetCreateWithoutRelationsInput']
    connect: List['CabinetWhereUniqueInput']
    connect_or_create: List['CabinetConnectOrCreateWithoutRelationsInput']
    set: List['CabinetWhereUniqueInput']
    disconnect: List['CabinetWhereUniqueInput']
    delete: List['CabinetWhereUniqueInput']

    # TODO
    # update: List['CabinetUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CabinetUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CabinetScalarWhereInput']
    # upsert: List['CabinetUpserteWithWhereUniqueWithoutRelationsInput']


class CabinetUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CabinetCreateWithoutRelationsInput'
    connect: 'CabinetWhereUniqueInput'
    connect_or_create: 'CabinetConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CabinetUpdateInput'
    # upsert: 'CabinetUpsertWithoutRelationsInput'


class CabinetUpsertInput(TypedDict):
    create: 'CabinetCreateInput'
    update: 'CabinetUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Cabinet_id_OrderByInput = TypedDict(
    '_Cabinet_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Cabinet_number_OrderByInput = TypedDict(
    '_Cabinet_number_OrderByInput',
    {
        'number': 'SortOrder',
    },
    total=True
)

_Cabinet_officeId_OrderByInput = TypedDict(
    '_Cabinet_officeId_OrderByInput',
    {
        'officeId': 'SortOrder',
    },
    total=True
)

_Cabinet_createdAt_OrderByInput = TypedDict(
    '_Cabinet_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Cabinet_creatorId_OrderByInput = TypedDict(
    '_Cabinet_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_Cabinet_deletedAt_OrderByInput = TypedDict(
    '_Cabinet_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Cabinet_updatedAt_OrderByInput = TypedDict(
    '_Cabinet_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Cabinet_status_OrderByInput = TypedDict(
    '_Cabinet_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Cabinet_RelevanceInner = TypedDict(
    '_Cabinet_RelevanceInner',
    {
        'fields': 'List[CabinetScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Cabinet_RelevanceOrderByInput = TypedDict(
    '_Cabinet_RelevanceOrderByInput',
    {
        '_relevance': '_Cabinet_RelevanceInner',
    },
    total=True
)

CabinetOrderByInput = Union[
    '_Cabinet_id_OrderByInput',
    '_Cabinet_number_OrderByInput',
    '_Cabinet_officeId_OrderByInput',
    '_Cabinet_createdAt_OrderByInput',
    '_Cabinet_creatorId_OrderByInput',
    '_Cabinet_deletedAt_OrderByInput',
    '_Cabinet_updatedAt_OrderByInput',
    '_Cabinet_status_OrderByInput',
    '_Cabinet_RelevanceOrderByInput',
]



# recursive Cabinet types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CabinetRelationFilter = TypedDict(
    'CabinetRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CabinetListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CabinetInclude(TypedDict, total=False):
    """Cabinet relational arguments"""
    Office: Union[bool, 'OfficeArgsFromCabinet']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinet']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinet']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinet']


    

class CabinetIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive1']


class CabinetIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive2']


class CabinetIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive3']


class CabinetIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive4']


class CabinetIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class CabinetArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyCabinetArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive1']


class ClientIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive2']


class ClientIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive3']


class ClientIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive4']


class ClientIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ClientArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyClientArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive1']
    Review: Union[bool, 'ReviewArgsFromCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive1']


class ClientHistoryIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive2']
    Review: Union[bool, 'ReviewArgsFromCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive2']


class ClientHistoryIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive3']
    Review: Union[bool, 'ReviewArgsFromCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive3']


class ClientHistoryIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive4']
    Review: Union[bool, 'ReviewArgsFromCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive4']


class ClientHistoryIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ClientHistoryArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyClientHistoryArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive1']


class DepartmentIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive2']


class DepartmentIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive3']


class DepartmentIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive4']


class DepartmentIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class DepartmentArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyDepartmentArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Department: Union[bool, 'DepartmentArgsFromCabinetRecursive1']
    User: Union[bool, 'UserArgsFromCabinetRecursive1']


class DepartmentUserIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Department: Union[bool, 'DepartmentArgsFromCabinetRecursive2']
    User: Union[bool, 'UserArgsFromCabinetRecursive2']


class DepartmentUserIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Department: Union[bool, 'DepartmentArgsFromCabinetRecursive3']
    User: Union[bool, 'UserArgsFromCabinetRecursive3']


class DepartmentUserIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Department: Union[bool, 'DepartmentArgsFromCabinetRecursive4']
    User: Union[bool, 'UserArgsFromCabinetRecursive4']


class DepartmentUserIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class DepartmentUserArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyDepartmentUserArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive1']


class OfficeIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive2']


class OfficeIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive3']


class OfficeIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive4']


class OfficeIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class OfficeArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyOfficeArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class OpportunityIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class OpportunityIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class OpportunityIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class OpportunityIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class OpportunityArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyOpportunityArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class PositionIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class PositionIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class PositionIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""


class PositionIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class PositionArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyPositionArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'UserArgsFromCabinetRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive1']


class ProductIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'UserArgsFromCabinetRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive2']


class ProductIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'UserArgsFromCabinetRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive3']


class ProductIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'UserArgsFromCabinetRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromCabinetRecursive4']


class ProductIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ProductArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyProductArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive1']
    Product: Union[bool, 'ProductArgsFromCabinetRecursive1']


class ProductSaleIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive2']
    Product: Union[bool, 'ProductArgsFromCabinetRecursive2']


class ProductSaleIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive3']
    Product: Union[bool, 'ProductArgsFromCabinetRecursive3']


class ProductSaleIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive4']
    Product: Union[bool, 'ProductArgsFromCabinetRecursive4']


class ProductSaleIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ProductSaleArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyProductSaleArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive1']
    Client: Union[bool, 'ClientArgsFromCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive1']


class ReviewIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive2']
    Client: Union[bool, 'ClientArgsFromCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive2']


class ReviewIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive3']
    Client: Union[bool, 'ClientArgsFromCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive3']


class ReviewIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive4']
    Client: Union[bool, 'ClientArgsFromCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive4']


class ReviewIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ReviewArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyReviewArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'FindManyUserArgsFromCabinetRecursive1']


class RoleIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'FindManyUserArgsFromCabinetRecursive2']


class RoleIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'FindManyUserArgsFromCabinetRecursive3']


class RoleIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User: Union[bool, 'FindManyUserArgsFromCabinetRecursive4']


class RoleIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class RoleArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyRoleArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive1']
    User: Union[bool, 'UserArgsFromCabinetRecursive1']


class ScheduleIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive2']
    User: Union[bool, 'UserArgsFromCabinetRecursive2']


class ScheduleIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive3']
    User: Union[bool, 'UserArgsFromCabinetRecursive3']


class ScheduleIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive4']
    User: Union[bool, 'UserArgsFromCabinetRecursive4']


class ScheduleIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ScheduleArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyScheduleArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromCabinetRecursive1']


class ServiceIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromCabinetRecursive2']


class ServiceIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromCabinetRecursive3']


class ServiceIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromCabinetRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromCabinetRecursive4']


class ServiceIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ServiceArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyServiceArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromCabinetRecursive1']


class ServiceCategoryIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromCabinetRecursive2']


class ServiceCategoryIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromCabinetRecursive3']


class ServiceCategoryIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromCabinetRecursive4']


class ServiceCategoryIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ServiceCategoryArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyServiceCategoryArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive1']
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive1']
    User: Union[bool, 'UserArgsFromCabinetRecursive1']


class ServiceRecordIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive2']
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive2']
    User: Union[bool, 'UserArgsFromCabinetRecursive2']


class ServiceRecordIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive3']
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive3']
    User: Union[bool, 'UserArgsFromCabinetRecursive3']


class ServiceRecordIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Client: Union[bool, 'ClientArgsFromCabinetRecursive4']
    Office: Union[bool, 'OfficeArgsFromCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive4']
    User: Union[bool, 'UserArgsFromCabinetRecursive4']


class ServiceRecordIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class ServiceRecordArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyServiceRecordArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromCabinetRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive1']
    Role: Union[bool, 'RoleArgsFromCabinetRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive1']


class UserIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromCabinetRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive2']
    Role: Union[bool, 'RoleArgsFromCabinetRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive2']


class UserIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromCabinetRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive3']
    Role: Union[bool, 'RoleArgsFromCabinetRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive3']


class UserIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromCabinetRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromCabinetRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromCabinetRecursive4']
    Role: Union[bool, 'RoleArgsFromCabinetRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromCabinetRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromCabinetRecursive4']


class UserIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class UserArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyUserArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive1']
    User: Union[bool, 'UserArgsFromCabinetRecursive1']


class UserOnCabinetIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive2']
    User: Union[bool, 'UserArgsFromCabinetRecursive2']


class UserOnCabinetIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive3']
    User: Union[bool, 'UserArgsFromCabinetRecursive3']


class UserOnCabinetIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromCabinetRecursive4']
    User: Union[bool, 'UserArgsFromCabinetRecursive4']


class UserOnCabinetIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class UserOnCabinetArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyUserOnCabinetArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromCabinet(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromCabinetRecursive1']


class WorkerOnServiceIncludeFromCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromCabinetRecursive2']


class WorkerOnServiceIncludeFromCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromCabinetRecursive3']


class WorkerOnServiceIncludeFromCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for Cabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromCabinetRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromCabinetRecursive4']


class WorkerOnServiceIncludeFromCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for Cabinet"""

    

class WorkerOnServiceArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    
    

class FindManyWorkerOnServiceArgsFromCabinet(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromCabinetRecursive1(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromCabinetRecursive2(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromCabinetRecursive3(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromCabinetRecursive4(TypedDict, total=False):
    """Arguments for Cabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyCabinetArgs = FindManyCabinetArgsFromCabinet
FindFirstCabinetArgs = FindManyCabinetArgsFromCabinet


    

class CabinetWhereInput(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.ECabinetStatus'
    Office: 'OfficeRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'

    # should be noted that AND and NOT should be Union['CabinetWhereInputRecursive1', List['CabinetWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CabinetWhereInputRecursive1']
    OR: List['CabinetWhereInputRecursive1']
    NOT: List['CabinetWhereInputRecursive1']


class CabinetWhereInputRecursive1(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.ECabinetStatus'
    Office: 'OfficeRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'

    # should be noted that AND and NOT should be Union['CabinetWhereInputRecursive2', List['CabinetWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CabinetWhereInputRecursive2']
    OR: List['CabinetWhereInputRecursive2']
    NOT: List['CabinetWhereInputRecursive2']


class CabinetWhereInputRecursive2(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.ECabinetStatus'
    Office: 'OfficeRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'

    # should be noted that AND and NOT should be Union['CabinetWhereInputRecursive3', List['CabinetWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CabinetWhereInputRecursive3']
    OR: List['CabinetWhereInputRecursive3']
    NOT: List['CabinetWhereInputRecursive3']


class CabinetWhereInputRecursive3(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.ECabinetStatus'
    Office: 'OfficeRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'

    # should be noted that AND and NOT should be Union['CabinetWhereInputRecursive4', List['CabinetWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CabinetWhereInputRecursive4']
    OR: List['CabinetWhereInputRecursive4']
    NOT: List['CabinetWhereInputRecursive4']


class CabinetWhereInputRecursive4(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.ECabinetStatus'
    Office: 'OfficeRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'



# aggregate Cabinet types


    

class CabinetScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.ECabinetStatus'

    AND: List['CabinetScalarWhereWithAggregatesInputRecursive1']
    OR: List['CabinetScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CabinetScalarWhereWithAggregatesInputRecursive1']


class CabinetScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.ECabinetStatus'

    AND: List['CabinetScalarWhereWithAggregatesInputRecursive2']
    OR: List['CabinetScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CabinetScalarWhereWithAggregatesInputRecursive2']


class CabinetScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.ECabinetStatus'

    AND: List['CabinetScalarWhereWithAggregatesInputRecursive3']
    OR: List['CabinetScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CabinetScalarWhereWithAggregatesInputRecursive3']


class CabinetScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.ECabinetStatus'

    AND: List['CabinetScalarWhereWithAggregatesInputRecursive4']
    OR: List['CabinetScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CabinetScalarWhereWithAggregatesInputRecursive4']


class CabinetScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Cabinet arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.ECabinetStatus'



class CabinetGroupByOutput(TypedDict, total=False):
    id: _str
    number: _str
    officeId: _str
    createdAt: datetime.datetime
    creatorId: _str
    deletedAt: datetime.datetime
    updatedAt: datetime.datetime
    status: 'enums.ECabinetStatus'
    _sum: 'CabinetSumAggregateOutput'
    _avg: 'CabinetAvgAggregateOutput'
    _min: 'CabinetMinAggregateOutput'
    _max: 'CabinetMaxAggregateOutput'
    _count: 'CabinetCountAggregateOutput'


class CabinetAvgAggregateOutput(TypedDict, total=False):
    """Cabinet output for aggregating averages"""


class CabinetSumAggregateOutput(TypedDict, total=False):
    """Cabinet output for aggregating sums"""


class CabinetScalarAggregateOutput(TypedDict, total=False):
    """Cabinet output including scalar fields"""
    id: _str
    number: _str
    officeId: _str
    createdAt: datetime.datetime
    creatorId: _str
    deletedAt: datetime.datetime
    updatedAt: datetime.datetime
    status: 'enums.ECabinetStatus'


CabinetMinAggregateOutput = CabinetScalarAggregateOutput
CabinetMaxAggregateOutput = CabinetScalarAggregateOutput


class CabinetMaxAggregateInput(TypedDict, total=False):
    """Cabinet input for aggregating by max"""
    id: bool
    number: bool
    officeId: bool
    createdAt: bool
    creatorId: bool
    deletedAt: bool
    updatedAt: bool
    status: bool


class CabinetMinAggregateInput(TypedDict, total=False):
    """Cabinet input for aggregating by min"""
    id: bool
    number: bool
    officeId: bool
    createdAt: bool
    creatorId: bool
    deletedAt: bool
    updatedAt: bool
    status: bool


class CabinetNumberAggregateInput(TypedDict, total=False):
    """Cabinet input for aggregating numbers"""


CabinetAvgAggregateInput = CabinetNumberAggregateInput
CabinetSumAggregateInput = CabinetNumberAggregateInput


CabinetCountAggregateInput = TypedDict(
    'CabinetCountAggregateInput',
    {
        'id': bool,
        'number': bool,
        'officeId': bool,
        'createdAt': bool,
        'creatorId': bool,
        'deletedAt': bool,
        'updatedAt': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

CabinetCountAggregateOutput = TypedDict(
    'CabinetCountAggregateOutput',
    {
        'id': int,
        'number': int,
        'officeId': int,
        'createdAt': int,
        'creatorId': int,
        'deletedAt': int,
        'updatedAt': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


CabinetKeys = Literal[
    'id',
    'number',
    'officeId',
    'createdAt',
    'creatorId',
    'deletedAt',
    'updatedAt',
    'status',
    'Office',
    'Schedule',
    'ServiceRecord',
    'UserOnCabinet',
]
CabinetScalarFieldKeys = Literal[
    'id',
    'number',
    'officeId',
    'createdAt',
    'creatorId',
    'deletedAt',
    'updatedAt',
    'status',
]
CabinetScalarFieldKeysT = TypeVar('CabinetScalarFieldKeysT', bound=CabinetScalarFieldKeys)

CabinetRelationalFieldKeys = Literal[
        'Office',
        'Schedule',
        'ServiceRecord',
        'UserOnCabinet',
    ]

# Client types

class ClientOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Client create method"""
    middleName: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    ClientHistory: 'ClientHistoryCreateManyNestedWithoutRelationsInput'
    ProductSale: 'ProductSaleCreateManyNestedWithoutRelationsInput'
    Review: 'ReviewCreateManyNestedWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordCreateManyNestedWithoutRelationsInput'


class ClientCreateInput(ClientOptionalCreateInput):
    """Required arguments to the Client create method"""
    id: _str
    telegramId: _str
    firstName: _str
    lastName: _str
    birthDate: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClientOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Client create method, without relations"""
    middleName: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class ClientCreateWithoutRelationsInput(ClientOptionalCreateWithoutRelationsInput):
    """Required arguments to the Client create method, without relations"""
    id: _str
    telegramId: _str
    firstName: _str
    lastName: _str
    birthDate: datetime.datetime
    updatedAt: datetime.datetime

class ClientConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ClientCreateWithoutRelationsInput'
    where: 'ClientWhereUniqueInput'

class ClientCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClientCreateWithoutRelationsInput'
    connect: 'ClientWhereUniqueInput'
    connect_or_create: 'ClientConnectOrCreateWithoutRelationsInput'


class ClientCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClientCreateWithoutRelationsInput', List['ClientCreateWithoutRelationsInput']]
    connect: Union['ClientWhereUniqueInput', List['ClientWhereUniqueInput']]
    connect_or_create: Union['ClientConnectOrCreateWithoutRelationsInput', List['ClientConnectOrCreateWithoutRelationsInput']]

_ClientWhereUnique_id_Input = TypedDict(
    '_ClientWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ClientWhereUnique_telegramId_Input = TypedDict(
    '_ClientWhereUnique_telegramId_Input',
    {
        'telegramId': '_str',
    },
    total=True
)

ClientWhereUniqueInput = Union[
    '_ClientWhereUnique_id_Input',
    '_ClientWhereUnique_telegramId_Input',
]


class ClientUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    telegramId: _str
    firstName: _str
    lastName: _str
    middleName: Optional[_str]
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    ClientHistory: 'ClientHistoryUpdateManyWithoutRelationsInput'
    ProductSale: 'ProductSaleUpdateManyWithoutRelationsInput'
    Review: 'ReviewUpdateManyWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordUpdateManyWithoutRelationsInput'


class ClientUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    telegramId: _str
    firstName: _str
    lastName: _str
    middleName: Optional[_str]
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class ClientUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClientCreateWithoutRelationsInput']
    connect: List['ClientWhereUniqueInput']
    connect_or_create: List['ClientConnectOrCreateWithoutRelationsInput']
    set: List['ClientWhereUniqueInput']
    disconnect: List['ClientWhereUniqueInput']
    delete: List['ClientWhereUniqueInput']

    # TODO
    # update: List['ClientUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClientUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClientScalarWhereInput']
    # upsert: List['ClientUpserteWithWhereUniqueWithoutRelationsInput']


class ClientUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClientCreateWithoutRelationsInput'
    connect: 'ClientWhereUniqueInput'
    connect_or_create: 'ClientConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClientUpdateInput'
    # upsert: 'ClientUpsertWithoutRelationsInput'


class ClientUpsertInput(TypedDict):
    create: 'ClientCreateInput'
    update: 'ClientUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Client_id_OrderByInput = TypedDict(
    '_Client_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Client_telegramId_OrderByInput = TypedDict(
    '_Client_telegramId_OrderByInput',
    {
        'telegramId': 'SortOrder',
    },
    total=True
)

_Client_firstName_OrderByInput = TypedDict(
    '_Client_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_Client_lastName_OrderByInput = TypedDict(
    '_Client_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_Client_middleName_OrderByInput = TypedDict(
    '_Client_middleName_OrderByInput',
    {
        'middleName': 'SortOrder',
    },
    total=True
)

_Client_birthDate_OrderByInput = TypedDict(
    '_Client_birthDate_OrderByInput',
    {
        'birthDate': 'SortOrder',
    },
    total=True
)

_Client_createdAt_OrderByInput = TypedDict(
    '_Client_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Client_updatedAt_OrderByInput = TypedDict(
    '_Client_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Client_deletedAt_OrderByInput = TypedDict(
    '_Client_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Client_RelevanceInner = TypedDict(
    '_Client_RelevanceInner',
    {
        'fields': 'List[ClientScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Client_RelevanceOrderByInput = TypedDict(
    '_Client_RelevanceOrderByInput',
    {
        '_relevance': '_Client_RelevanceInner',
    },
    total=True
)

ClientOrderByInput = Union[
    '_Client_id_OrderByInput',
    '_Client_telegramId_OrderByInput',
    '_Client_firstName_OrderByInput',
    '_Client_lastName_OrderByInput',
    '_Client_middleName_OrderByInput',
    '_Client_birthDate_OrderByInput',
    '_Client_createdAt_OrderByInput',
    '_Client_updatedAt_OrderByInput',
    '_Client_deletedAt_OrderByInput',
    '_Client_RelevanceOrderByInput',
]



# recursive Client types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ClientRelationFilter = TypedDict(
    'ClientRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ClientListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ClientInclude(TypedDict, total=False):
    """Client relational arguments"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClient']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClient']
    Review: Union[bool, 'FindManyReviewArgsFromClient']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClient']


    

class CabinetIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Office: Union[bool, 'OfficeArgsFromClientRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive1']


class CabinetIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Office: Union[bool, 'OfficeArgsFromClientRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive2']


class CabinetIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Office: Union[bool, 'OfficeArgsFromClientRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive3']


class CabinetIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Office: Union[bool, 'OfficeArgsFromClientRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive4']


class CabinetIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class CabinetArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyCabinetArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive1']


class ClientIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive2']


class ClientIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive3']


class ClientIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive4']


class ClientIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ClientArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyClientArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive1']
    Review: Union[bool, 'ReviewArgsFromClientRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientRecursive1']


class ClientHistoryIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive2']
    Review: Union[bool, 'ReviewArgsFromClientRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientRecursive2']


class ClientHistoryIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive3']
    Review: Union[bool, 'ReviewArgsFromClientRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientRecursive3']


class ClientHistoryIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive4']
    Review: Union[bool, 'ReviewArgsFromClientRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientRecursive4']


class ClientHistoryIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ClientHistoryArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyClientHistoryArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive1']


class DepartmentIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive2']


class DepartmentIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive3']


class DepartmentIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive4']


class DepartmentIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class DepartmentArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyDepartmentArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Department: Union[bool, 'DepartmentArgsFromClientRecursive1']
    User: Union[bool, 'UserArgsFromClientRecursive1']


class DepartmentUserIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Department: Union[bool, 'DepartmentArgsFromClientRecursive2']
    User: Union[bool, 'UserArgsFromClientRecursive2']


class DepartmentUserIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Department: Union[bool, 'DepartmentArgsFromClientRecursive3']
    User: Union[bool, 'UserArgsFromClientRecursive3']


class DepartmentUserIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Department: Union[bool, 'DepartmentArgsFromClientRecursive4']
    User: Union[bool, 'UserArgsFromClientRecursive4']


class DepartmentUserIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class DepartmentUserArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyDepartmentUserArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive1']


class OfficeIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive2']


class OfficeIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive3']


class OfficeIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive4']


class OfficeIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class OfficeArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyOfficeArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""


class OpportunityIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""


class OpportunityIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""


class OpportunityIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""


class OpportunityIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class OpportunityArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyOpportunityArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""


class PositionIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""


class PositionIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""


class PositionIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""


class PositionIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class PositionArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyPositionArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'UserArgsFromClientRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive1']


class ProductIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'UserArgsFromClientRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive2']


class ProductIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'UserArgsFromClientRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive3']


class ProductIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'UserArgsFromClientRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientRecursive4']


class ProductIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ProductArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyProductArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive1']
    Product: Union[bool, 'ProductArgsFromClientRecursive1']


class ProductSaleIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive2']
    Product: Union[bool, 'ProductArgsFromClientRecursive2']


class ProductSaleIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive3']
    Product: Union[bool, 'ProductArgsFromClientRecursive3']


class ProductSaleIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive4']
    Product: Union[bool, 'ProductArgsFromClientRecursive4']


class ProductSaleIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ProductSaleArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyProductSaleArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive1']
    Client: Union[bool, 'ClientArgsFromClientRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientRecursive1']


class ReviewIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive2']
    Client: Union[bool, 'ClientArgsFromClientRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientRecursive2']


class ReviewIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive3']
    Client: Union[bool, 'ClientArgsFromClientRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientRecursive3']


class ReviewIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive4']
    Client: Union[bool, 'ClientArgsFromClientRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientRecursive4']


class ReviewIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ReviewArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyReviewArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'FindManyUserArgsFromClientRecursive1']


class RoleIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'FindManyUserArgsFromClientRecursive2']


class RoleIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'FindManyUserArgsFromClientRecursive3']


class RoleIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    User: Union[bool, 'FindManyUserArgsFromClientRecursive4']


class RoleIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class RoleArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyRoleArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive1']
    User: Union[bool, 'UserArgsFromClientRecursive1']


class ScheduleIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive2']
    User: Union[bool, 'UserArgsFromClientRecursive2']


class ScheduleIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive3']
    User: Union[bool, 'UserArgsFromClientRecursive3']


class ScheduleIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive4']
    User: Union[bool, 'UserArgsFromClientRecursive4']


class ScheduleIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ScheduleArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyScheduleArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientRecursive1']


class ServiceIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientRecursive2']


class ServiceIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientRecursive3']


class ServiceIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromClientRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientRecursive4']


class ServiceIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ServiceArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyServiceArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Service: Union[bool, 'FindManyServiceArgsFromClientRecursive1']


class ServiceCategoryIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Service: Union[bool, 'FindManyServiceArgsFromClientRecursive2']


class ServiceCategoryIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Service: Union[bool, 'FindManyServiceArgsFromClientRecursive3']


class ServiceCategoryIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Service: Union[bool, 'FindManyServiceArgsFromClientRecursive4']


class ServiceCategoryIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ServiceCategoryArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyServiceCategoryArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive1']
    Office: Union[bool, 'OfficeArgsFromClientRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive1']
    User: Union[bool, 'UserArgsFromClientRecursive1']


class ServiceRecordIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive2']
    Office: Union[bool, 'OfficeArgsFromClientRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive2']
    User: Union[bool, 'UserArgsFromClientRecursive2']


class ServiceRecordIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive3']
    Office: Union[bool, 'OfficeArgsFromClientRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive3']
    User: Union[bool, 'UserArgsFromClientRecursive3']


class ServiceRecordIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Client: Union[bool, 'ClientArgsFromClientRecursive4']
    Office: Union[bool, 'OfficeArgsFromClientRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive4']
    User: Union[bool, 'UserArgsFromClientRecursive4']


class ServiceRecordIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class ServiceRecordArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyServiceRecordArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromClientRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive1']
    Role: Union[bool, 'RoleArgsFromClientRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive1']


class UserIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromClientRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive2']
    Role: Union[bool, 'RoleArgsFromClientRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive2']


class UserIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromClientRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive3']
    Role: Union[bool, 'RoleArgsFromClientRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive3']


class UserIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromClientRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientRecursive4']
    Role: Union[bool, 'RoleArgsFromClientRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientRecursive4']


class UserIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class UserArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyUserArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive1']
    User: Union[bool, 'UserArgsFromClientRecursive1']


class UserOnCabinetIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive2']
    User: Union[bool, 'UserArgsFromClientRecursive2']


class UserOnCabinetIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive3']
    User: Union[bool, 'UserArgsFromClientRecursive3']


class UserOnCabinetIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    Cabinet: Union[bool, 'CabinetArgsFromClientRecursive4']
    User: Union[bool, 'UserArgsFromClientRecursive4']


class UserOnCabinetIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class UserOnCabinetArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyUserOnCabinetArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromClient(TypedDict, total=False):
    """Relational arguments for Client"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientRecursive1']


class WorkerOnServiceIncludeFromClientRecursive1(TypedDict, total=False):
    """Relational arguments for Client"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientRecursive2']


class WorkerOnServiceIncludeFromClientRecursive2(TypedDict, total=False):
    """Relational arguments for Client"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientRecursive3']


class WorkerOnServiceIncludeFromClientRecursive3(TypedDict, total=False):
    """Relational arguments for Client"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientRecursive4']


class WorkerOnServiceIncludeFromClientRecursive4(TypedDict, total=False):
    """Relational arguments for Client"""

    

class WorkerOnServiceArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    
    

class FindManyWorkerOnServiceArgsFromClient(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromClientRecursive1(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromClientRecursive2(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromClientRecursive3(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromClientRecursive4(TypedDict, total=False):
    """Arguments for Client"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyClientArgs = FindManyClientArgsFromClient
FindFirstClientArgs = FindManyClientArgsFromClient


    

class ClientWhereInput(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    telegramId: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['ClientWhereInputRecursive1', List['ClientWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ClientWhereInputRecursive1']
    OR: List['ClientWhereInputRecursive1']
    NOT: List['ClientWhereInputRecursive1']


class ClientWhereInputRecursive1(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    telegramId: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['ClientWhereInputRecursive2', List['ClientWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ClientWhereInputRecursive2']
    OR: List['ClientWhereInputRecursive2']
    NOT: List['ClientWhereInputRecursive2']


class ClientWhereInputRecursive2(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    telegramId: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['ClientWhereInputRecursive3', List['ClientWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ClientWhereInputRecursive3']
    OR: List['ClientWhereInputRecursive3']
    NOT: List['ClientWhereInputRecursive3']


class ClientWhereInputRecursive3(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    telegramId: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['ClientWhereInputRecursive4', List['ClientWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ClientWhereInputRecursive4']
    OR: List['ClientWhereInputRecursive4']
    NOT: List['ClientWhereInputRecursive4']


class ClientWhereInputRecursive4(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    telegramId: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'



# aggregate Client types


    

class ClientScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ClientScalarWhereWithAggregatesInputRecursive1']
    OR: List['ClientScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ClientScalarWhereWithAggregatesInputRecursive1']


class ClientScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ClientScalarWhereWithAggregatesInputRecursive2']
    OR: List['ClientScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ClientScalarWhereWithAggregatesInputRecursive2']


class ClientScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ClientScalarWhereWithAggregatesInputRecursive3']
    OR: List['ClientScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ClientScalarWhereWithAggregatesInputRecursive3']


class ClientScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ClientScalarWhereWithAggregatesInputRecursive4']
    OR: List['ClientScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ClientScalarWhereWithAggregatesInputRecursive4']


class ClientScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Client arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ClientGroupByOutput(TypedDict, total=False):
    id: _str
    telegramId: _str
    firstName: _str
    lastName: _str
    middleName: _str
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    _sum: 'ClientSumAggregateOutput'
    _avg: 'ClientAvgAggregateOutput'
    _min: 'ClientMinAggregateOutput'
    _max: 'ClientMaxAggregateOutput'
    _count: 'ClientCountAggregateOutput'


class ClientAvgAggregateOutput(TypedDict, total=False):
    """Client output for aggregating averages"""


class ClientSumAggregateOutput(TypedDict, total=False):
    """Client output for aggregating sums"""


class ClientScalarAggregateOutput(TypedDict, total=False):
    """Client output including scalar fields"""
    id: _str
    telegramId: _str
    firstName: _str
    lastName: _str
    middleName: _str
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime


ClientMinAggregateOutput = ClientScalarAggregateOutput
ClientMaxAggregateOutput = ClientScalarAggregateOutput


class ClientMaxAggregateInput(TypedDict, total=False):
    """Client input for aggregating by max"""
    id: bool
    telegramId: bool
    firstName: bool
    lastName: bool
    middleName: bool
    birthDate: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool


class ClientMinAggregateInput(TypedDict, total=False):
    """Client input for aggregating by min"""
    id: bool
    telegramId: bool
    firstName: bool
    lastName: bool
    middleName: bool
    birthDate: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool


class ClientNumberAggregateInput(TypedDict, total=False):
    """Client input for aggregating numbers"""


ClientAvgAggregateInput = ClientNumberAggregateInput
ClientSumAggregateInput = ClientNumberAggregateInput


ClientCountAggregateInput = TypedDict(
    'ClientCountAggregateInput',
    {
        'id': bool,
        'telegramId': bool,
        'firstName': bool,
        'lastName': bool,
        'middleName': bool,
        'birthDate': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'deletedAt': bool,
        '_all': bool,
    },
    total=False,
)

ClientCountAggregateOutput = TypedDict(
    'ClientCountAggregateOutput',
    {
        'id': int,
        'telegramId': int,
        'firstName': int,
        'lastName': int,
        'middleName': int,
        'birthDate': int,
        'createdAt': int,
        'updatedAt': int,
        'deletedAt': int,
        '_all': int,
    },
    total=False,
)


ClientKeys = Literal[
    'id',
    'telegramId',
    'firstName',
    'lastName',
    'middleName',
    'birthDate',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'ClientHistory',
    'ProductSale',
    'Review',
    'ServiceRecord',
]
ClientScalarFieldKeys = Literal[
    'id',
    'telegramId',
    'firstName',
    'lastName',
    'middleName',
    'birthDate',
    'createdAt',
    'updatedAt',
    'deletedAt',
]
ClientScalarFieldKeysT = TypeVar('ClientScalarFieldKeysT', bound=ClientScalarFieldKeys)

ClientRelationalFieldKeys = Literal[
        'ClientHistory',
        'ProductSale',
        'Review',
        'ServiceRecord',
    ]

# ClientHistory types

class ClientHistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ClientHistory create method"""
    clientId: _str
    serviceId: _str
    feedbackId: Optional[_str]
    Client: 'ClientCreateNestedWithoutRelationsInput'
    Review: 'ReviewCreateNestedWithoutRelationsInput'
    Service: 'ServiceCreateNestedWithoutRelationsInput'


class ClientHistoryCreateInput(ClientHistoryOptionalCreateInput):
    """Required arguments to the ClientHistory create method"""
    id: _str
    date: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClientHistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ClientHistory create method, without relations"""
    clientId: _str
    serviceId: _str
    feedbackId: Optional[_str]


class ClientHistoryCreateWithoutRelationsInput(ClientHistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the ClientHistory create method, without relations"""
    id: _str
    date: datetime.datetime

class ClientHistoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ClientHistoryCreateWithoutRelationsInput'
    where: 'ClientHistoryWhereUniqueInput'

class ClientHistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClientHistoryCreateWithoutRelationsInput'
    connect: 'ClientHistoryWhereUniqueInput'
    connect_or_create: 'ClientHistoryConnectOrCreateWithoutRelationsInput'


class ClientHistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClientHistoryCreateWithoutRelationsInput', List['ClientHistoryCreateWithoutRelationsInput']]
    connect: Union['ClientHistoryWhereUniqueInput', List['ClientHistoryWhereUniqueInput']]
    connect_or_create: Union['ClientHistoryConnectOrCreateWithoutRelationsInput', List['ClientHistoryConnectOrCreateWithoutRelationsInput']]

_ClientHistoryWhereUnique_id_Input = TypedDict(
    '_ClientHistoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ClientHistoryWhereUniqueInput = _ClientHistoryWhereUnique_id_Input


class ClientHistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    date: datetime.datetime
    Client: 'ClientUpdateOneWithoutRelationsInput'
    Review: 'ReviewUpdateOneWithoutRelationsInput'
    Service: 'ServiceUpdateOneWithoutRelationsInput'


class ClientHistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    date: datetime.datetime


class ClientHistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClientHistoryCreateWithoutRelationsInput']
    connect: List['ClientHistoryWhereUniqueInput']
    connect_or_create: List['ClientHistoryConnectOrCreateWithoutRelationsInput']
    set: List['ClientHistoryWhereUniqueInput']
    disconnect: List['ClientHistoryWhereUniqueInput']
    delete: List['ClientHistoryWhereUniqueInput']

    # TODO
    # update: List['ClientHistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClientHistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClientHistoryScalarWhereInput']
    # upsert: List['ClientHistoryUpserteWithWhereUniqueWithoutRelationsInput']


class ClientHistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClientHistoryCreateWithoutRelationsInput'
    connect: 'ClientHistoryWhereUniqueInput'
    connect_or_create: 'ClientHistoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClientHistoryUpdateInput'
    # upsert: 'ClientHistoryUpsertWithoutRelationsInput'


class ClientHistoryUpsertInput(TypedDict):
    create: 'ClientHistoryCreateInput'
    update: 'ClientHistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ClientHistory_id_OrderByInput = TypedDict(
    '_ClientHistory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ClientHistory_clientId_OrderByInput = TypedDict(
    '_ClientHistory_clientId_OrderByInput',
    {
        'clientId': 'SortOrder',
    },
    total=True
)

_ClientHistory_serviceId_OrderByInput = TypedDict(
    '_ClientHistory_serviceId_OrderByInput',
    {
        'serviceId': 'SortOrder',
    },
    total=True
)

_ClientHistory_date_OrderByInput = TypedDict(
    '_ClientHistory_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_ClientHistory_feedbackId_OrderByInput = TypedDict(
    '_ClientHistory_feedbackId_OrderByInput',
    {
        'feedbackId': 'SortOrder',
    },
    total=True
)

_ClientHistory_RelevanceInner = TypedDict(
    '_ClientHistory_RelevanceInner',
    {
        'fields': 'List[ClientHistoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ClientHistory_RelevanceOrderByInput = TypedDict(
    '_ClientHistory_RelevanceOrderByInput',
    {
        '_relevance': '_ClientHistory_RelevanceInner',
    },
    total=True
)

ClientHistoryOrderByInput = Union[
    '_ClientHistory_id_OrderByInput',
    '_ClientHistory_clientId_OrderByInput',
    '_ClientHistory_serviceId_OrderByInput',
    '_ClientHistory_date_OrderByInput',
    '_ClientHistory_feedbackId_OrderByInput',
    '_ClientHistory_RelevanceOrderByInput',
]



# recursive ClientHistory types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ClientHistoryRelationFilter = TypedDict(
    'ClientHistoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ClientHistoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ClientHistoryInclude(TypedDict, total=False):
    """ClientHistory relational arguments"""
    Client: Union[bool, 'ClientArgsFromClientHistory']
    Review: Union[bool, 'ReviewArgsFromClientHistory']
    Service: Union[bool, 'ServiceArgsFromClientHistory']


    

class CabinetIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive1']


class CabinetIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive2']


class CabinetIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive3']


class CabinetIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive4']


class CabinetIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class CabinetArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyCabinetArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive1']


class ClientIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive2']


class ClientIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive3']


class ClientIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive4']


class ClientIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ClientArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyClientArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive1']
    Review: Union[bool, 'ReviewArgsFromClientHistoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive1']


class ClientHistoryIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive2']
    Review: Union[bool, 'ReviewArgsFromClientHistoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive2']


class ClientHistoryIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive3']
    Review: Union[bool, 'ReviewArgsFromClientHistoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive3']


class ClientHistoryIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive4']
    Review: Union[bool, 'ReviewArgsFromClientHistoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive4']


class ClientHistoryIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ClientHistoryArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyClientHistoryArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive1']


class DepartmentIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive2']


class DepartmentIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive3']


class DepartmentIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive4']


class DepartmentIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class DepartmentArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyDepartmentArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Department: Union[bool, 'DepartmentArgsFromClientHistoryRecursive1']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive1']


class DepartmentUserIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Department: Union[bool, 'DepartmentArgsFromClientHistoryRecursive2']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive2']


class DepartmentUserIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Department: Union[bool, 'DepartmentArgsFromClientHistoryRecursive3']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive3']


class DepartmentUserIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Department: Union[bool, 'DepartmentArgsFromClientHistoryRecursive4']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive4']


class DepartmentUserIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class DepartmentUserArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyDepartmentUserArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientHistoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive1']


class OfficeIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientHistoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive2']


class OfficeIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientHistoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive3']


class OfficeIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromClientHistoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive4']


class OfficeIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class OfficeArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyOfficeArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class OpportunityIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class OpportunityIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class OpportunityIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class OpportunityIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class OpportunityArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyOpportunityArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class PositionIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class PositionIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class PositionIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""


class PositionIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class PositionArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyPositionArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'UserArgsFromClientHistoryRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive1']


class ProductIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'UserArgsFromClientHistoryRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive2']


class ProductIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'UserArgsFromClientHistoryRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive3']


class ProductIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'UserArgsFromClientHistoryRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromClientHistoryRecursive4']


class ProductIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ProductArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyProductArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive1']
    Product: Union[bool, 'ProductArgsFromClientHistoryRecursive1']


class ProductSaleIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive2']
    Product: Union[bool, 'ProductArgsFromClientHistoryRecursive2']


class ProductSaleIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive3']
    Product: Union[bool, 'ProductArgsFromClientHistoryRecursive3']


class ProductSaleIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive4']
    Product: Union[bool, 'ProductArgsFromClientHistoryRecursive4']


class ProductSaleIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ProductSaleArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyProductSaleArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive1']
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive1']


class ReviewIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive2']
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive2']


class ReviewIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive3']
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive3']


class ReviewIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive4']
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive4']


class ReviewIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ReviewArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyReviewArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'FindManyUserArgsFromClientHistoryRecursive1']


class RoleIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'FindManyUserArgsFromClientHistoryRecursive2']


class RoleIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'FindManyUserArgsFromClientHistoryRecursive3']


class RoleIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User: Union[bool, 'FindManyUserArgsFromClientHistoryRecursive4']


class RoleIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class RoleArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyRoleArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive1']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive1']


class ScheduleIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive2']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive2']


class ScheduleIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive3']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive3']


class ScheduleIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive4']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive4']


class ScheduleIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ScheduleArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyScheduleArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientHistoryRecursive1']


class ServiceIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientHistoryRecursive2']


class ServiceIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientHistoryRecursive3']


class ServiceIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromClientHistoryRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromClientHistoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromClientHistoryRecursive4']


class ServiceIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ServiceArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyServiceArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Service: Union[bool, 'FindManyServiceArgsFromClientHistoryRecursive1']


class ServiceCategoryIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Service: Union[bool, 'FindManyServiceArgsFromClientHistoryRecursive2']


class ServiceCategoryIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Service: Union[bool, 'FindManyServiceArgsFromClientHistoryRecursive3']


class ServiceCategoryIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Service: Union[bool, 'FindManyServiceArgsFromClientHistoryRecursive4']


class ServiceCategoryIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ServiceCategoryArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyServiceCategoryArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive1']
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive1']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive1']


class ServiceRecordIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive2']
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive2']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive2']


class ServiceRecordIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive3']
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive3']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive3']


class ServiceRecordIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Client: Union[bool, 'ClientArgsFromClientHistoryRecursive4']
    Office: Union[bool, 'OfficeArgsFromClientHistoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive4']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive4']


class ServiceRecordIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class ServiceRecordArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyServiceRecordArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromClientHistoryRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive1']
    Role: Union[bool, 'RoleArgsFromClientHistoryRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive1']


class UserIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromClientHistoryRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive2']
    Role: Union[bool, 'RoleArgsFromClientHistoryRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive2']


class UserIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromClientHistoryRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive3']
    Role: Union[bool, 'RoleArgsFromClientHistoryRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive3']


class UserIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromClientHistoryRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromClientHistoryRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromClientHistoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromClientHistoryRecursive4']
    Role: Union[bool, 'RoleArgsFromClientHistoryRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromClientHistoryRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromClientHistoryRecursive4']


class UserIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class UserArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyUserArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive1']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive1']


class UserOnCabinetIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive2']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive2']


class UserOnCabinetIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive3']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive3']


class UserOnCabinetIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    Cabinet: Union[bool, 'CabinetArgsFromClientHistoryRecursive4']
    User: Union[bool, 'UserArgsFromClientHistoryRecursive4']


class UserOnCabinetIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class UserOnCabinetArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyUserOnCabinetArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromClientHistory(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive1']


class WorkerOnServiceIncludeFromClientHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive2']


class WorkerOnServiceIncludeFromClientHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive3']


class WorkerOnServiceIncludeFromClientHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for ClientHistory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromClientHistoryRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromClientHistoryRecursive4']


class WorkerOnServiceIncludeFromClientHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for ClientHistory"""

    

class WorkerOnServiceArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    
    

class FindManyWorkerOnServiceArgsFromClientHistory(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromClientHistoryRecursive1(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromClientHistoryRecursive2(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromClientHistoryRecursive3(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromClientHistoryRecursive4(TypedDict, total=False):
    """Arguments for ClientHistory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyClientHistoryArgs = FindManyClientHistoryArgsFromClientHistory
FindFirstClientHistoryArgs = FindManyClientHistoryArgsFromClientHistory


    

class ClientHistoryWhereInput(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    feedbackId: Union[None, _str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Review: 'ReviewRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ClientHistoryWhereInputRecursive1', List['ClientHistoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ClientHistoryWhereInputRecursive1']
    OR: List['ClientHistoryWhereInputRecursive1']
    NOT: List['ClientHistoryWhereInputRecursive1']


class ClientHistoryWhereInputRecursive1(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    feedbackId: Union[None, _str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Review: 'ReviewRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ClientHistoryWhereInputRecursive2', List['ClientHistoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ClientHistoryWhereInputRecursive2']
    OR: List['ClientHistoryWhereInputRecursive2']
    NOT: List['ClientHistoryWhereInputRecursive2']


class ClientHistoryWhereInputRecursive2(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    feedbackId: Union[None, _str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Review: 'ReviewRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ClientHistoryWhereInputRecursive3', List['ClientHistoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ClientHistoryWhereInputRecursive3']
    OR: List['ClientHistoryWhereInputRecursive3']
    NOT: List['ClientHistoryWhereInputRecursive3']


class ClientHistoryWhereInputRecursive3(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    feedbackId: Union[None, _str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Review: 'ReviewRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ClientHistoryWhereInputRecursive4', List['ClientHistoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ClientHistoryWhereInputRecursive4']
    OR: List['ClientHistoryWhereInputRecursive4']
    NOT: List['ClientHistoryWhereInputRecursive4']


class ClientHistoryWhereInputRecursive4(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    feedbackId: Union[None, _str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Review: 'ReviewRelationFilter'
    Service: 'ServiceRelationFilter'



# aggregate ClientHistory types


    

class ClientHistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    feedbackId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClientHistoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['ClientHistoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ClientHistoryScalarWhereWithAggregatesInputRecursive1']


class ClientHistoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    feedbackId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClientHistoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['ClientHistoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ClientHistoryScalarWhereWithAggregatesInputRecursive2']


class ClientHistoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    feedbackId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClientHistoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['ClientHistoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ClientHistoryScalarWhereWithAggregatesInputRecursive3']


class ClientHistoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    feedbackId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ClientHistoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['ClientHistoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ClientHistoryScalarWhereWithAggregatesInputRecursive4']


class ClientHistoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ClientHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    feedbackId: Union[_str, 'types.StringWithAggregatesFilter']



class ClientHistoryGroupByOutput(TypedDict, total=False):
    id: _str
    clientId: _str
    serviceId: _str
    date: datetime.datetime
    feedbackId: _str
    _sum: 'ClientHistorySumAggregateOutput'
    _avg: 'ClientHistoryAvgAggregateOutput'
    _min: 'ClientHistoryMinAggregateOutput'
    _max: 'ClientHistoryMaxAggregateOutput'
    _count: 'ClientHistoryCountAggregateOutput'


class ClientHistoryAvgAggregateOutput(TypedDict, total=False):
    """ClientHistory output for aggregating averages"""


class ClientHistorySumAggregateOutput(TypedDict, total=False):
    """ClientHistory output for aggregating sums"""


class ClientHistoryScalarAggregateOutput(TypedDict, total=False):
    """ClientHistory output including scalar fields"""
    id: _str
    clientId: _str
    serviceId: _str
    date: datetime.datetime
    feedbackId: _str


ClientHistoryMinAggregateOutput = ClientHistoryScalarAggregateOutput
ClientHistoryMaxAggregateOutput = ClientHistoryScalarAggregateOutput


class ClientHistoryMaxAggregateInput(TypedDict, total=False):
    """ClientHistory input for aggregating by max"""
    id: bool
    clientId: bool
    serviceId: bool
    date: bool
    feedbackId: bool


class ClientHistoryMinAggregateInput(TypedDict, total=False):
    """ClientHistory input for aggregating by min"""
    id: bool
    clientId: bool
    serviceId: bool
    date: bool
    feedbackId: bool


class ClientHistoryNumberAggregateInput(TypedDict, total=False):
    """ClientHistory input for aggregating numbers"""


ClientHistoryAvgAggregateInput = ClientHistoryNumberAggregateInput
ClientHistorySumAggregateInput = ClientHistoryNumberAggregateInput


ClientHistoryCountAggregateInput = TypedDict(
    'ClientHistoryCountAggregateInput',
    {
        'id': bool,
        'clientId': bool,
        'serviceId': bool,
        'date': bool,
        'feedbackId': bool,
        '_all': bool,
    },
    total=False,
)

ClientHistoryCountAggregateOutput = TypedDict(
    'ClientHistoryCountAggregateOutput',
    {
        'id': int,
        'clientId': int,
        'serviceId': int,
        'date': int,
        'feedbackId': int,
        '_all': int,
    },
    total=False,
)


ClientHistoryKeys = Literal[
    'id',
    'clientId',
    'serviceId',
    'date',
    'feedbackId',
    'Client',
    'Review',
    'Service',
]
ClientHistoryScalarFieldKeys = Literal[
    'id',
    'clientId',
    'serviceId',
    'date',
    'feedbackId',
]
ClientHistoryScalarFieldKeysT = TypeVar('ClientHistoryScalarFieldKeysT', bound=ClientHistoryScalarFieldKeys)

ClientHistoryRelationalFieldKeys = Literal[
        'Client',
        'Review',
        'Service',
    ]

# Department types

class DepartmentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Department create method"""
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    DepartmentUser: 'DepartmentUserCreateManyNestedWithoutRelationsInput'


class DepartmentCreateInput(DepartmentOptionalCreateInput):
    """Required arguments to the Department create method"""
    id: _str
    name: _str
    description: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DepartmentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Department create method, without relations"""
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class DepartmentCreateWithoutRelationsInput(DepartmentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Department create method, without relations"""
    id: _str
    name: _str
    description: _str
    updatedAt: datetime.datetime

class DepartmentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DepartmentCreateWithoutRelationsInput'
    where: 'DepartmentWhereUniqueInput'

class DepartmentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DepartmentCreateWithoutRelationsInput'
    connect: 'DepartmentWhereUniqueInput'
    connect_or_create: 'DepartmentConnectOrCreateWithoutRelationsInput'


class DepartmentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DepartmentCreateWithoutRelationsInput', List['DepartmentCreateWithoutRelationsInput']]
    connect: Union['DepartmentWhereUniqueInput', List['DepartmentWhereUniqueInput']]
    connect_or_create: Union['DepartmentConnectOrCreateWithoutRelationsInput', List['DepartmentConnectOrCreateWithoutRelationsInput']]

_DepartmentWhereUnique_id_Input = TypedDict(
    '_DepartmentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

DepartmentWhereUniqueInput = _DepartmentWhereUnique_id_Input


class DepartmentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    DepartmentUser: 'DepartmentUserUpdateManyWithoutRelationsInput'


class DepartmentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class DepartmentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DepartmentCreateWithoutRelationsInput']
    connect: List['DepartmentWhereUniqueInput']
    connect_or_create: List['DepartmentConnectOrCreateWithoutRelationsInput']
    set: List['DepartmentWhereUniqueInput']
    disconnect: List['DepartmentWhereUniqueInput']
    delete: List['DepartmentWhereUniqueInput']

    # TODO
    # update: List['DepartmentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DepartmentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DepartmentScalarWhereInput']
    # upsert: List['DepartmentUpserteWithWhereUniqueWithoutRelationsInput']


class DepartmentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DepartmentCreateWithoutRelationsInput'
    connect: 'DepartmentWhereUniqueInput'
    connect_or_create: 'DepartmentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DepartmentUpdateInput'
    # upsert: 'DepartmentUpsertWithoutRelationsInput'


class DepartmentUpsertInput(TypedDict):
    create: 'DepartmentCreateInput'
    update: 'DepartmentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Department_id_OrderByInput = TypedDict(
    '_Department_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Department_name_OrderByInput = TypedDict(
    '_Department_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Department_description_OrderByInput = TypedDict(
    '_Department_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Department_createdAt_OrderByInput = TypedDict(
    '_Department_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Department_updatedAt_OrderByInput = TypedDict(
    '_Department_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Department_deletedAt_OrderByInput = TypedDict(
    '_Department_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Department_RelevanceInner = TypedDict(
    '_Department_RelevanceInner',
    {
        'fields': 'List[DepartmentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Department_RelevanceOrderByInput = TypedDict(
    '_Department_RelevanceOrderByInput',
    {
        '_relevance': '_Department_RelevanceInner',
    },
    total=True
)

DepartmentOrderByInput = Union[
    '_Department_id_OrderByInput',
    '_Department_name_OrderByInput',
    '_Department_description_OrderByInput',
    '_Department_createdAt_OrderByInput',
    '_Department_updatedAt_OrderByInput',
    '_Department_deletedAt_OrderByInput',
    '_Department_RelevanceOrderByInput',
]



# recursive Department types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DepartmentRelationFilter = TypedDict(
    'DepartmentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DepartmentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DepartmentInclude(TypedDict, total=False):
    """Department relational arguments"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartment']


    

class CabinetIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive1']


class CabinetIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive2']


class CabinetIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive3']


class CabinetIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive4']


class CabinetIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class CabinetArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyCabinetArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive1']


class ClientIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive2']


class ClientIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive3']


class ClientIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive4']


class ClientIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ClientArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyClientArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive1']
    Review: Union[bool, 'ReviewArgsFromDepartmentRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive1']


class ClientHistoryIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive2']
    Review: Union[bool, 'ReviewArgsFromDepartmentRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive2']


class ClientHistoryIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive3']
    Review: Union[bool, 'ReviewArgsFromDepartmentRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive3']


class ClientHistoryIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive4']
    Review: Union[bool, 'ReviewArgsFromDepartmentRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive4']


class ClientHistoryIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ClientHistoryArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyClientHistoryArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive1']


class DepartmentIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive2']


class DepartmentIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive3']


class DepartmentIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive4']


class DepartmentIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class DepartmentArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyDepartmentArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentRecursive1']


class DepartmentUserIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentRecursive2']


class DepartmentUserIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentRecursive3']


class DepartmentUserIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentRecursive4']


class DepartmentUserIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class DepartmentUserArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyDepartmentUserArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive1']


class OfficeIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive2']


class OfficeIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive3']


class OfficeIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive4']


class OfficeIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class OfficeArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyOfficeArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""


class OpportunityIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""


class OpportunityIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""


class OpportunityIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""


class OpportunityIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class OpportunityArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyOpportunityArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""


class PositionIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""


class PositionIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""


class PositionIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""


class PositionIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class PositionArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyPositionArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'UserArgsFromDepartmentRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive1']


class ProductIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'UserArgsFromDepartmentRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive2']


class ProductIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'UserArgsFromDepartmentRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive3']


class ProductIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'UserArgsFromDepartmentRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentRecursive4']


class ProductIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ProductArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyProductArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive1']
    Product: Union[bool, 'ProductArgsFromDepartmentRecursive1']


class ProductSaleIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive2']
    Product: Union[bool, 'ProductArgsFromDepartmentRecursive2']


class ProductSaleIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive3']
    Product: Union[bool, 'ProductArgsFromDepartmentRecursive3']


class ProductSaleIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive4']
    Product: Union[bool, 'ProductArgsFromDepartmentRecursive4']


class ProductSaleIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ProductSaleArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyProductSaleArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive1']
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive1']


class ReviewIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive2']
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive2']


class ReviewIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive3']
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive3']


class ReviewIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive4']
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive4']


class ReviewIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ReviewArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyReviewArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentRecursive1']


class RoleIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentRecursive2']


class RoleIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentRecursive3']


class RoleIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentRecursive4']


class RoleIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class RoleArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyRoleArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentRecursive1']


class ScheduleIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentRecursive2']


class ScheduleIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentRecursive3']


class ScheduleIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentRecursive4']


class ScheduleIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ScheduleArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyScheduleArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentRecursive1']


class ServiceIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentRecursive2']


class ServiceIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentRecursive3']


class ServiceIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentRecursive4']


class ServiceIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ServiceArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyServiceArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentRecursive1']


class ServiceCategoryIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentRecursive2']


class ServiceCategoryIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentRecursive3']


class ServiceCategoryIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentRecursive4']


class ServiceCategoryIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ServiceCategoryArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyServiceCategoryArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive1']
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentRecursive1']


class ServiceRecordIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive2']
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentRecursive2']


class ServiceRecordIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive3']
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentRecursive3']


class ServiceRecordIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Client: Union[bool, 'ClientArgsFromDepartmentRecursive4']
    Office: Union[bool, 'OfficeArgsFromDepartmentRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentRecursive4']


class ServiceRecordIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class ServiceRecordArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyServiceRecordArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive1']
    Role: Union[bool, 'RoleArgsFromDepartmentRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive1']


class UserIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive2']
    Role: Union[bool, 'RoleArgsFromDepartmentRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive2']


class UserIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive3']
    Role: Union[bool, 'RoleArgsFromDepartmentRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive3']


class UserIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentRecursive4']
    Role: Union[bool, 'RoleArgsFromDepartmentRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentRecursive4']


class UserIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class UserArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyUserArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentRecursive1']


class UserOnCabinetIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentRecursive2']


class UserOnCabinetIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentRecursive3']


class UserOnCabinetIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentRecursive4']


class UserOnCabinetIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class UserOnCabinetArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyUserOnCabinetArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromDepartment(TypedDict, total=False):
    """Relational arguments for Department"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive1']


class WorkerOnServiceIncludeFromDepartmentRecursive1(TypedDict, total=False):
    """Relational arguments for Department"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive2']


class WorkerOnServiceIncludeFromDepartmentRecursive2(TypedDict, total=False):
    """Relational arguments for Department"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive3']


class WorkerOnServiceIncludeFromDepartmentRecursive3(TypedDict, total=False):
    """Relational arguments for Department"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentRecursive4']


class WorkerOnServiceIncludeFromDepartmentRecursive4(TypedDict, total=False):
    """Relational arguments for Department"""

    

class WorkerOnServiceArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    
    

class FindManyWorkerOnServiceArgsFromDepartment(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromDepartmentRecursive1(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromDepartmentRecursive2(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromDepartmentRecursive3(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromDepartmentRecursive4(TypedDict, total=False):
    """Arguments for Department"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyDepartmentArgs = FindManyDepartmentArgsFromDepartment
FindFirstDepartmentArgs = FindManyDepartmentArgsFromDepartment


    

class DepartmentWhereInput(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentWhereInputRecursive1', List['DepartmentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DepartmentWhereInputRecursive1']
    OR: List['DepartmentWhereInputRecursive1']
    NOT: List['DepartmentWhereInputRecursive1']


class DepartmentWhereInputRecursive1(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentWhereInputRecursive2', List['DepartmentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DepartmentWhereInputRecursive2']
    OR: List['DepartmentWhereInputRecursive2']
    NOT: List['DepartmentWhereInputRecursive2']


class DepartmentWhereInputRecursive2(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentWhereInputRecursive3', List['DepartmentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DepartmentWhereInputRecursive3']
    OR: List['DepartmentWhereInputRecursive3']
    NOT: List['DepartmentWhereInputRecursive3']


class DepartmentWhereInputRecursive3(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentWhereInputRecursive4', List['DepartmentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DepartmentWhereInputRecursive4']
    OR: List['DepartmentWhereInputRecursive4']
    NOT: List['DepartmentWhereInputRecursive4']


class DepartmentWhereInputRecursive4(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'



# aggregate Department types


    

class DepartmentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DepartmentScalarWhereWithAggregatesInputRecursive1']
    OR: List['DepartmentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DepartmentScalarWhereWithAggregatesInputRecursive1']


class DepartmentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DepartmentScalarWhereWithAggregatesInputRecursive2']
    OR: List['DepartmentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DepartmentScalarWhereWithAggregatesInputRecursive2']


class DepartmentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DepartmentScalarWhereWithAggregatesInputRecursive3']
    OR: List['DepartmentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DepartmentScalarWhereWithAggregatesInputRecursive3']


class DepartmentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DepartmentScalarWhereWithAggregatesInputRecursive4']
    OR: List['DepartmentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DepartmentScalarWhereWithAggregatesInputRecursive4']


class DepartmentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Department arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DepartmentGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    _sum: 'DepartmentSumAggregateOutput'
    _avg: 'DepartmentAvgAggregateOutput'
    _min: 'DepartmentMinAggregateOutput'
    _max: 'DepartmentMaxAggregateOutput'
    _count: 'DepartmentCountAggregateOutput'


class DepartmentAvgAggregateOutput(TypedDict, total=False):
    """Department output for aggregating averages"""


class DepartmentSumAggregateOutput(TypedDict, total=False):
    """Department output for aggregating sums"""


class DepartmentScalarAggregateOutput(TypedDict, total=False):
    """Department output including scalar fields"""
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime


DepartmentMinAggregateOutput = DepartmentScalarAggregateOutput
DepartmentMaxAggregateOutput = DepartmentScalarAggregateOutput


class DepartmentMaxAggregateInput(TypedDict, total=False):
    """Department input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool


class DepartmentMinAggregateInput(TypedDict, total=False):
    """Department input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool


class DepartmentNumberAggregateInput(TypedDict, total=False):
    """Department input for aggregating numbers"""


DepartmentAvgAggregateInput = DepartmentNumberAggregateInput
DepartmentSumAggregateInput = DepartmentNumberAggregateInput


DepartmentCountAggregateInput = TypedDict(
    'DepartmentCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'deletedAt': bool,
        '_all': bool,
    },
    total=False,
)

DepartmentCountAggregateOutput = TypedDict(
    'DepartmentCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'createdAt': int,
        'updatedAt': int,
        'deletedAt': int,
        '_all': int,
    },
    total=False,
)


DepartmentKeys = Literal[
    'id',
    'name',
    'description',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'DepartmentUser',
]
DepartmentScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'createdAt',
    'updatedAt',
    'deletedAt',
]
DepartmentScalarFieldKeysT = TypeVar('DepartmentScalarFieldKeysT', bound=DepartmentScalarFieldKeys)

DepartmentRelationalFieldKeys = Literal[
        'DepartmentUser',
    ]

# DepartmentUser types

class DepartmentUserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the DepartmentUser create method"""
    userId: _str
    departmentId: _str
    Department: 'DepartmentCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class DepartmentUserCreateInput(DepartmentUserOptionalCreateInput):
    """Required arguments to the DepartmentUser create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DepartmentUserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the DepartmentUser create method, without relations"""
    userId: _str
    departmentId: _str


class DepartmentUserCreateWithoutRelationsInput(DepartmentUserOptionalCreateWithoutRelationsInput):
    """Required arguments to the DepartmentUser create method, without relations"""

class DepartmentUserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DepartmentUserCreateWithoutRelationsInput'
    where: 'DepartmentUserWhereUniqueInput'

class DepartmentUserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DepartmentUserCreateWithoutRelationsInput'
    connect: 'DepartmentUserWhereUniqueInput'
    connect_or_create: 'DepartmentUserConnectOrCreateWithoutRelationsInput'


class DepartmentUserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DepartmentUserCreateWithoutRelationsInput', List['DepartmentUserCreateWithoutRelationsInput']]
    connect: Union['DepartmentUserWhereUniqueInput', List['DepartmentUserWhereUniqueInput']]
    connect_or_create: Union['DepartmentUserConnectOrCreateWithoutRelationsInput', List['DepartmentUserConnectOrCreateWithoutRelationsInput']]

_DepartmentUserCompoundPrimaryKeyInner = TypedDict(
    '_DepartmentUserCompoundPrimaryKeyInner',
    {
        'userId': '_str',
        'departmentId': '_str',
    },
    total=True
)

_DepartmentUserCompoundPrimaryKey = TypedDict(
    '_DepartmentUserCompoundPrimaryKey',
    {
        'userId_departmentId': '_DepartmentUserCompoundPrimaryKeyInner',
    },
    total=True
)

DepartmentUserWhereUniqueInput = _DepartmentUserCompoundPrimaryKey


class DepartmentUserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    Department: 'DepartmentUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class DepartmentUserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class DepartmentUserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DepartmentUserCreateWithoutRelationsInput']
    connect: List['DepartmentUserWhereUniqueInput']
    connect_or_create: List['DepartmentUserConnectOrCreateWithoutRelationsInput']
    set: List['DepartmentUserWhereUniqueInput']
    disconnect: List['DepartmentUserWhereUniqueInput']
    delete: List['DepartmentUserWhereUniqueInput']

    # TODO
    # update: List['DepartmentUserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DepartmentUserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DepartmentUserScalarWhereInput']
    # upsert: List['DepartmentUserUpserteWithWhereUniqueWithoutRelationsInput']


class DepartmentUserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DepartmentUserCreateWithoutRelationsInput'
    connect: 'DepartmentUserWhereUniqueInput'
    connect_or_create: 'DepartmentUserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DepartmentUserUpdateInput'
    # upsert: 'DepartmentUserUpsertWithoutRelationsInput'


class DepartmentUserUpsertInput(TypedDict):
    create: 'DepartmentUserCreateInput'
    update: 'DepartmentUserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_DepartmentUser_userId_OrderByInput = TypedDict(
    '_DepartmentUser_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_DepartmentUser_departmentId_OrderByInput = TypedDict(
    '_DepartmentUser_departmentId_OrderByInput',
    {
        'departmentId': 'SortOrder',
    },
    total=True
)

_DepartmentUser_RelevanceInner = TypedDict(
    '_DepartmentUser_RelevanceInner',
    {
        'fields': 'List[DepartmentUserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_DepartmentUser_RelevanceOrderByInput = TypedDict(
    '_DepartmentUser_RelevanceOrderByInput',
    {
        '_relevance': '_DepartmentUser_RelevanceInner',
    },
    total=True
)

DepartmentUserOrderByInput = Union[
    '_DepartmentUser_userId_OrderByInput',
    '_DepartmentUser_departmentId_OrderByInput',
    '_DepartmentUser_RelevanceOrderByInput',
]



# recursive DepartmentUser types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DepartmentUserRelationFilter = TypedDict(
    'DepartmentUserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DepartmentUserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DepartmentUserInclude(TypedDict, total=False):
    """DepartmentUser relational arguments"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentUser']
    User: Union[bool, 'UserArgsFromDepartmentUser']


    

class CabinetIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive1']


class CabinetIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive2']


class CabinetIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive3']


class CabinetIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive4']


class CabinetIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class CabinetArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyCabinetArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive1']


class ClientIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive2']


class ClientIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive3']


class ClientIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive4']


class ClientIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ClientArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyClientArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive1']
    Review: Union[bool, 'ReviewArgsFromDepartmentUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive1']


class ClientHistoryIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive2']
    Review: Union[bool, 'ReviewArgsFromDepartmentUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive2']


class ClientHistoryIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive3']
    Review: Union[bool, 'ReviewArgsFromDepartmentUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive3']


class ClientHistoryIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive4']
    Review: Union[bool, 'ReviewArgsFromDepartmentUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive4']


class ClientHistoryIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ClientHistoryArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyClientHistoryArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive1']


class DepartmentIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive2']


class DepartmentIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive3']


class DepartmentIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive4']


class DepartmentIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class DepartmentArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyDepartmentArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentUserRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive1']


class DepartmentUserIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentUserRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive2']


class DepartmentUserIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentUserRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive3']


class DepartmentUserIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Department: Union[bool, 'DepartmentArgsFromDepartmentUserRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive4']


class DepartmentUserIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class DepartmentUserArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyDepartmentUserArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive1']


class OfficeIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive2']


class OfficeIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive3']


class OfficeIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromDepartmentUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive4']


class OfficeIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class OfficeArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyOfficeArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class OpportunityIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class OpportunityIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class OpportunityIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class OpportunityIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class OpportunityArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyOpportunityArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class PositionIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class PositionIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class PositionIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""


class PositionIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class PositionArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyPositionArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive1']


class ProductIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive2']


class ProductIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive3']


class ProductIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromDepartmentUserRecursive4']


class ProductIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ProductArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyProductArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive1']
    Product: Union[bool, 'ProductArgsFromDepartmentUserRecursive1']


class ProductSaleIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive2']
    Product: Union[bool, 'ProductArgsFromDepartmentUserRecursive2']


class ProductSaleIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive3']
    Product: Union[bool, 'ProductArgsFromDepartmentUserRecursive3']


class ProductSaleIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive4']
    Product: Union[bool, 'ProductArgsFromDepartmentUserRecursive4']


class ProductSaleIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ProductSaleArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyProductSaleArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive1']
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive1']


class ReviewIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive2']
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive2']


class ReviewIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive3']
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive3']


class ReviewIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive4']
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive4']


class ReviewIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ReviewArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyReviewArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentUserRecursive1']


class RoleIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentUserRecursive2']


class RoleIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentUserRecursive3']


class RoleIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User: Union[bool, 'FindManyUserArgsFromDepartmentUserRecursive4']


class RoleIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class RoleArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyRoleArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive1']


class ScheduleIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive2']


class ScheduleIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive3']


class ScheduleIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive4']


class ScheduleIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ScheduleArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyScheduleArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentUserRecursive1']


class ServiceIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentUserRecursive2']


class ServiceIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentUserRecursive3']


class ServiceIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromDepartmentUserRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromDepartmentUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromDepartmentUserRecursive4']


class ServiceIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ServiceArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyServiceArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentUserRecursive1']


class ServiceCategoryIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentUserRecursive2']


class ServiceCategoryIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentUserRecursive3']


class ServiceCategoryIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Service: Union[bool, 'FindManyServiceArgsFromDepartmentUserRecursive4']


class ServiceCategoryIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ServiceCategoryArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyServiceCategoryArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive1']
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive1']


class ServiceRecordIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive2']
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive2']


class ServiceRecordIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive3']
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive3']


class ServiceRecordIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Client: Union[bool, 'ClientArgsFromDepartmentUserRecursive4']
    Office: Union[bool, 'OfficeArgsFromDepartmentUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive4']


class ServiceRecordIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class ServiceRecordArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyServiceRecordArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentUserRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive1']
    Role: Union[bool, 'RoleArgsFromDepartmentUserRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive1']


class UserIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentUserRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive2']
    Role: Union[bool, 'RoleArgsFromDepartmentUserRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive2']


class UserIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentUserRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive3']
    Role: Union[bool, 'RoleArgsFromDepartmentUserRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive3']


class UserIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromDepartmentUserRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromDepartmentUserRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromDepartmentUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromDepartmentUserRecursive4']
    Role: Union[bool, 'RoleArgsFromDepartmentUserRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromDepartmentUserRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromDepartmentUserRecursive4']


class UserIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class UserArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyUserArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive1']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive1']


class UserOnCabinetIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive2']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive2']


class UserOnCabinetIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive3']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive3']


class UserOnCabinetIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    Cabinet: Union[bool, 'CabinetArgsFromDepartmentUserRecursive4']
    User: Union[bool, 'UserArgsFromDepartmentUserRecursive4']


class UserOnCabinetIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class UserOnCabinetArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyUserOnCabinetArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromDepartmentUser(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive1']


class WorkerOnServiceIncludeFromDepartmentUserRecursive1(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive2']


class WorkerOnServiceIncludeFromDepartmentUserRecursive2(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive3']


class WorkerOnServiceIncludeFromDepartmentUserRecursive3(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromDepartmentUserRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromDepartmentUserRecursive4']


class WorkerOnServiceIncludeFromDepartmentUserRecursive4(TypedDict, total=False):
    """Relational arguments for DepartmentUser"""

    

class WorkerOnServiceArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    
    

class FindManyWorkerOnServiceArgsFromDepartmentUser(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromDepartmentUserRecursive1(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromDepartmentUserRecursive2(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromDepartmentUserRecursive3(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromDepartmentUserRecursive4(TypedDict, total=False):
    """Arguments for DepartmentUser"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyDepartmentUserArgs = FindManyDepartmentUserArgsFromDepartmentUser
FindFirstDepartmentUserArgs = FindManyDepartmentUserArgsFromDepartmentUser


    

class DepartmentUserWhereInput(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    departmentId: Union[_str, 'types.StringFilter']
    Department: 'DepartmentRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentUserWhereInputRecursive1', List['DepartmentUserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DepartmentUserWhereInputRecursive1']
    OR: List['DepartmentUserWhereInputRecursive1']
    NOT: List['DepartmentUserWhereInputRecursive1']


class DepartmentUserWhereInputRecursive1(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    departmentId: Union[_str, 'types.StringFilter']
    Department: 'DepartmentRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentUserWhereInputRecursive2', List['DepartmentUserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DepartmentUserWhereInputRecursive2']
    OR: List['DepartmentUserWhereInputRecursive2']
    NOT: List['DepartmentUserWhereInputRecursive2']


class DepartmentUserWhereInputRecursive2(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    departmentId: Union[_str, 'types.StringFilter']
    Department: 'DepartmentRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentUserWhereInputRecursive3', List['DepartmentUserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DepartmentUserWhereInputRecursive3']
    OR: List['DepartmentUserWhereInputRecursive3']
    NOT: List['DepartmentUserWhereInputRecursive3']


class DepartmentUserWhereInputRecursive3(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    departmentId: Union[_str, 'types.StringFilter']
    Department: 'DepartmentRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['DepartmentUserWhereInputRecursive4', List['DepartmentUserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DepartmentUserWhereInputRecursive4']
    OR: List['DepartmentUserWhereInputRecursive4']
    NOT: List['DepartmentUserWhereInputRecursive4']


class DepartmentUserWhereInputRecursive4(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    departmentId: Union[_str, 'types.StringFilter']
    Department: 'DepartmentRelationFilter'
    User: 'UserRelationFilter'



# aggregate DepartmentUser types


    

class DepartmentUserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    departmentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DepartmentUserScalarWhereWithAggregatesInputRecursive1']
    OR: List['DepartmentUserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DepartmentUserScalarWhereWithAggregatesInputRecursive1']


class DepartmentUserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    departmentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DepartmentUserScalarWhereWithAggregatesInputRecursive2']
    OR: List['DepartmentUserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DepartmentUserScalarWhereWithAggregatesInputRecursive2']


class DepartmentUserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    departmentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DepartmentUserScalarWhereWithAggregatesInputRecursive3']
    OR: List['DepartmentUserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DepartmentUserScalarWhereWithAggregatesInputRecursive3']


class DepartmentUserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    departmentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DepartmentUserScalarWhereWithAggregatesInputRecursive4']
    OR: List['DepartmentUserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DepartmentUserScalarWhereWithAggregatesInputRecursive4']


class DepartmentUserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """DepartmentUser arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    departmentId: Union[_str, 'types.StringWithAggregatesFilter']



class DepartmentUserGroupByOutput(TypedDict, total=False):
    userId: _str
    departmentId: _str
    _sum: 'DepartmentUserSumAggregateOutput'
    _avg: 'DepartmentUserAvgAggregateOutput'
    _min: 'DepartmentUserMinAggregateOutput'
    _max: 'DepartmentUserMaxAggregateOutput'
    _count: 'DepartmentUserCountAggregateOutput'


class DepartmentUserAvgAggregateOutput(TypedDict, total=False):
    """DepartmentUser output for aggregating averages"""


class DepartmentUserSumAggregateOutput(TypedDict, total=False):
    """DepartmentUser output for aggregating sums"""


class DepartmentUserScalarAggregateOutput(TypedDict, total=False):
    """DepartmentUser output including scalar fields"""
    userId: _str
    departmentId: _str


DepartmentUserMinAggregateOutput = DepartmentUserScalarAggregateOutput
DepartmentUserMaxAggregateOutput = DepartmentUserScalarAggregateOutput


class DepartmentUserMaxAggregateInput(TypedDict, total=False):
    """DepartmentUser input for aggregating by max"""
    userId: bool
    departmentId: bool


class DepartmentUserMinAggregateInput(TypedDict, total=False):
    """DepartmentUser input for aggregating by min"""
    userId: bool
    departmentId: bool


class DepartmentUserNumberAggregateInput(TypedDict, total=False):
    """DepartmentUser input for aggregating numbers"""


DepartmentUserAvgAggregateInput = DepartmentUserNumberAggregateInput
DepartmentUserSumAggregateInput = DepartmentUserNumberAggregateInput


DepartmentUserCountAggregateInput = TypedDict(
    'DepartmentUserCountAggregateInput',
    {
        'userId': bool,
        'departmentId': bool,
        '_all': bool,
    },
    total=False,
)

DepartmentUserCountAggregateOutput = TypedDict(
    'DepartmentUserCountAggregateOutput',
    {
        'userId': int,
        'departmentId': int,
        '_all': int,
    },
    total=False,
)


DepartmentUserKeys = Literal[
    'userId',
    'departmentId',
    'Department',
    'User',
]
DepartmentUserScalarFieldKeys = Literal[
    'userId',
    'departmentId',
]
DepartmentUserScalarFieldKeysT = TypeVar('DepartmentUserScalarFieldKeysT', bound=DepartmentUserScalarFieldKeys)

DepartmentUserRelationalFieldKeys = Literal[
        'Department',
        'User',
    ]

# Office types

class OfficeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Office create method"""
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    Cabinet: 'CabinetCreateManyNestedWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordCreateManyNestedWithoutRelationsInput'


class OfficeCreateInput(OfficeOptionalCreateInput):
    """Required arguments to the Office create method"""
    id: _str
    number: _str
    address: _str
    updatedAt: datetime.datetime
    creatorId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OfficeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Office create method, without relations"""
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class OfficeCreateWithoutRelationsInput(OfficeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Office create method, without relations"""
    id: _str
    number: _str
    address: _str
    updatedAt: datetime.datetime
    creatorId: _str

class OfficeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'OfficeCreateWithoutRelationsInput'
    where: 'OfficeWhereUniqueInput'

class OfficeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'OfficeCreateWithoutRelationsInput'
    connect: 'OfficeWhereUniqueInput'
    connect_or_create: 'OfficeConnectOrCreateWithoutRelationsInput'


class OfficeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['OfficeCreateWithoutRelationsInput', List['OfficeCreateWithoutRelationsInput']]
    connect: Union['OfficeWhereUniqueInput', List['OfficeWhereUniqueInput']]
    connect_or_create: Union['OfficeConnectOrCreateWithoutRelationsInput', List['OfficeConnectOrCreateWithoutRelationsInput']]

_OfficeWhereUnique_id_Input = TypedDict(
    '_OfficeWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

OfficeWhereUniqueInput = _OfficeWhereUnique_id_Input


class OfficeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    number: _str
    address: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    creatorId: _str
    Cabinet: 'CabinetUpdateManyWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordUpdateManyWithoutRelationsInput'


class OfficeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    number: _str
    address: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    creatorId: _str


class OfficeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OfficeCreateWithoutRelationsInput']
    connect: List['OfficeWhereUniqueInput']
    connect_or_create: List['OfficeConnectOrCreateWithoutRelationsInput']
    set: List['OfficeWhereUniqueInput']
    disconnect: List['OfficeWhereUniqueInput']
    delete: List['OfficeWhereUniqueInput']

    # TODO
    # update: List['OfficeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OfficeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OfficeScalarWhereInput']
    # upsert: List['OfficeUpserteWithWhereUniqueWithoutRelationsInput']


class OfficeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OfficeCreateWithoutRelationsInput'
    connect: 'OfficeWhereUniqueInput'
    connect_or_create: 'OfficeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OfficeUpdateInput'
    # upsert: 'OfficeUpsertWithoutRelationsInput'


class OfficeUpsertInput(TypedDict):
    create: 'OfficeCreateInput'
    update: 'OfficeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Office_id_OrderByInput = TypedDict(
    '_Office_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Office_number_OrderByInput = TypedDict(
    '_Office_number_OrderByInput',
    {
        'number': 'SortOrder',
    },
    total=True
)

_Office_address_OrderByInput = TypedDict(
    '_Office_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Office_createdAt_OrderByInput = TypedDict(
    '_Office_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Office_updatedAt_OrderByInput = TypedDict(
    '_Office_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Office_deletedAt_OrderByInput = TypedDict(
    '_Office_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Office_creatorId_OrderByInput = TypedDict(
    '_Office_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_Office_RelevanceInner = TypedDict(
    '_Office_RelevanceInner',
    {
        'fields': 'List[OfficeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Office_RelevanceOrderByInput = TypedDict(
    '_Office_RelevanceOrderByInput',
    {
        '_relevance': '_Office_RelevanceInner',
    },
    total=True
)

OfficeOrderByInput = Union[
    '_Office_id_OrderByInput',
    '_Office_number_OrderByInput',
    '_Office_address_OrderByInput',
    '_Office_createdAt_OrderByInput',
    '_Office_updatedAt_OrderByInput',
    '_Office_deletedAt_OrderByInput',
    '_Office_creatorId_OrderByInput',
    '_Office_RelevanceOrderByInput',
]



# recursive Office types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

OfficeRelationFilter = TypedDict(
    'OfficeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class OfficeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class OfficeInclude(TypedDict, total=False):
    """Office relational arguments"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOffice']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOffice']


    

class CabinetIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive1']


class CabinetIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive2']


class CabinetIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive3']


class CabinetIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive4']


class CabinetIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class CabinetArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyCabinetArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive1']


class ClientIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive2']


class ClientIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive3']


class ClientIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive4']


class ClientIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ClientArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyClientArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive1']
    Review: Union[bool, 'ReviewArgsFromOfficeRecursive1']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive1']


class ClientHistoryIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive2']
    Review: Union[bool, 'ReviewArgsFromOfficeRecursive2']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive2']


class ClientHistoryIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive3']
    Review: Union[bool, 'ReviewArgsFromOfficeRecursive3']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive3']


class ClientHistoryIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive4']
    Review: Union[bool, 'ReviewArgsFromOfficeRecursive4']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive4']


class ClientHistoryIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ClientHistoryArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyClientHistoryArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive1']


class DepartmentIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive2']


class DepartmentIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive3']


class DepartmentIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive4']


class DepartmentIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class DepartmentArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyDepartmentArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Department: Union[bool, 'DepartmentArgsFromOfficeRecursive1']
    User: Union[bool, 'UserArgsFromOfficeRecursive1']


class DepartmentUserIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Department: Union[bool, 'DepartmentArgsFromOfficeRecursive2']
    User: Union[bool, 'UserArgsFromOfficeRecursive2']


class DepartmentUserIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Department: Union[bool, 'DepartmentArgsFromOfficeRecursive3']
    User: Union[bool, 'UserArgsFromOfficeRecursive3']


class DepartmentUserIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Department: Union[bool, 'DepartmentArgsFromOfficeRecursive4']
    User: Union[bool, 'UserArgsFromOfficeRecursive4']


class DepartmentUserIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class DepartmentUserArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyDepartmentUserArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOfficeRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive1']


class OfficeIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOfficeRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive2']


class OfficeIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOfficeRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive3']


class OfficeIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOfficeRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive4']


class OfficeIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class OfficeArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyOfficeArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""


class OpportunityIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""


class OpportunityIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""


class OpportunityIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""


class OpportunityIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class OpportunityArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyOpportunityArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""


class PositionIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""


class PositionIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""


class PositionIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""


class PositionIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class PositionArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyPositionArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'UserArgsFromOfficeRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive1']


class ProductIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'UserArgsFromOfficeRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive2']


class ProductIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'UserArgsFromOfficeRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive3']


class ProductIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'UserArgsFromOfficeRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOfficeRecursive4']


class ProductIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ProductArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyProductArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive1']
    Product: Union[bool, 'ProductArgsFromOfficeRecursive1']


class ProductSaleIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive2']
    Product: Union[bool, 'ProductArgsFromOfficeRecursive2']


class ProductSaleIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive3']
    Product: Union[bool, 'ProductArgsFromOfficeRecursive3']


class ProductSaleIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive4']
    Product: Union[bool, 'ProductArgsFromOfficeRecursive4']


class ProductSaleIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ProductSaleArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyProductSaleArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive1']
    Client: Union[bool, 'ClientArgsFromOfficeRecursive1']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive1']


class ReviewIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive2']
    Client: Union[bool, 'ClientArgsFromOfficeRecursive2']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive2']


class ReviewIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive3']
    Client: Union[bool, 'ClientArgsFromOfficeRecursive3']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive3']


class ReviewIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive4']
    Client: Union[bool, 'ClientArgsFromOfficeRecursive4']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive4']


class ReviewIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ReviewArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyReviewArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'FindManyUserArgsFromOfficeRecursive1']


class RoleIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'FindManyUserArgsFromOfficeRecursive2']


class RoleIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'FindManyUserArgsFromOfficeRecursive3']


class RoleIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    User: Union[bool, 'FindManyUserArgsFromOfficeRecursive4']


class RoleIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class RoleArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyRoleArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive1']
    User: Union[bool, 'UserArgsFromOfficeRecursive1']


class ScheduleIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive2']
    User: Union[bool, 'UserArgsFromOfficeRecursive2']


class ScheduleIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive3']
    User: Union[bool, 'UserArgsFromOfficeRecursive3']


class ScheduleIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive4']
    User: Union[bool, 'UserArgsFromOfficeRecursive4']


class ScheduleIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ScheduleArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyScheduleArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOfficeRecursive1']


class ServiceIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOfficeRecursive2']


class ServiceIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOfficeRecursive3']


class ServiceIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOfficeRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromOfficeRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOfficeRecursive4']


class ServiceIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ServiceArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyServiceArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Service: Union[bool, 'FindManyServiceArgsFromOfficeRecursive1']


class ServiceCategoryIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Service: Union[bool, 'FindManyServiceArgsFromOfficeRecursive2']


class ServiceCategoryIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Service: Union[bool, 'FindManyServiceArgsFromOfficeRecursive3']


class ServiceCategoryIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Service: Union[bool, 'FindManyServiceArgsFromOfficeRecursive4']


class ServiceCategoryIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ServiceCategoryArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyServiceCategoryArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive1']
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive1']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive1']
    User: Union[bool, 'UserArgsFromOfficeRecursive1']


class ServiceRecordIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive2']
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive2']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive2']
    User: Union[bool, 'UserArgsFromOfficeRecursive2']


class ServiceRecordIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive3']
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive3']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive3']
    User: Union[bool, 'UserArgsFromOfficeRecursive3']


class ServiceRecordIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Client: Union[bool, 'ClientArgsFromOfficeRecursive4']
    Office: Union[bool, 'OfficeArgsFromOfficeRecursive4']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive4']
    User: Union[bool, 'UserArgsFromOfficeRecursive4']


class ServiceRecordIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class ServiceRecordArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyServiceRecordArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromOfficeRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive1']
    Role: Union[bool, 'RoleArgsFromOfficeRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive1']


class UserIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromOfficeRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive2']
    Role: Union[bool, 'RoleArgsFromOfficeRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive2']


class UserIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromOfficeRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive3']
    Role: Union[bool, 'RoleArgsFromOfficeRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive3']


class UserIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOfficeRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromOfficeRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOfficeRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOfficeRecursive4']
    Role: Union[bool, 'RoleArgsFromOfficeRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOfficeRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOfficeRecursive4']


class UserIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class UserArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyUserArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive1']
    User: Union[bool, 'UserArgsFromOfficeRecursive1']


class UserOnCabinetIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive2']
    User: Union[bool, 'UserArgsFromOfficeRecursive2']


class UserOnCabinetIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive3']
    User: Union[bool, 'UserArgsFromOfficeRecursive3']


class UserOnCabinetIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    Cabinet: Union[bool, 'CabinetArgsFromOfficeRecursive4']
    User: Union[bool, 'UserArgsFromOfficeRecursive4']


class UserOnCabinetIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class UserOnCabinetArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyUserOnCabinetArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromOffice(TypedDict, total=False):
    """Relational arguments for Office"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOfficeRecursive1']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOfficeRecursive1']


class WorkerOnServiceIncludeFromOfficeRecursive1(TypedDict, total=False):
    """Relational arguments for Office"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOfficeRecursive2']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOfficeRecursive2']


class WorkerOnServiceIncludeFromOfficeRecursive2(TypedDict, total=False):
    """Relational arguments for Office"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOfficeRecursive3']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOfficeRecursive3']


class WorkerOnServiceIncludeFromOfficeRecursive3(TypedDict, total=False):
    """Relational arguments for Office"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOfficeRecursive4']
    Service: Union[bool, 'ServiceArgsFromOfficeRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOfficeRecursive4']


class WorkerOnServiceIncludeFromOfficeRecursive4(TypedDict, total=False):
    """Relational arguments for Office"""

    

class WorkerOnServiceArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    
    

class FindManyWorkerOnServiceArgsFromOffice(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromOfficeRecursive1(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromOfficeRecursive2(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromOfficeRecursive3(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromOfficeRecursive4(TypedDict, total=False):
    """Arguments for Office"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyOfficeArgs = FindManyOfficeArgsFromOffice
FindFirstOfficeArgs = FindManyOfficeArgsFromOffice


    

class OfficeWhereInput(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['OfficeWhereInputRecursive1', List['OfficeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['OfficeWhereInputRecursive1']
    OR: List['OfficeWhereInputRecursive1']
    NOT: List['OfficeWhereInputRecursive1']


class OfficeWhereInputRecursive1(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['OfficeWhereInputRecursive2', List['OfficeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['OfficeWhereInputRecursive2']
    OR: List['OfficeWhereInputRecursive2']
    NOT: List['OfficeWhereInputRecursive2']


class OfficeWhereInputRecursive2(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['OfficeWhereInputRecursive3', List['OfficeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['OfficeWhereInputRecursive3']
    OR: List['OfficeWhereInputRecursive3']
    NOT: List['OfficeWhereInputRecursive3']


class OfficeWhereInputRecursive3(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['OfficeWhereInputRecursive4', List['OfficeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['OfficeWhereInputRecursive4']
    OR: List['OfficeWhereInputRecursive4']
    NOT: List['OfficeWhereInputRecursive4']


class OfficeWhereInputRecursive4(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    number: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'



# aggregate Office types


    

class OfficeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OfficeScalarWhereWithAggregatesInputRecursive1']
    OR: List['OfficeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['OfficeScalarWhereWithAggregatesInputRecursive1']


class OfficeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OfficeScalarWhereWithAggregatesInputRecursive2']
    OR: List['OfficeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['OfficeScalarWhereWithAggregatesInputRecursive2']


class OfficeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OfficeScalarWhereWithAggregatesInputRecursive3']
    OR: List['OfficeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['OfficeScalarWhereWithAggregatesInputRecursive3']


class OfficeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OfficeScalarWhereWithAggregatesInputRecursive4']
    OR: List['OfficeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['OfficeScalarWhereWithAggregatesInputRecursive4']


class OfficeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Office arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    number: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']



class OfficeGroupByOutput(TypedDict, total=False):
    id: _str
    number: _str
    address: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    creatorId: _str
    _sum: 'OfficeSumAggregateOutput'
    _avg: 'OfficeAvgAggregateOutput'
    _min: 'OfficeMinAggregateOutput'
    _max: 'OfficeMaxAggregateOutput'
    _count: 'OfficeCountAggregateOutput'


class OfficeAvgAggregateOutput(TypedDict, total=False):
    """Office output for aggregating averages"""


class OfficeSumAggregateOutput(TypedDict, total=False):
    """Office output for aggregating sums"""


class OfficeScalarAggregateOutput(TypedDict, total=False):
    """Office output including scalar fields"""
    id: _str
    number: _str
    address: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    creatorId: _str


OfficeMinAggregateOutput = OfficeScalarAggregateOutput
OfficeMaxAggregateOutput = OfficeScalarAggregateOutput


class OfficeMaxAggregateInput(TypedDict, total=False):
    """Office input for aggregating by max"""
    id: bool
    number: bool
    address: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool
    creatorId: bool


class OfficeMinAggregateInput(TypedDict, total=False):
    """Office input for aggregating by min"""
    id: bool
    number: bool
    address: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool
    creatorId: bool


class OfficeNumberAggregateInput(TypedDict, total=False):
    """Office input for aggregating numbers"""


OfficeAvgAggregateInput = OfficeNumberAggregateInput
OfficeSumAggregateInput = OfficeNumberAggregateInput


OfficeCountAggregateInput = TypedDict(
    'OfficeCountAggregateInput',
    {
        'id': bool,
        'number': bool,
        'address': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'deletedAt': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

OfficeCountAggregateOutput = TypedDict(
    'OfficeCountAggregateOutput',
    {
        'id': int,
        'number': int,
        'address': int,
        'createdAt': int,
        'updatedAt': int,
        'deletedAt': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


OfficeKeys = Literal[
    'id',
    'number',
    'address',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'creatorId',
    'Cabinet',
    'ServiceRecord',
]
OfficeScalarFieldKeys = Literal[
    'id',
    'number',
    'address',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'creatorId',
]
OfficeScalarFieldKeysT = TypeVar('OfficeScalarFieldKeysT', bound=OfficeScalarFieldKeys)

OfficeRelationalFieldKeys = Literal[
        'Cabinet',
        'ServiceRecord',
    ]

# Opportunity types

class OpportunityOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Opportunity create method"""


class OpportunityCreateInput(OpportunityOptionalCreateInput):
    """Required arguments to the Opportunity create method"""
    id: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OpportunityOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Opportunity create method, without relations"""


class OpportunityCreateWithoutRelationsInput(OpportunityOptionalCreateWithoutRelationsInput):
    """Required arguments to the Opportunity create method, without relations"""
    id: _str
    name: _str

class OpportunityConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'OpportunityCreateWithoutRelationsInput'
    where: 'OpportunityWhereUniqueInput'

class OpportunityCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'OpportunityCreateWithoutRelationsInput'
    connect: 'OpportunityWhereUniqueInput'
    connect_or_create: 'OpportunityConnectOrCreateWithoutRelationsInput'


class OpportunityCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['OpportunityCreateWithoutRelationsInput', List['OpportunityCreateWithoutRelationsInput']]
    connect: Union['OpportunityWhereUniqueInput', List['OpportunityWhereUniqueInput']]
    connect_or_create: Union['OpportunityConnectOrCreateWithoutRelationsInput', List['OpportunityConnectOrCreateWithoutRelationsInput']]

_OpportunityWhereUnique_id_Input = TypedDict(
    '_OpportunityWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

OpportunityWhereUniqueInput = _OpportunityWhereUnique_id_Input


class OpportunityUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str


class OpportunityUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str


class OpportunityUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OpportunityCreateWithoutRelationsInput']
    connect: List['OpportunityWhereUniqueInput']
    connect_or_create: List['OpportunityConnectOrCreateWithoutRelationsInput']
    set: List['OpportunityWhereUniqueInput']
    disconnect: List['OpportunityWhereUniqueInput']
    delete: List['OpportunityWhereUniqueInput']

    # TODO
    # update: List['OpportunityUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OpportunityUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OpportunityScalarWhereInput']
    # upsert: List['OpportunityUpserteWithWhereUniqueWithoutRelationsInput']


class OpportunityUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OpportunityCreateWithoutRelationsInput'
    connect: 'OpportunityWhereUniqueInput'
    connect_or_create: 'OpportunityConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OpportunityUpdateInput'
    # upsert: 'OpportunityUpsertWithoutRelationsInput'


class OpportunityUpsertInput(TypedDict):
    create: 'OpportunityCreateInput'
    update: 'OpportunityUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Opportunity_id_OrderByInput = TypedDict(
    '_Opportunity_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Opportunity_name_OrderByInput = TypedDict(
    '_Opportunity_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Opportunity_RelevanceInner = TypedDict(
    '_Opportunity_RelevanceInner',
    {
        'fields': 'List[OpportunityScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Opportunity_RelevanceOrderByInput = TypedDict(
    '_Opportunity_RelevanceOrderByInput',
    {
        '_relevance': '_Opportunity_RelevanceInner',
    },
    total=True
)

OpportunityOrderByInput = Union[
    '_Opportunity_id_OrderByInput',
    '_Opportunity_name_OrderByInput',
    '_Opportunity_RelevanceOrderByInput',
]



# recursive Opportunity types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

OpportunityRelationFilter = TypedDict(
    'OpportunityRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class OpportunityListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class OpportunityInclude(TypedDict, total=False):
    """Opportunity relational arguments"""


    

class CabinetIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive1']


class CabinetIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive2']


class CabinetIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive3']


class CabinetIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive4']


class CabinetIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class CabinetArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyCabinetArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive1']


class ClientIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive2']


class ClientIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive3']


class ClientIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive4']


class ClientIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ClientArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyClientArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive1']
    Review: Union[bool, 'ReviewArgsFromOpportunityRecursive1']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive1']


class ClientHistoryIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive2']
    Review: Union[bool, 'ReviewArgsFromOpportunityRecursive2']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive2']


class ClientHistoryIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive3']
    Review: Union[bool, 'ReviewArgsFromOpportunityRecursive3']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive3']


class ClientHistoryIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive4']
    Review: Union[bool, 'ReviewArgsFromOpportunityRecursive4']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive4']


class ClientHistoryIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ClientHistoryArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyClientHistoryArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive1']


class DepartmentIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive2']


class DepartmentIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive3']


class DepartmentIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive4']


class DepartmentIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class DepartmentArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyDepartmentArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Department: Union[bool, 'DepartmentArgsFromOpportunityRecursive1']
    User: Union[bool, 'UserArgsFromOpportunityRecursive1']


class DepartmentUserIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Department: Union[bool, 'DepartmentArgsFromOpportunityRecursive2']
    User: Union[bool, 'UserArgsFromOpportunityRecursive2']


class DepartmentUserIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Department: Union[bool, 'DepartmentArgsFromOpportunityRecursive3']
    User: Union[bool, 'UserArgsFromOpportunityRecursive3']


class DepartmentUserIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Department: Union[bool, 'DepartmentArgsFromOpportunityRecursive4']
    User: Union[bool, 'UserArgsFromOpportunityRecursive4']


class DepartmentUserIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class DepartmentUserArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyDepartmentUserArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOpportunityRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive1']


class OfficeIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOpportunityRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive2']


class OfficeIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOpportunityRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive3']


class OfficeIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromOpportunityRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive4']


class OfficeIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class OfficeArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyOfficeArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class OpportunityIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class OpportunityIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class OpportunityIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class OpportunityIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class OpportunityArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyOpportunityArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class PositionIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class PositionIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class PositionIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""


class PositionIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class PositionArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyPositionArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'UserArgsFromOpportunityRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive1']


class ProductIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'UserArgsFromOpportunityRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive2']


class ProductIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'UserArgsFromOpportunityRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive3']


class ProductIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'UserArgsFromOpportunityRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromOpportunityRecursive4']


class ProductIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ProductArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyProductArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive1']
    Product: Union[bool, 'ProductArgsFromOpportunityRecursive1']


class ProductSaleIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive2']
    Product: Union[bool, 'ProductArgsFromOpportunityRecursive2']


class ProductSaleIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive3']
    Product: Union[bool, 'ProductArgsFromOpportunityRecursive3']


class ProductSaleIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive4']
    Product: Union[bool, 'ProductArgsFromOpportunityRecursive4']


class ProductSaleIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ProductSaleArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyProductSaleArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive1']
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive1']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive1']


class ReviewIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive2']
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive2']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive2']


class ReviewIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive3']
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive3']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive3']


class ReviewIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive4']
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive4']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive4']


class ReviewIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ReviewArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyReviewArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'FindManyUserArgsFromOpportunityRecursive1']


class RoleIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'FindManyUserArgsFromOpportunityRecursive2']


class RoleIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'FindManyUserArgsFromOpportunityRecursive3']


class RoleIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User: Union[bool, 'FindManyUserArgsFromOpportunityRecursive4']


class RoleIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class RoleArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyRoleArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive1']
    User: Union[bool, 'UserArgsFromOpportunityRecursive1']


class ScheduleIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive2']
    User: Union[bool, 'UserArgsFromOpportunityRecursive2']


class ScheduleIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive3']
    User: Union[bool, 'UserArgsFromOpportunityRecursive3']


class ScheduleIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive4']
    User: Union[bool, 'UserArgsFromOpportunityRecursive4']


class ScheduleIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ScheduleArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyScheduleArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOpportunityRecursive1']


class ServiceIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOpportunityRecursive2']


class ServiceIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOpportunityRecursive3']


class ServiceIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromOpportunityRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromOpportunityRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromOpportunityRecursive4']


class ServiceIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ServiceArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyServiceArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Service: Union[bool, 'FindManyServiceArgsFromOpportunityRecursive1']


class ServiceCategoryIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Service: Union[bool, 'FindManyServiceArgsFromOpportunityRecursive2']


class ServiceCategoryIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Service: Union[bool, 'FindManyServiceArgsFromOpportunityRecursive3']


class ServiceCategoryIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Service: Union[bool, 'FindManyServiceArgsFromOpportunityRecursive4']


class ServiceCategoryIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ServiceCategoryArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyServiceCategoryArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive1']
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive1']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive1']
    User: Union[bool, 'UserArgsFromOpportunityRecursive1']


class ServiceRecordIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive2']
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive2']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive2']
    User: Union[bool, 'UserArgsFromOpportunityRecursive2']


class ServiceRecordIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive3']
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive3']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive3']
    User: Union[bool, 'UserArgsFromOpportunityRecursive3']


class ServiceRecordIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Client: Union[bool, 'ClientArgsFromOpportunityRecursive4']
    Office: Union[bool, 'OfficeArgsFromOpportunityRecursive4']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive4']
    User: Union[bool, 'UserArgsFromOpportunityRecursive4']


class ServiceRecordIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class ServiceRecordArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyServiceRecordArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromOpportunityRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive1']
    Role: Union[bool, 'RoleArgsFromOpportunityRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive1']


class UserIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromOpportunityRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive2']
    Role: Union[bool, 'RoleArgsFromOpportunityRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive2']


class UserIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromOpportunityRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive3']
    Role: Union[bool, 'RoleArgsFromOpportunityRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive3']


class UserIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromOpportunityRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromOpportunityRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromOpportunityRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromOpportunityRecursive4']
    Role: Union[bool, 'RoleArgsFromOpportunityRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromOpportunityRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromOpportunityRecursive4']


class UserIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class UserArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyUserArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive1']
    User: Union[bool, 'UserArgsFromOpportunityRecursive1']


class UserOnCabinetIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive2']
    User: Union[bool, 'UserArgsFromOpportunityRecursive2']


class UserOnCabinetIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive3']
    User: Union[bool, 'UserArgsFromOpportunityRecursive3']


class UserOnCabinetIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    Cabinet: Union[bool, 'CabinetArgsFromOpportunityRecursive4']
    User: Union[bool, 'UserArgsFromOpportunityRecursive4']


class UserOnCabinetIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class UserOnCabinetArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyUserOnCabinetArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromOpportunity(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive1']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive1']


class WorkerOnServiceIncludeFromOpportunityRecursive1(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive2']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive2']


class WorkerOnServiceIncludeFromOpportunityRecursive2(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive3']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive3']


class WorkerOnServiceIncludeFromOpportunityRecursive3(TypedDict, total=False):
    """Relational arguments for Opportunity"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive4']
    Service: Union[bool, 'ServiceArgsFromOpportunityRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromOpportunityRecursive4']


class WorkerOnServiceIncludeFromOpportunityRecursive4(TypedDict, total=False):
    """Relational arguments for Opportunity"""

    

class WorkerOnServiceArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    
    

class FindManyWorkerOnServiceArgsFromOpportunity(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromOpportunityRecursive1(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromOpportunityRecursive2(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromOpportunityRecursive3(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromOpportunityRecursive4(TypedDict, total=False):
    """Arguments for Opportunity"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyOpportunityArgs = FindManyOpportunityArgsFromOpportunity
FindFirstOpportunityArgs = FindManyOpportunityArgsFromOpportunity


    

class OpportunityWhereInput(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['OpportunityWhereInputRecursive1', List['OpportunityWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['OpportunityWhereInputRecursive1']
    OR: List['OpportunityWhereInputRecursive1']
    NOT: List['OpportunityWhereInputRecursive1']


class OpportunityWhereInputRecursive1(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['OpportunityWhereInputRecursive2', List['OpportunityWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['OpportunityWhereInputRecursive2']
    OR: List['OpportunityWhereInputRecursive2']
    NOT: List['OpportunityWhereInputRecursive2']


class OpportunityWhereInputRecursive2(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['OpportunityWhereInputRecursive3', List['OpportunityWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['OpportunityWhereInputRecursive3']
    OR: List['OpportunityWhereInputRecursive3']
    NOT: List['OpportunityWhereInputRecursive3']


class OpportunityWhereInputRecursive3(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['OpportunityWhereInputRecursive4', List['OpportunityWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['OpportunityWhereInputRecursive4']
    OR: List['OpportunityWhereInputRecursive4']
    NOT: List['OpportunityWhereInputRecursive4']


class OpportunityWhereInputRecursive4(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']



# aggregate Opportunity types


    

class OpportunityScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OpportunityScalarWhereWithAggregatesInputRecursive1']
    OR: List['OpportunityScalarWhereWithAggregatesInputRecursive1']
    NOT: List['OpportunityScalarWhereWithAggregatesInputRecursive1']


class OpportunityScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OpportunityScalarWhereWithAggregatesInputRecursive2']
    OR: List['OpportunityScalarWhereWithAggregatesInputRecursive2']
    NOT: List['OpportunityScalarWhereWithAggregatesInputRecursive2']


class OpportunityScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OpportunityScalarWhereWithAggregatesInputRecursive3']
    OR: List['OpportunityScalarWhereWithAggregatesInputRecursive3']
    NOT: List['OpportunityScalarWhereWithAggregatesInputRecursive3']


class OpportunityScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['OpportunityScalarWhereWithAggregatesInputRecursive4']
    OR: List['OpportunityScalarWhereWithAggregatesInputRecursive4']
    NOT: List['OpportunityScalarWhereWithAggregatesInputRecursive4']


class OpportunityScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Opportunity arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class OpportunityGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    _sum: 'OpportunitySumAggregateOutput'
    _avg: 'OpportunityAvgAggregateOutput'
    _min: 'OpportunityMinAggregateOutput'
    _max: 'OpportunityMaxAggregateOutput'
    _count: 'OpportunityCountAggregateOutput'


class OpportunityAvgAggregateOutput(TypedDict, total=False):
    """Opportunity output for aggregating averages"""


class OpportunitySumAggregateOutput(TypedDict, total=False):
    """Opportunity output for aggregating sums"""


class OpportunityScalarAggregateOutput(TypedDict, total=False):
    """Opportunity output including scalar fields"""
    id: _str
    name: _str


OpportunityMinAggregateOutput = OpportunityScalarAggregateOutput
OpportunityMaxAggregateOutput = OpportunityScalarAggregateOutput


class OpportunityMaxAggregateInput(TypedDict, total=False):
    """Opportunity input for aggregating by max"""
    id: bool
    name: bool


class OpportunityMinAggregateInput(TypedDict, total=False):
    """Opportunity input for aggregating by min"""
    id: bool
    name: bool


class OpportunityNumberAggregateInput(TypedDict, total=False):
    """Opportunity input for aggregating numbers"""


OpportunityAvgAggregateInput = OpportunityNumberAggregateInput
OpportunitySumAggregateInput = OpportunityNumberAggregateInput


OpportunityCountAggregateInput = TypedDict(
    'OpportunityCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

OpportunityCountAggregateOutput = TypedDict(
    'OpportunityCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


OpportunityKeys = Literal[
    'id',
    'name',
]
OpportunityScalarFieldKeys = Literal[
    'id',
    'name',
]
OpportunityScalarFieldKeysT = TypeVar('OpportunityScalarFieldKeysT', bound=OpportunityScalarFieldKeys)

OpportunityRelationalFieldKeys = _NoneType

# Position types

class PositionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Position create method"""
    description: Optional[_str]


class PositionCreateInput(PositionOptionalCreateInput):
    """Required arguments to the Position create method"""
    id: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PositionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Position create method, without relations"""
    description: Optional[_str]


class PositionCreateWithoutRelationsInput(PositionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Position create method, without relations"""
    id: _str
    name: _str

class PositionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PositionCreateWithoutRelationsInput'
    where: 'PositionWhereUniqueInput'

class PositionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PositionCreateWithoutRelationsInput'
    connect: 'PositionWhereUniqueInput'
    connect_or_create: 'PositionConnectOrCreateWithoutRelationsInput'


class PositionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PositionCreateWithoutRelationsInput', List['PositionCreateWithoutRelationsInput']]
    connect: Union['PositionWhereUniqueInput', List['PositionWhereUniqueInput']]
    connect_or_create: Union['PositionConnectOrCreateWithoutRelationsInput', List['PositionConnectOrCreateWithoutRelationsInput']]

_PositionWhereUnique_id_Input = TypedDict(
    '_PositionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PositionWhereUniqueInput = _PositionWhereUnique_id_Input


class PositionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]


class PositionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]


class PositionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PositionCreateWithoutRelationsInput']
    connect: List['PositionWhereUniqueInput']
    connect_or_create: List['PositionConnectOrCreateWithoutRelationsInput']
    set: List['PositionWhereUniqueInput']
    disconnect: List['PositionWhereUniqueInput']
    delete: List['PositionWhereUniqueInput']

    # TODO
    # update: List['PositionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PositionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PositionScalarWhereInput']
    # upsert: List['PositionUpserteWithWhereUniqueWithoutRelationsInput']


class PositionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PositionCreateWithoutRelationsInput'
    connect: 'PositionWhereUniqueInput'
    connect_or_create: 'PositionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PositionUpdateInput'
    # upsert: 'PositionUpsertWithoutRelationsInput'


class PositionUpsertInput(TypedDict):
    create: 'PositionCreateInput'
    update: 'PositionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Position_id_OrderByInput = TypedDict(
    '_Position_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Position_name_OrderByInput = TypedDict(
    '_Position_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Position_description_OrderByInput = TypedDict(
    '_Position_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Position_RelevanceInner = TypedDict(
    '_Position_RelevanceInner',
    {
        'fields': 'List[PositionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Position_RelevanceOrderByInput = TypedDict(
    '_Position_RelevanceOrderByInput',
    {
        '_relevance': '_Position_RelevanceInner',
    },
    total=True
)

PositionOrderByInput = Union[
    '_Position_id_OrderByInput',
    '_Position_name_OrderByInput',
    '_Position_description_OrderByInput',
    '_Position_RelevanceOrderByInput',
]



# recursive Position types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PositionRelationFilter = TypedDict(
    'PositionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PositionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PositionInclude(TypedDict, total=False):
    """Position relational arguments"""


    

class CabinetIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Office: Union[bool, 'OfficeArgsFromPositionRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive1']


class CabinetIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Office: Union[bool, 'OfficeArgsFromPositionRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive2']


class CabinetIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Office: Union[bool, 'OfficeArgsFromPositionRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive3']


class CabinetIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Office: Union[bool, 'OfficeArgsFromPositionRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive4']


class CabinetIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class CabinetArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyCabinetArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive1']


class ClientIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive2']


class ClientIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive3']


class ClientIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive4']


class ClientIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ClientArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyClientArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive1']
    Review: Union[bool, 'ReviewArgsFromPositionRecursive1']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive1']


class ClientHistoryIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive2']
    Review: Union[bool, 'ReviewArgsFromPositionRecursive2']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive2']


class ClientHistoryIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive3']
    Review: Union[bool, 'ReviewArgsFromPositionRecursive3']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive3']


class ClientHistoryIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive4']
    Review: Union[bool, 'ReviewArgsFromPositionRecursive4']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive4']


class ClientHistoryIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ClientHistoryArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyClientHistoryArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive1']


class DepartmentIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive2']


class DepartmentIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive3']


class DepartmentIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive4']


class DepartmentIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class DepartmentArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyDepartmentArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Department: Union[bool, 'DepartmentArgsFromPositionRecursive1']
    User: Union[bool, 'UserArgsFromPositionRecursive1']


class DepartmentUserIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Department: Union[bool, 'DepartmentArgsFromPositionRecursive2']
    User: Union[bool, 'UserArgsFromPositionRecursive2']


class DepartmentUserIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Department: Union[bool, 'DepartmentArgsFromPositionRecursive3']
    User: Union[bool, 'UserArgsFromPositionRecursive3']


class DepartmentUserIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Department: Union[bool, 'DepartmentArgsFromPositionRecursive4']
    User: Union[bool, 'UserArgsFromPositionRecursive4']


class DepartmentUserIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class DepartmentUserArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyDepartmentUserArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromPositionRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive1']


class OfficeIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromPositionRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive2']


class OfficeIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromPositionRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive3']


class OfficeIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromPositionRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive4']


class OfficeIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class OfficeArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyOfficeArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""


class OpportunityIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""


class OpportunityIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""


class OpportunityIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""


class OpportunityIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class OpportunityArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyOpportunityArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""


class PositionIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""


class PositionIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""


class PositionIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""


class PositionIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class PositionArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyPositionArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'UserArgsFromPositionRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive1']


class ProductIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'UserArgsFromPositionRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive2']


class ProductIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'UserArgsFromPositionRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive3']


class ProductIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'UserArgsFromPositionRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromPositionRecursive4']


class ProductIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ProductArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyProductArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive1']
    Product: Union[bool, 'ProductArgsFromPositionRecursive1']


class ProductSaleIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive2']
    Product: Union[bool, 'ProductArgsFromPositionRecursive2']


class ProductSaleIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive3']
    Product: Union[bool, 'ProductArgsFromPositionRecursive3']


class ProductSaleIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive4']
    Product: Union[bool, 'ProductArgsFromPositionRecursive4']


class ProductSaleIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ProductSaleArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyProductSaleArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive1']
    Client: Union[bool, 'ClientArgsFromPositionRecursive1']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive1']


class ReviewIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive2']
    Client: Union[bool, 'ClientArgsFromPositionRecursive2']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive2']


class ReviewIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive3']
    Client: Union[bool, 'ClientArgsFromPositionRecursive3']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive3']


class ReviewIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive4']
    Client: Union[bool, 'ClientArgsFromPositionRecursive4']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive4']


class ReviewIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ReviewArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyReviewArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'FindManyUserArgsFromPositionRecursive1']


class RoleIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'FindManyUserArgsFromPositionRecursive2']


class RoleIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'FindManyUserArgsFromPositionRecursive3']


class RoleIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    User: Union[bool, 'FindManyUserArgsFromPositionRecursive4']


class RoleIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class RoleArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyRoleArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive1']
    User: Union[bool, 'UserArgsFromPositionRecursive1']


class ScheduleIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive2']
    User: Union[bool, 'UserArgsFromPositionRecursive2']


class ScheduleIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive3']
    User: Union[bool, 'UserArgsFromPositionRecursive3']


class ScheduleIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive4']
    User: Union[bool, 'UserArgsFromPositionRecursive4']


class ScheduleIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ScheduleArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyScheduleArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromPositionRecursive1']


class ServiceIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromPositionRecursive2']


class ServiceIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromPositionRecursive3']


class ServiceIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromPositionRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromPositionRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromPositionRecursive4']


class ServiceIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ServiceArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyServiceArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Service: Union[bool, 'FindManyServiceArgsFromPositionRecursive1']


class ServiceCategoryIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Service: Union[bool, 'FindManyServiceArgsFromPositionRecursive2']


class ServiceCategoryIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Service: Union[bool, 'FindManyServiceArgsFromPositionRecursive3']


class ServiceCategoryIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Service: Union[bool, 'FindManyServiceArgsFromPositionRecursive4']


class ServiceCategoryIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ServiceCategoryArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyServiceCategoryArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive1']
    Office: Union[bool, 'OfficeArgsFromPositionRecursive1']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive1']
    User: Union[bool, 'UserArgsFromPositionRecursive1']


class ServiceRecordIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive2']
    Office: Union[bool, 'OfficeArgsFromPositionRecursive2']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive2']
    User: Union[bool, 'UserArgsFromPositionRecursive2']


class ServiceRecordIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive3']
    Office: Union[bool, 'OfficeArgsFromPositionRecursive3']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive3']
    User: Union[bool, 'UserArgsFromPositionRecursive3']


class ServiceRecordIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Client: Union[bool, 'ClientArgsFromPositionRecursive4']
    Office: Union[bool, 'OfficeArgsFromPositionRecursive4']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive4']
    User: Union[bool, 'UserArgsFromPositionRecursive4']


class ServiceRecordIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class ServiceRecordArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyServiceRecordArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromPositionRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive1']
    Role: Union[bool, 'RoleArgsFromPositionRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive1']


class UserIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromPositionRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive2']
    Role: Union[bool, 'RoleArgsFromPositionRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive2']


class UserIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromPositionRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive3']
    Role: Union[bool, 'RoleArgsFromPositionRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive3']


class UserIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromPositionRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromPositionRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromPositionRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromPositionRecursive4']
    Role: Union[bool, 'RoleArgsFromPositionRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromPositionRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromPositionRecursive4']


class UserIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class UserArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyUserArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive1']
    User: Union[bool, 'UserArgsFromPositionRecursive1']


class UserOnCabinetIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive2']
    User: Union[bool, 'UserArgsFromPositionRecursive2']


class UserOnCabinetIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive3']
    User: Union[bool, 'UserArgsFromPositionRecursive3']


class UserOnCabinetIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    Cabinet: Union[bool, 'CabinetArgsFromPositionRecursive4']
    User: Union[bool, 'UserArgsFromPositionRecursive4']


class UserOnCabinetIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class UserOnCabinetArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyUserOnCabinetArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromPosition(TypedDict, total=False):
    """Relational arguments for Position"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromPositionRecursive1']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromPositionRecursive1']


class WorkerOnServiceIncludeFromPositionRecursive1(TypedDict, total=False):
    """Relational arguments for Position"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromPositionRecursive2']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromPositionRecursive2']


class WorkerOnServiceIncludeFromPositionRecursive2(TypedDict, total=False):
    """Relational arguments for Position"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromPositionRecursive3']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromPositionRecursive3']


class WorkerOnServiceIncludeFromPositionRecursive3(TypedDict, total=False):
    """Relational arguments for Position"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromPositionRecursive4']
    Service: Union[bool, 'ServiceArgsFromPositionRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromPositionRecursive4']


class WorkerOnServiceIncludeFromPositionRecursive4(TypedDict, total=False):
    """Relational arguments for Position"""

    

class WorkerOnServiceArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    
    

class FindManyWorkerOnServiceArgsFromPosition(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromPositionRecursive1(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromPositionRecursive2(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromPositionRecursive3(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromPositionRecursive4(TypedDict, total=False):
    """Arguments for Position"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyPositionArgs = FindManyPositionArgsFromPosition
FindFirstPositionArgs = FindManyPositionArgsFromPosition


    

class PositionWhereInput(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PositionWhereInputRecursive1', List['PositionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PositionWhereInputRecursive1']
    OR: List['PositionWhereInputRecursive1']
    NOT: List['PositionWhereInputRecursive1']


class PositionWhereInputRecursive1(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PositionWhereInputRecursive2', List['PositionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PositionWhereInputRecursive2']
    OR: List['PositionWhereInputRecursive2']
    NOT: List['PositionWhereInputRecursive2']


class PositionWhereInputRecursive2(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PositionWhereInputRecursive3', List['PositionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PositionWhereInputRecursive3']
    OR: List['PositionWhereInputRecursive3']
    NOT: List['PositionWhereInputRecursive3']


class PositionWhereInputRecursive3(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PositionWhereInputRecursive4', List['PositionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PositionWhereInputRecursive4']
    OR: List['PositionWhereInputRecursive4']
    NOT: List['PositionWhereInputRecursive4']


class PositionWhereInputRecursive4(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']



# aggregate Position types


    

class PositionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PositionScalarWhereWithAggregatesInputRecursive1']
    OR: List['PositionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PositionScalarWhereWithAggregatesInputRecursive1']


class PositionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PositionScalarWhereWithAggregatesInputRecursive2']
    OR: List['PositionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PositionScalarWhereWithAggregatesInputRecursive2']


class PositionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PositionScalarWhereWithAggregatesInputRecursive3']
    OR: List['PositionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PositionScalarWhereWithAggregatesInputRecursive3']


class PositionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PositionScalarWhereWithAggregatesInputRecursive4']
    OR: List['PositionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PositionScalarWhereWithAggregatesInputRecursive4']


class PositionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Position arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class PositionGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    _sum: 'PositionSumAggregateOutput'
    _avg: 'PositionAvgAggregateOutput'
    _min: 'PositionMinAggregateOutput'
    _max: 'PositionMaxAggregateOutput'
    _count: 'PositionCountAggregateOutput'


class PositionAvgAggregateOutput(TypedDict, total=False):
    """Position output for aggregating averages"""


class PositionSumAggregateOutput(TypedDict, total=False):
    """Position output for aggregating sums"""


class PositionScalarAggregateOutput(TypedDict, total=False):
    """Position output including scalar fields"""
    id: _str
    name: _str
    description: _str


PositionMinAggregateOutput = PositionScalarAggregateOutput
PositionMaxAggregateOutput = PositionScalarAggregateOutput


class PositionMaxAggregateInput(TypedDict, total=False):
    """Position input for aggregating by max"""
    id: bool
    name: bool
    description: bool


class PositionMinAggregateInput(TypedDict, total=False):
    """Position input for aggregating by min"""
    id: bool
    name: bool
    description: bool


class PositionNumberAggregateInput(TypedDict, total=False):
    """Position input for aggregating numbers"""


PositionAvgAggregateInput = PositionNumberAggregateInput
PositionSumAggregateInput = PositionNumberAggregateInput


PositionCountAggregateInput = TypedDict(
    'PositionCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

PositionCountAggregateOutput = TypedDict(
    'PositionCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


PositionKeys = Literal[
    'id',
    'name',
    'description',
]
PositionScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
]
PositionScalarFieldKeysT = TypeVar('PositionScalarFieldKeysT', bound=PositionScalarFieldKeys)

PositionRelationalFieldKeys = _NoneType

# Product types

class ProductOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Product create method"""
    description: Optional[_str]
    volume: _float
    unit: _str
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    creatorId: _str
    User: 'UserCreateNestedWithoutRelationsInput'
    ProductSale: 'ProductSaleCreateManyNestedWithoutRelationsInput'


class ProductCreateInput(ProductOptionalCreateInput):
    """Required arguments to the Product create method"""
    id: _str
    name: _str
    quantity: _int
    prices: _int
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Product create method, without relations"""
    description: Optional[_str]
    volume: _float
    unit: _str
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    creatorId: _str


class ProductCreateWithoutRelationsInput(ProductOptionalCreateWithoutRelationsInput):
    """Required arguments to the Product create method, without relations"""
    id: _str
    name: _str
    quantity: _int
    prices: _int
    updatedAt: datetime.datetime

class ProductConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProductCreateWithoutRelationsInput'
    where: 'ProductWhereUniqueInput'

class ProductCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'


class ProductCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductCreateWithoutRelationsInput', List['ProductCreateWithoutRelationsInput']]
    connect: Union['ProductWhereUniqueInput', List['ProductWhereUniqueInput']]
    connect_or_create: Union['ProductConnectOrCreateWithoutRelationsInput', List['ProductConnectOrCreateWithoutRelationsInput']]

_ProductWhereUnique_id_Input = TypedDict(
    '_ProductWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ProductWhereUniqueInput = _ProductWhereUnique_id_Input


class ProductUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    volume: Union[AtomicFloatInput, _float]
    unit: _str
    quantity: Union[AtomicIntInput, _int]
    prices: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    User: 'UserUpdateOneWithoutRelationsInput'
    ProductSale: 'ProductSaleUpdateManyWithoutRelationsInput'


class ProductUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    volume: Union[AtomicFloatInput, _float]
    unit: _str
    quantity: Union[AtomicIntInput, _int]
    prices: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class ProductUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductCreateWithoutRelationsInput']
    connect: List['ProductWhereUniqueInput']
    connect_or_create: List['ProductConnectOrCreateWithoutRelationsInput']
    set: List['ProductWhereUniqueInput']
    disconnect: List['ProductWhereUniqueInput']
    delete: List['ProductWhereUniqueInput']

    # TODO
    # update: List['ProductUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductScalarWhereInput']
    # upsert: List['ProductUpserteWithWhereUniqueWithoutRelationsInput']


class ProductUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductCreateWithoutRelationsInput'
    connect: 'ProductWhereUniqueInput'
    connect_or_create: 'ProductConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductUpdateInput'
    # upsert: 'ProductUpsertWithoutRelationsInput'


class ProductUpsertInput(TypedDict):
    create: 'ProductCreateInput'
    update: 'ProductUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Product_id_OrderByInput = TypedDict(
    '_Product_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Product_name_OrderByInput = TypedDict(
    '_Product_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Product_description_OrderByInput = TypedDict(
    '_Product_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Product_volume_OrderByInput = TypedDict(
    '_Product_volume_OrderByInput',
    {
        'volume': 'SortOrder',
    },
    total=True
)

_Product_unit_OrderByInput = TypedDict(
    '_Product_unit_OrderByInput',
    {
        'unit': 'SortOrder',
    },
    total=True
)

_Product_quantity_OrderByInput = TypedDict(
    '_Product_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_Product_prices_OrderByInput = TypedDict(
    '_Product_prices_OrderByInput',
    {
        'prices': 'SortOrder',
    },
    total=True
)

_Product_createdAt_OrderByInput = TypedDict(
    '_Product_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Product_updatedAt_OrderByInput = TypedDict(
    '_Product_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Product_deletedAt_OrderByInput = TypedDict(
    '_Product_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Product_creatorId_OrderByInput = TypedDict(
    '_Product_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_Product_RelevanceInner = TypedDict(
    '_Product_RelevanceInner',
    {
        'fields': 'List[ProductScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Product_RelevanceOrderByInput = TypedDict(
    '_Product_RelevanceOrderByInput',
    {
        '_relevance': '_Product_RelevanceInner',
    },
    total=True
)

ProductOrderByInput = Union[
    '_Product_id_OrderByInput',
    '_Product_name_OrderByInput',
    '_Product_description_OrderByInput',
    '_Product_volume_OrderByInput',
    '_Product_unit_OrderByInput',
    '_Product_quantity_OrderByInput',
    '_Product_prices_OrderByInput',
    '_Product_createdAt_OrderByInput',
    '_Product_updatedAt_OrderByInput',
    '_Product_deletedAt_OrderByInput',
    '_Product_creatorId_OrderByInput',
    '_Product_RelevanceOrderByInput',
]



# recursive Product types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProductRelationFilter = TypedDict(
    'ProductRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProductListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProductInclude(TypedDict, total=False):
    """Product relational arguments"""
    User: Union[bool, 'UserArgsFromProduct']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProduct']


    

class CabinetIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Office: Union[bool, 'OfficeArgsFromProductRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive1']


class CabinetIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Office: Union[bool, 'OfficeArgsFromProductRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive2']


class CabinetIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Office: Union[bool, 'OfficeArgsFromProductRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive3']


class CabinetIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Office: Union[bool, 'OfficeArgsFromProductRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive4']


class CabinetIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class CabinetArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyCabinetArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive1']


class ClientIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive2']


class ClientIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive3']


class ClientIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive4']


class ClientIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ClientArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyClientArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive1']
    Review: Union[bool, 'ReviewArgsFromProductRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductRecursive1']


class ClientHistoryIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive2']
    Review: Union[bool, 'ReviewArgsFromProductRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductRecursive2']


class ClientHistoryIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive3']
    Review: Union[bool, 'ReviewArgsFromProductRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductRecursive3']


class ClientHistoryIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive4']
    Review: Union[bool, 'ReviewArgsFromProductRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductRecursive4']


class ClientHistoryIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ClientHistoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyClientHistoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive1']


class DepartmentIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive2']


class DepartmentIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive3']


class DepartmentIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive4']


class DepartmentIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class DepartmentArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyDepartmentArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Department: Union[bool, 'DepartmentArgsFromProductRecursive1']
    User: Union[bool, 'UserArgsFromProductRecursive1']


class DepartmentUserIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Department: Union[bool, 'DepartmentArgsFromProductRecursive2']
    User: Union[bool, 'UserArgsFromProductRecursive2']


class DepartmentUserIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Department: Union[bool, 'DepartmentArgsFromProductRecursive3']
    User: Union[bool, 'UserArgsFromProductRecursive3']


class DepartmentUserIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Department: Union[bool, 'DepartmentArgsFromProductRecursive4']
    User: Union[bool, 'UserArgsFromProductRecursive4']


class DepartmentUserIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class DepartmentUserArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyDepartmentUserArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive1']


class OfficeIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive2']


class OfficeIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive3']


class OfficeIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive4']


class OfficeIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class OfficeArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyOfficeArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""


class OpportunityIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""


class OpportunityIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""


class OpportunityIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""


class OpportunityIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class OpportunityArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyOpportunityArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""


class PositionIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""


class PositionIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""


class PositionIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""


class PositionIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class PositionArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyPositionArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'UserArgsFromProductRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive1']


class ProductIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'UserArgsFromProductRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive2']


class ProductIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'UserArgsFromProductRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive3']


class ProductIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'UserArgsFromProductRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductRecursive4']


class ProductIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProductArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive1']
    Product: Union[bool, 'ProductArgsFromProductRecursive1']


class ProductSaleIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive2']
    Product: Union[bool, 'ProductArgsFromProductRecursive2']


class ProductSaleIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive3']
    Product: Union[bool, 'ProductArgsFromProductRecursive3']


class ProductSaleIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive4']
    Product: Union[bool, 'ProductArgsFromProductRecursive4']


class ProductSaleIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ProductSaleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyProductSaleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive1']
    Client: Union[bool, 'ClientArgsFromProductRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductRecursive1']


class ReviewIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive2']
    Client: Union[bool, 'ClientArgsFromProductRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductRecursive2']


class ReviewIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive3']
    Client: Union[bool, 'ClientArgsFromProductRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductRecursive3']


class ReviewIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive4']
    Client: Union[bool, 'ClientArgsFromProductRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductRecursive4']


class ReviewIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ReviewArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyReviewArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'FindManyUserArgsFromProductRecursive1']


class RoleIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'FindManyUserArgsFromProductRecursive2']


class RoleIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'FindManyUserArgsFromProductRecursive3']


class RoleIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    User: Union[bool, 'FindManyUserArgsFromProductRecursive4']


class RoleIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class RoleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyRoleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive1']
    User: Union[bool, 'UserArgsFromProductRecursive1']


class ScheduleIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive2']
    User: Union[bool, 'UserArgsFromProductRecursive2']


class ScheduleIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive3']
    User: Union[bool, 'UserArgsFromProductRecursive3']


class ScheduleIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive4']
    User: Union[bool, 'UserArgsFromProductRecursive4']


class ScheduleIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ScheduleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyScheduleArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductRecursive1']


class ServiceIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductRecursive2']


class ServiceIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductRecursive3']


class ServiceIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromProductRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductRecursive4']


class ServiceIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ServiceArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyServiceArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Service: Union[bool, 'FindManyServiceArgsFromProductRecursive1']


class ServiceCategoryIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Service: Union[bool, 'FindManyServiceArgsFromProductRecursive2']


class ServiceCategoryIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Service: Union[bool, 'FindManyServiceArgsFromProductRecursive3']


class ServiceCategoryIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Service: Union[bool, 'FindManyServiceArgsFromProductRecursive4']


class ServiceCategoryIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ServiceCategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyServiceCategoryArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive1']
    Office: Union[bool, 'OfficeArgsFromProductRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive1']
    User: Union[bool, 'UserArgsFromProductRecursive1']


class ServiceRecordIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive2']
    Office: Union[bool, 'OfficeArgsFromProductRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive2']
    User: Union[bool, 'UserArgsFromProductRecursive2']


class ServiceRecordIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive3']
    Office: Union[bool, 'OfficeArgsFromProductRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive3']
    User: Union[bool, 'UserArgsFromProductRecursive3']


class ServiceRecordIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Client: Union[bool, 'ClientArgsFromProductRecursive4']
    Office: Union[bool, 'OfficeArgsFromProductRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive4']
    User: Union[bool, 'UserArgsFromProductRecursive4']


class ServiceRecordIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class ServiceRecordArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyServiceRecordArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromProductRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive1']
    Role: Union[bool, 'RoleArgsFromProductRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive1']


class UserIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromProductRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive2']
    Role: Union[bool, 'RoleArgsFromProductRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive2']


class UserIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromProductRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive3']
    Role: Union[bool, 'RoleArgsFromProductRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive3']


class UserIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromProductRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductRecursive4']
    Role: Union[bool, 'RoleArgsFromProductRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductRecursive4']


class UserIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class UserArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyUserArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive1']
    User: Union[bool, 'UserArgsFromProductRecursive1']


class UserOnCabinetIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive2']
    User: Union[bool, 'UserArgsFromProductRecursive2']


class UserOnCabinetIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive3']
    User: Union[bool, 'UserArgsFromProductRecursive3']


class UserOnCabinetIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    Cabinet: Union[bool, 'CabinetArgsFromProductRecursive4']
    User: Union[bool, 'UserArgsFromProductRecursive4']


class UserOnCabinetIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class UserOnCabinetArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyUserOnCabinetArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromProduct(TypedDict, total=False):
    """Relational arguments for Product"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductRecursive1']


class WorkerOnServiceIncludeFromProductRecursive1(TypedDict, total=False):
    """Relational arguments for Product"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductRecursive2']


class WorkerOnServiceIncludeFromProductRecursive2(TypedDict, total=False):
    """Relational arguments for Product"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductRecursive3']


class WorkerOnServiceIncludeFromProductRecursive3(TypedDict, total=False):
    """Relational arguments for Product"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductRecursive4']


class WorkerOnServiceIncludeFromProductRecursive4(TypedDict, total=False):
    """Relational arguments for Product"""

    

class WorkerOnServiceArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    
    

class FindManyWorkerOnServiceArgsFromProduct(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromProductRecursive1(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromProductRecursive2(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromProductRecursive3(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromProductRecursive4(TypedDict, total=False):
    """Arguments for Product"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyProductArgs = FindManyProductArgsFromProduct
FindFirstProductArgs = FindManyProductArgsFromProduct


    

class ProductWhereInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    volume: Union[_float, 'types.FloatFilter']
    unit: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    prices: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive1', List['ProductWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive1']
    OR: List['ProductWhereInputRecursive1']
    NOT: List['ProductWhereInputRecursive1']


class ProductWhereInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    volume: Union[_float, 'types.FloatFilter']
    unit: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    prices: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive2', List['ProductWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive2']
    OR: List['ProductWhereInputRecursive2']
    NOT: List['ProductWhereInputRecursive2']


class ProductWhereInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    volume: Union[_float, 'types.FloatFilter']
    unit: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    prices: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive3', List['ProductWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive3']
    OR: List['ProductWhereInputRecursive3']
    NOT: List['ProductWhereInputRecursive3']


class ProductWhereInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    volume: Union[_float, 'types.FloatFilter']
    unit: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    prices: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'

    # should be noted that AND and NOT should be Union['ProductWhereInputRecursive4', List['ProductWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProductWhereInputRecursive4']
    OR: List['ProductWhereInputRecursive4']
    NOT: List['ProductWhereInputRecursive4']


class ProductWhereInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    volume: Union[_float, 'types.FloatFilter']
    unit: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    prices: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    ProductSale: 'ProductSaleListRelationFilter'



# aggregate Product types


    

class ProductScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    unit: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    prices: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive1']


class ProductScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    unit: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    prices: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive2']


class ProductScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    unit: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    prices: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive3']


class ProductScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    unit: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    prices: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProductScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProductScalarWhereWithAggregatesInputRecursive4']


class ProductScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Product arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    unit: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    prices: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']



class ProductGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    volume: _float
    unit: _str
    quantity: _int
    prices: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    creatorId: _str
    _sum: 'ProductSumAggregateOutput'
    _avg: 'ProductAvgAggregateOutput'
    _min: 'ProductMinAggregateOutput'
    _max: 'ProductMaxAggregateOutput'
    _count: 'ProductCountAggregateOutput'


class ProductAvgAggregateOutput(TypedDict, total=False):
    """Product output for aggregating averages"""
    volume: float
    quantity: float
    prices: float


class ProductSumAggregateOutput(TypedDict, total=False):
    """Product output for aggregating sums"""
    volume: _float
    quantity: _int
    prices: _int


class ProductScalarAggregateOutput(TypedDict, total=False):
    """Product output including scalar fields"""
    id: _str
    name: _str
    description: _str
    volume: _float
    unit: _str
    quantity: _int
    prices: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    creatorId: _str


ProductMinAggregateOutput = ProductScalarAggregateOutput
ProductMaxAggregateOutput = ProductScalarAggregateOutput


class ProductMaxAggregateInput(TypedDict, total=False):
    """Product input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    volume: bool
    unit: bool
    quantity: bool
    prices: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool
    creatorId: bool


class ProductMinAggregateInput(TypedDict, total=False):
    """Product input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    volume: bool
    unit: bool
    quantity: bool
    prices: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool
    creatorId: bool


class ProductNumberAggregateInput(TypedDict, total=False):
    """Product input for aggregating numbers"""
    volume: bool
    quantity: bool
    prices: bool


ProductAvgAggregateInput = ProductNumberAggregateInput
ProductSumAggregateInput = ProductNumberAggregateInput


ProductCountAggregateInput = TypedDict(
    'ProductCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'volume': bool,
        'unit': bool,
        'quantity': bool,
        'prices': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'deletedAt': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

ProductCountAggregateOutput = TypedDict(
    'ProductCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'volume': int,
        'unit': int,
        'quantity': int,
        'prices': int,
        'createdAt': int,
        'updatedAt': int,
        'deletedAt': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


ProductKeys = Literal[
    'id',
    'name',
    'description',
    'volume',
    'unit',
    'quantity',
    'prices',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'creatorId',
    'User',
    'ProductSale',
]
ProductScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'volume',
    'unit',
    'quantity',
    'prices',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'creatorId',
]
ProductScalarFieldKeysT = TypeVar('ProductScalarFieldKeysT', bound=ProductScalarFieldKeys)

ProductRelationalFieldKeys = Literal[
        'User',
        'ProductSale',
    ]

# ProductSale types

class ProductSaleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ProductSale create method"""
    productId: _str
    clientId: _str
    saleDate: datetime.datetime
    Client: 'ClientCreateNestedWithoutRelationsInput'
    Product: 'ProductCreateNestedWithoutRelationsInput'


class ProductSaleCreateInput(ProductSaleOptionalCreateInput):
    """Required arguments to the ProductSale create method"""
    id: _str
    quantity: _int
    price: _float
    totalPrice: _float
    creatorId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProductSaleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ProductSale create method, without relations"""
    productId: _str
    clientId: _str
    saleDate: datetime.datetime


class ProductSaleCreateWithoutRelationsInput(ProductSaleOptionalCreateWithoutRelationsInput):
    """Required arguments to the ProductSale create method, without relations"""
    id: _str
    quantity: _int
    price: _float
    totalPrice: _float
    creatorId: _str

class ProductSaleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProductSaleCreateWithoutRelationsInput'
    where: 'ProductSaleWhereUniqueInput'

class ProductSaleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductSaleCreateWithoutRelationsInput'
    connect: 'ProductSaleWhereUniqueInput'
    connect_or_create: 'ProductSaleConnectOrCreateWithoutRelationsInput'


class ProductSaleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProductSaleCreateWithoutRelationsInput', List['ProductSaleCreateWithoutRelationsInput']]
    connect: Union['ProductSaleWhereUniqueInput', List['ProductSaleWhereUniqueInput']]
    connect_or_create: Union['ProductSaleConnectOrCreateWithoutRelationsInput', List['ProductSaleConnectOrCreateWithoutRelationsInput']]

_ProductSaleWhereUnique_id_Input = TypedDict(
    '_ProductSaleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ProductSaleWhereUniqueInput = _ProductSaleWhereUnique_id_Input


class ProductSaleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    quantity: Union[AtomicIntInput, _int]
    price: Union[AtomicFloatInput, _float]
    totalPrice: Union[AtomicFloatInput, _float]
    saleDate: datetime.datetime
    creatorId: _str
    Client: 'ClientUpdateOneWithoutRelationsInput'
    Product: 'ProductUpdateOneWithoutRelationsInput'


class ProductSaleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    quantity: Union[AtomicIntInput, _int]
    price: Union[AtomicFloatInput, _float]
    totalPrice: Union[AtomicFloatInput, _float]
    saleDate: datetime.datetime
    creatorId: _str


class ProductSaleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProductSaleCreateWithoutRelationsInput']
    connect: List['ProductSaleWhereUniqueInput']
    connect_or_create: List['ProductSaleConnectOrCreateWithoutRelationsInput']
    set: List['ProductSaleWhereUniqueInput']
    disconnect: List['ProductSaleWhereUniqueInput']
    delete: List['ProductSaleWhereUniqueInput']

    # TODO
    # update: List['ProductSaleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProductSaleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProductSaleScalarWhereInput']
    # upsert: List['ProductSaleUpserteWithWhereUniqueWithoutRelationsInput']


class ProductSaleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProductSaleCreateWithoutRelationsInput'
    connect: 'ProductSaleWhereUniqueInput'
    connect_or_create: 'ProductSaleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProductSaleUpdateInput'
    # upsert: 'ProductSaleUpsertWithoutRelationsInput'


class ProductSaleUpsertInput(TypedDict):
    create: 'ProductSaleCreateInput'
    update: 'ProductSaleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ProductSale_id_OrderByInput = TypedDict(
    '_ProductSale_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ProductSale_productId_OrderByInput = TypedDict(
    '_ProductSale_productId_OrderByInput',
    {
        'productId': 'SortOrder',
    },
    total=True
)

_ProductSale_clientId_OrderByInput = TypedDict(
    '_ProductSale_clientId_OrderByInput',
    {
        'clientId': 'SortOrder',
    },
    total=True
)

_ProductSale_quantity_OrderByInput = TypedDict(
    '_ProductSale_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_ProductSale_price_OrderByInput = TypedDict(
    '_ProductSale_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_ProductSale_totalPrice_OrderByInput = TypedDict(
    '_ProductSale_totalPrice_OrderByInput',
    {
        'totalPrice': 'SortOrder',
    },
    total=True
)

_ProductSale_saleDate_OrderByInput = TypedDict(
    '_ProductSale_saleDate_OrderByInput',
    {
        'saleDate': 'SortOrder',
    },
    total=True
)

_ProductSale_creatorId_OrderByInput = TypedDict(
    '_ProductSale_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_ProductSale_RelevanceInner = TypedDict(
    '_ProductSale_RelevanceInner',
    {
        'fields': 'List[ProductSaleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ProductSale_RelevanceOrderByInput = TypedDict(
    '_ProductSale_RelevanceOrderByInput',
    {
        '_relevance': '_ProductSale_RelevanceInner',
    },
    total=True
)

ProductSaleOrderByInput = Union[
    '_ProductSale_id_OrderByInput',
    '_ProductSale_productId_OrderByInput',
    '_ProductSale_clientId_OrderByInput',
    '_ProductSale_quantity_OrderByInput',
    '_ProductSale_price_OrderByInput',
    '_ProductSale_totalPrice_OrderByInput',
    '_ProductSale_saleDate_OrderByInput',
    '_ProductSale_creatorId_OrderByInput',
    '_ProductSale_RelevanceOrderByInput',
]



# recursive ProductSale types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProductSaleRelationFilter = TypedDict(
    'ProductSaleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProductSaleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProductSaleInclude(TypedDict, total=False):
    """ProductSale relational arguments"""
    Client: Union[bool, 'ClientArgsFromProductSale']
    Product: Union[bool, 'ProductArgsFromProductSale']


    

class CabinetIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive1']


class CabinetIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive2']


class CabinetIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive3']


class CabinetIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive4']


class CabinetIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class CabinetArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyCabinetArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive1']


class ClientIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive2']


class ClientIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive3']


class ClientIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive4']


class ClientIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ClientArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyClientArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive1']
    Review: Union[bool, 'ReviewArgsFromProductSaleRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive1']


class ClientHistoryIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive2']
    Review: Union[bool, 'ReviewArgsFromProductSaleRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive2']


class ClientHistoryIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive3']
    Review: Union[bool, 'ReviewArgsFromProductSaleRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive3']


class ClientHistoryIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive4']
    Review: Union[bool, 'ReviewArgsFromProductSaleRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive4']


class ClientHistoryIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ClientHistoryArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyClientHistoryArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive1']


class DepartmentIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive2']


class DepartmentIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive3']


class DepartmentIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive4']


class DepartmentIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class DepartmentArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyDepartmentArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Department: Union[bool, 'DepartmentArgsFromProductSaleRecursive1']
    User: Union[bool, 'UserArgsFromProductSaleRecursive1']


class DepartmentUserIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Department: Union[bool, 'DepartmentArgsFromProductSaleRecursive2']
    User: Union[bool, 'UserArgsFromProductSaleRecursive2']


class DepartmentUserIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Department: Union[bool, 'DepartmentArgsFromProductSaleRecursive3']
    User: Union[bool, 'UserArgsFromProductSaleRecursive3']


class DepartmentUserIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Department: Union[bool, 'DepartmentArgsFromProductSaleRecursive4']
    User: Union[bool, 'UserArgsFromProductSaleRecursive4']


class DepartmentUserIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class DepartmentUserArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyDepartmentUserArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductSaleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive1']


class OfficeIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductSaleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive2']


class OfficeIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductSaleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive3']


class OfficeIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromProductSaleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive4']


class OfficeIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class OfficeArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyOfficeArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class OpportunityIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class OpportunityIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class OpportunityIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class OpportunityIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class OpportunityArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyOpportunityArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class PositionIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class PositionIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class PositionIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""


class PositionIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class PositionArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyPositionArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'UserArgsFromProductSaleRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive1']


class ProductIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'UserArgsFromProductSaleRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive2']


class ProductIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'UserArgsFromProductSaleRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive3']


class ProductIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'UserArgsFromProductSaleRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromProductSaleRecursive4']


class ProductIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ProductArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyProductArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive1']
    Product: Union[bool, 'ProductArgsFromProductSaleRecursive1']


class ProductSaleIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive2']
    Product: Union[bool, 'ProductArgsFromProductSaleRecursive2']


class ProductSaleIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive3']
    Product: Union[bool, 'ProductArgsFromProductSaleRecursive3']


class ProductSaleIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive4']
    Product: Union[bool, 'ProductArgsFromProductSaleRecursive4']


class ProductSaleIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ProductSaleArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyProductSaleArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive1']
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive1']


class ReviewIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive2']
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive2']


class ReviewIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive3']
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive3']


class ReviewIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive4']
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive4']


class ReviewIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ReviewArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyReviewArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'FindManyUserArgsFromProductSaleRecursive1']


class RoleIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'FindManyUserArgsFromProductSaleRecursive2']


class RoleIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'FindManyUserArgsFromProductSaleRecursive3']


class RoleIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User: Union[bool, 'FindManyUserArgsFromProductSaleRecursive4']


class RoleIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class RoleArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyRoleArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive1']
    User: Union[bool, 'UserArgsFromProductSaleRecursive1']


class ScheduleIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive2']
    User: Union[bool, 'UserArgsFromProductSaleRecursive2']


class ScheduleIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive3']
    User: Union[bool, 'UserArgsFromProductSaleRecursive3']


class ScheduleIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive4']
    User: Union[bool, 'UserArgsFromProductSaleRecursive4']


class ScheduleIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ScheduleArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyScheduleArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductSaleRecursive1']


class ServiceIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductSaleRecursive2']


class ServiceIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductSaleRecursive3']


class ServiceIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromProductSaleRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromProductSaleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromProductSaleRecursive4']


class ServiceIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ServiceArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyServiceArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Service: Union[bool, 'FindManyServiceArgsFromProductSaleRecursive1']


class ServiceCategoryIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Service: Union[bool, 'FindManyServiceArgsFromProductSaleRecursive2']


class ServiceCategoryIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Service: Union[bool, 'FindManyServiceArgsFromProductSaleRecursive3']


class ServiceCategoryIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Service: Union[bool, 'FindManyServiceArgsFromProductSaleRecursive4']


class ServiceCategoryIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ServiceCategoryArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyServiceCategoryArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive1']
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive1']
    User: Union[bool, 'UserArgsFromProductSaleRecursive1']


class ServiceRecordIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive2']
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive2']
    User: Union[bool, 'UserArgsFromProductSaleRecursive2']


class ServiceRecordIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive3']
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive3']
    User: Union[bool, 'UserArgsFromProductSaleRecursive3']


class ServiceRecordIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Client: Union[bool, 'ClientArgsFromProductSaleRecursive4']
    Office: Union[bool, 'OfficeArgsFromProductSaleRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive4']
    User: Union[bool, 'UserArgsFromProductSaleRecursive4']


class ServiceRecordIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class ServiceRecordArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyServiceRecordArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromProductSaleRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive1']
    Role: Union[bool, 'RoleArgsFromProductSaleRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive1']


class UserIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromProductSaleRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive2']
    Role: Union[bool, 'RoleArgsFromProductSaleRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive2']


class UserIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromProductSaleRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive3']
    Role: Union[bool, 'RoleArgsFromProductSaleRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive3']


class UserIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromProductSaleRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromProductSaleRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromProductSaleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromProductSaleRecursive4']
    Role: Union[bool, 'RoleArgsFromProductSaleRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromProductSaleRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromProductSaleRecursive4']


class UserIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class UserArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyUserArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive1']
    User: Union[bool, 'UserArgsFromProductSaleRecursive1']


class UserOnCabinetIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive2']
    User: Union[bool, 'UserArgsFromProductSaleRecursive2']


class UserOnCabinetIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive3']
    User: Union[bool, 'UserArgsFromProductSaleRecursive3']


class UserOnCabinetIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    Cabinet: Union[bool, 'CabinetArgsFromProductSaleRecursive4']
    User: Union[bool, 'UserArgsFromProductSaleRecursive4']


class UserOnCabinetIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class UserOnCabinetArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyUserOnCabinetArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromProductSale(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive1']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive1']


class WorkerOnServiceIncludeFromProductSaleRecursive1(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive2']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive2']


class WorkerOnServiceIncludeFromProductSaleRecursive2(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive3']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive3']


class WorkerOnServiceIncludeFromProductSaleRecursive3(TypedDict, total=False):
    """Relational arguments for ProductSale"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive4']
    Service: Union[bool, 'ServiceArgsFromProductSaleRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromProductSaleRecursive4']


class WorkerOnServiceIncludeFromProductSaleRecursive4(TypedDict, total=False):
    """Relational arguments for ProductSale"""

    

class WorkerOnServiceArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    
    

class FindManyWorkerOnServiceArgsFromProductSale(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromProductSaleRecursive1(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromProductSaleRecursive2(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromProductSaleRecursive3(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromProductSaleRecursive4(TypedDict, total=False):
    """Arguments for ProductSale"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyProductSaleArgs = FindManyProductSaleArgsFromProductSale
FindFirstProductSaleArgs = FindManyProductSaleArgsFromProductSale


    

class ProductSaleWhereInput(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    productId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    price: Union[_float, 'types.FloatFilter']
    totalPrice: Union[_float, 'types.FloatFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['ProductSaleWhereInputRecursive1', List['ProductSaleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProductSaleWhereInputRecursive1']
    OR: List['ProductSaleWhereInputRecursive1']
    NOT: List['ProductSaleWhereInputRecursive1']


class ProductSaleWhereInputRecursive1(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    productId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    price: Union[_float, 'types.FloatFilter']
    totalPrice: Union[_float, 'types.FloatFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['ProductSaleWhereInputRecursive2', List['ProductSaleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProductSaleWhereInputRecursive2']
    OR: List['ProductSaleWhereInputRecursive2']
    NOT: List['ProductSaleWhereInputRecursive2']


class ProductSaleWhereInputRecursive2(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    productId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    price: Union[_float, 'types.FloatFilter']
    totalPrice: Union[_float, 'types.FloatFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['ProductSaleWhereInputRecursive3', List['ProductSaleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProductSaleWhereInputRecursive3']
    OR: List['ProductSaleWhereInputRecursive3']
    NOT: List['ProductSaleWhereInputRecursive3']


class ProductSaleWhereInputRecursive3(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    productId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    price: Union[_float, 'types.FloatFilter']
    totalPrice: Union[_float, 'types.FloatFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Product: 'ProductRelationFilter'

    # should be noted that AND and NOT should be Union['ProductSaleWhereInputRecursive4', List['ProductSaleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProductSaleWhereInputRecursive4']
    OR: List['ProductSaleWhereInputRecursive4']
    NOT: List['ProductSaleWhereInputRecursive4']


class ProductSaleWhereInputRecursive4(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    productId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    price: Union[_float, 'types.FloatFilter']
    totalPrice: Union[_float, 'types.FloatFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    Client: 'ClientRelationFilter'
    Product: 'ProductRelationFilter'



# aggregate ProductSale types


    

class ProductSaleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductSaleScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProductSaleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProductSaleScalarWhereWithAggregatesInputRecursive1']


class ProductSaleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductSaleScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProductSaleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProductSaleScalarWhereWithAggregatesInputRecursive2']


class ProductSaleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductSaleScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProductSaleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProductSaleScalarWhereWithAggregatesInputRecursive3']


class ProductSaleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ProductSaleScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProductSaleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProductSaleScalarWhereWithAggregatesInputRecursive4']


class ProductSaleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ProductSale arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    productId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    saleDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']



class ProductSaleGroupByOutput(TypedDict, total=False):
    id: _str
    productId: _str
    clientId: _str
    quantity: _int
    price: _float
    totalPrice: _float
    saleDate: datetime.datetime
    creatorId: _str
    _sum: 'ProductSaleSumAggregateOutput'
    _avg: 'ProductSaleAvgAggregateOutput'
    _min: 'ProductSaleMinAggregateOutput'
    _max: 'ProductSaleMaxAggregateOutput'
    _count: 'ProductSaleCountAggregateOutput'


class ProductSaleAvgAggregateOutput(TypedDict, total=False):
    """ProductSale output for aggregating averages"""
    quantity: float
    price: float
    totalPrice: float


class ProductSaleSumAggregateOutput(TypedDict, total=False):
    """ProductSale output for aggregating sums"""
    quantity: _int
    price: _float
    totalPrice: _float


class ProductSaleScalarAggregateOutput(TypedDict, total=False):
    """ProductSale output including scalar fields"""
    id: _str
    productId: _str
    clientId: _str
    quantity: _int
    price: _float
    totalPrice: _float
    saleDate: datetime.datetime
    creatorId: _str


ProductSaleMinAggregateOutput = ProductSaleScalarAggregateOutput
ProductSaleMaxAggregateOutput = ProductSaleScalarAggregateOutput


class ProductSaleMaxAggregateInput(TypedDict, total=False):
    """ProductSale input for aggregating by max"""
    id: bool
    productId: bool
    clientId: bool
    quantity: bool
    price: bool
    totalPrice: bool
    saleDate: bool
    creatorId: bool


class ProductSaleMinAggregateInput(TypedDict, total=False):
    """ProductSale input for aggregating by min"""
    id: bool
    productId: bool
    clientId: bool
    quantity: bool
    price: bool
    totalPrice: bool
    saleDate: bool
    creatorId: bool


class ProductSaleNumberAggregateInput(TypedDict, total=False):
    """ProductSale input for aggregating numbers"""
    quantity: bool
    price: bool
    totalPrice: bool


ProductSaleAvgAggregateInput = ProductSaleNumberAggregateInput
ProductSaleSumAggregateInput = ProductSaleNumberAggregateInput


ProductSaleCountAggregateInput = TypedDict(
    'ProductSaleCountAggregateInput',
    {
        'id': bool,
        'productId': bool,
        'clientId': bool,
        'quantity': bool,
        'price': bool,
        'totalPrice': bool,
        'saleDate': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

ProductSaleCountAggregateOutput = TypedDict(
    'ProductSaleCountAggregateOutput',
    {
        'id': int,
        'productId': int,
        'clientId': int,
        'quantity': int,
        'price': int,
        'totalPrice': int,
        'saleDate': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


ProductSaleKeys = Literal[
    'id',
    'productId',
    'clientId',
    'quantity',
    'price',
    'totalPrice',
    'saleDate',
    'creatorId',
    'Client',
    'Product',
]
ProductSaleScalarFieldKeys = Literal[
    'id',
    'productId',
    'clientId',
    'quantity',
    'price',
    'totalPrice',
    'saleDate',
    'creatorId',
]
ProductSaleScalarFieldKeysT = TypeVar('ProductSaleScalarFieldKeysT', bound=ProductSaleScalarFieldKeys)

ProductSaleRelationalFieldKeys = Literal[
        'Client',
        'Product',
    ]

# Review types

class ReviewOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Review create method"""
    serviceId: _str
    clientId: _str
    comment: Optional[_str]
    ClientHistory: 'ClientHistoryCreateManyNestedWithoutRelationsInput'
    Client: 'ClientCreateNestedWithoutRelationsInput'
    Service: 'ServiceCreateNestedWithoutRelationsInput'


class ReviewCreateInput(ReviewOptionalCreateInput):
    """Required arguments to the Review create method"""
    id: _str
    grade: 'enums.EGrade'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ReviewOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Review create method, without relations"""
    serviceId: _str
    clientId: _str
    comment: Optional[_str]


class ReviewCreateWithoutRelationsInput(ReviewOptionalCreateWithoutRelationsInput):
    """Required arguments to the Review create method, without relations"""
    id: _str
    grade: 'enums.EGrade'

class ReviewConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ReviewCreateWithoutRelationsInput'
    where: 'ReviewWhereUniqueInput'

class ReviewCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ReviewCreateWithoutRelationsInput'
    connect: 'ReviewWhereUniqueInput'
    connect_or_create: 'ReviewConnectOrCreateWithoutRelationsInput'


class ReviewCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ReviewCreateWithoutRelationsInput', List['ReviewCreateWithoutRelationsInput']]
    connect: Union['ReviewWhereUniqueInput', List['ReviewWhereUniqueInput']]
    connect_or_create: Union['ReviewConnectOrCreateWithoutRelationsInput', List['ReviewConnectOrCreateWithoutRelationsInput']]

_ReviewWhereUnique_id_Input = TypedDict(
    '_ReviewWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ReviewWhereUniqueInput = _ReviewWhereUnique_id_Input


class ReviewUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    comment: Optional[_str]
    grade: 'enums.EGrade'
    ClientHistory: 'ClientHistoryUpdateManyWithoutRelationsInput'
    Client: 'ClientUpdateOneWithoutRelationsInput'
    Service: 'ServiceUpdateOneWithoutRelationsInput'


class ReviewUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    comment: Optional[_str]
    grade: 'enums.EGrade'


class ReviewUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ReviewCreateWithoutRelationsInput']
    connect: List['ReviewWhereUniqueInput']
    connect_or_create: List['ReviewConnectOrCreateWithoutRelationsInput']
    set: List['ReviewWhereUniqueInput']
    disconnect: List['ReviewWhereUniqueInput']
    delete: List['ReviewWhereUniqueInput']

    # TODO
    # update: List['ReviewUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ReviewUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ReviewScalarWhereInput']
    # upsert: List['ReviewUpserteWithWhereUniqueWithoutRelationsInput']


class ReviewUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ReviewCreateWithoutRelationsInput'
    connect: 'ReviewWhereUniqueInput'
    connect_or_create: 'ReviewConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ReviewUpdateInput'
    # upsert: 'ReviewUpsertWithoutRelationsInput'


class ReviewUpsertInput(TypedDict):
    create: 'ReviewCreateInput'
    update: 'ReviewUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Review_id_OrderByInput = TypedDict(
    '_Review_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Review_serviceId_OrderByInput = TypedDict(
    '_Review_serviceId_OrderByInput',
    {
        'serviceId': 'SortOrder',
    },
    total=True
)

_Review_clientId_OrderByInput = TypedDict(
    '_Review_clientId_OrderByInput',
    {
        'clientId': 'SortOrder',
    },
    total=True
)

_Review_comment_OrderByInput = TypedDict(
    '_Review_comment_OrderByInput',
    {
        'comment': 'SortOrder',
    },
    total=True
)

_Review_grade_OrderByInput = TypedDict(
    '_Review_grade_OrderByInput',
    {
        'grade': 'SortOrder',
    },
    total=True
)

_Review_RelevanceInner = TypedDict(
    '_Review_RelevanceInner',
    {
        'fields': 'List[ReviewScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Review_RelevanceOrderByInput = TypedDict(
    '_Review_RelevanceOrderByInput',
    {
        '_relevance': '_Review_RelevanceInner',
    },
    total=True
)

ReviewOrderByInput = Union[
    '_Review_id_OrderByInput',
    '_Review_serviceId_OrderByInput',
    '_Review_clientId_OrderByInput',
    '_Review_comment_OrderByInput',
    '_Review_grade_OrderByInput',
    '_Review_RelevanceOrderByInput',
]



# recursive Review types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ReviewRelationFilter = TypedDict(
    'ReviewRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ReviewListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ReviewInclude(TypedDict, total=False):
    """Review relational arguments"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReview']
    Client: Union[bool, 'ClientArgsFromReview']
    Service: Union[bool, 'ServiceArgsFromReview']


    

class CabinetIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Office: Union[bool, 'OfficeArgsFromReviewRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive1']


class CabinetIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Office: Union[bool, 'OfficeArgsFromReviewRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive2']


class CabinetIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Office: Union[bool, 'OfficeArgsFromReviewRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive3']


class CabinetIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Office: Union[bool, 'OfficeArgsFromReviewRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive4']


class CabinetIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class CabinetArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyCabinetArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive1']


class ClientIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive2']


class ClientIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive3']


class ClientIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive4']


class ClientIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ClientArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyClientArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive1']
    Review: Union[bool, 'ReviewArgsFromReviewRecursive1']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive1']


class ClientHistoryIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive2']
    Review: Union[bool, 'ReviewArgsFromReviewRecursive2']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive2']


class ClientHistoryIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive3']
    Review: Union[bool, 'ReviewArgsFromReviewRecursive3']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive3']


class ClientHistoryIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive4']
    Review: Union[bool, 'ReviewArgsFromReviewRecursive4']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive4']


class ClientHistoryIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ClientHistoryArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyClientHistoryArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive1']


class DepartmentIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive2']


class DepartmentIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive3']


class DepartmentIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive4']


class DepartmentIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class DepartmentArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyDepartmentArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Department: Union[bool, 'DepartmentArgsFromReviewRecursive1']
    User: Union[bool, 'UserArgsFromReviewRecursive1']


class DepartmentUserIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Department: Union[bool, 'DepartmentArgsFromReviewRecursive2']
    User: Union[bool, 'UserArgsFromReviewRecursive2']


class DepartmentUserIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Department: Union[bool, 'DepartmentArgsFromReviewRecursive3']
    User: Union[bool, 'UserArgsFromReviewRecursive3']


class DepartmentUserIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Department: Union[bool, 'DepartmentArgsFromReviewRecursive4']
    User: Union[bool, 'UserArgsFromReviewRecursive4']


class DepartmentUserIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class DepartmentUserArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyDepartmentUserArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromReviewRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive1']


class OfficeIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromReviewRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive2']


class OfficeIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromReviewRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive3']


class OfficeIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromReviewRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive4']


class OfficeIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class OfficeArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyOfficeArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""


class OpportunityIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""


class OpportunityIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""


class OpportunityIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""


class OpportunityIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class OpportunityArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyOpportunityArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""


class PositionIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""


class PositionIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""


class PositionIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""


class PositionIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class PositionArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyPositionArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'UserArgsFromReviewRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive1']


class ProductIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'UserArgsFromReviewRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive2']


class ProductIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'UserArgsFromReviewRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive3']


class ProductIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'UserArgsFromReviewRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromReviewRecursive4']


class ProductIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ProductArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyProductArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive1']
    Product: Union[bool, 'ProductArgsFromReviewRecursive1']


class ProductSaleIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive2']
    Product: Union[bool, 'ProductArgsFromReviewRecursive2']


class ProductSaleIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive3']
    Product: Union[bool, 'ProductArgsFromReviewRecursive3']


class ProductSaleIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive4']
    Product: Union[bool, 'ProductArgsFromReviewRecursive4']


class ProductSaleIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ProductSaleArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyProductSaleArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive1']
    Client: Union[bool, 'ClientArgsFromReviewRecursive1']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive1']


class ReviewIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive2']
    Client: Union[bool, 'ClientArgsFromReviewRecursive2']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive2']


class ReviewIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive3']
    Client: Union[bool, 'ClientArgsFromReviewRecursive3']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive3']


class ReviewIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive4']
    Client: Union[bool, 'ClientArgsFromReviewRecursive4']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive4']


class ReviewIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ReviewArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyReviewArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'FindManyUserArgsFromReviewRecursive1']


class RoleIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'FindManyUserArgsFromReviewRecursive2']


class RoleIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'FindManyUserArgsFromReviewRecursive3']


class RoleIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    User: Union[bool, 'FindManyUserArgsFromReviewRecursive4']


class RoleIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class RoleArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyRoleArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive1']
    User: Union[bool, 'UserArgsFromReviewRecursive1']


class ScheduleIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive2']
    User: Union[bool, 'UserArgsFromReviewRecursive2']


class ScheduleIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive3']
    User: Union[bool, 'UserArgsFromReviewRecursive3']


class ScheduleIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive4']
    User: Union[bool, 'UserArgsFromReviewRecursive4']


class ScheduleIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ScheduleArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyScheduleArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromReviewRecursive1']


class ServiceIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromReviewRecursive2']


class ServiceIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromReviewRecursive3']


class ServiceIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromReviewRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromReviewRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromReviewRecursive4']


class ServiceIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ServiceArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyServiceArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Service: Union[bool, 'FindManyServiceArgsFromReviewRecursive1']


class ServiceCategoryIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Service: Union[bool, 'FindManyServiceArgsFromReviewRecursive2']


class ServiceCategoryIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Service: Union[bool, 'FindManyServiceArgsFromReviewRecursive3']


class ServiceCategoryIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Service: Union[bool, 'FindManyServiceArgsFromReviewRecursive4']


class ServiceCategoryIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ServiceCategoryArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyServiceCategoryArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive1']
    Office: Union[bool, 'OfficeArgsFromReviewRecursive1']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive1']
    User: Union[bool, 'UserArgsFromReviewRecursive1']


class ServiceRecordIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive2']
    Office: Union[bool, 'OfficeArgsFromReviewRecursive2']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive2']
    User: Union[bool, 'UserArgsFromReviewRecursive2']


class ServiceRecordIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive3']
    Office: Union[bool, 'OfficeArgsFromReviewRecursive3']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive3']
    User: Union[bool, 'UserArgsFromReviewRecursive3']


class ServiceRecordIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Client: Union[bool, 'ClientArgsFromReviewRecursive4']
    Office: Union[bool, 'OfficeArgsFromReviewRecursive4']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive4']
    User: Union[bool, 'UserArgsFromReviewRecursive4']


class ServiceRecordIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class ServiceRecordArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyServiceRecordArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromReviewRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive1']
    Role: Union[bool, 'RoleArgsFromReviewRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive1']


class UserIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromReviewRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive2']
    Role: Union[bool, 'RoleArgsFromReviewRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive2']


class UserIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromReviewRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive3']
    Role: Union[bool, 'RoleArgsFromReviewRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive3']


class UserIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromReviewRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromReviewRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromReviewRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromReviewRecursive4']
    Role: Union[bool, 'RoleArgsFromReviewRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromReviewRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromReviewRecursive4']


class UserIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class UserArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyUserArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive1']
    User: Union[bool, 'UserArgsFromReviewRecursive1']


class UserOnCabinetIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive2']
    User: Union[bool, 'UserArgsFromReviewRecursive2']


class UserOnCabinetIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive3']
    User: Union[bool, 'UserArgsFromReviewRecursive3']


class UserOnCabinetIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    Cabinet: Union[bool, 'CabinetArgsFromReviewRecursive4']
    User: Union[bool, 'UserArgsFromReviewRecursive4']


class UserOnCabinetIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class UserOnCabinetArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyUserOnCabinetArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromReview(TypedDict, total=False):
    """Relational arguments for Review"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromReviewRecursive1']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromReviewRecursive1']


class WorkerOnServiceIncludeFromReviewRecursive1(TypedDict, total=False):
    """Relational arguments for Review"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromReviewRecursive2']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromReviewRecursive2']


class WorkerOnServiceIncludeFromReviewRecursive2(TypedDict, total=False):
    """Relational arguments for Review"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromReviewRecursive3']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromReviewRecursive3']


class WorkerOnServiceIncludeFromReviewRecursive3(TypedDict, total=False):
    """Relational arguments for Review"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromReviewRecursive4']
    Service: Union[bool, 'ServiceArgsFromReviewRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromReviewRecursive4']


class WorkerOnServiceIncludeFromReviewRecursive4(TypedDict, total=False):
    """Relational arguments for Review"""

    

class WorkerOnServiceArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    
    

class FindManyWorkerOnServiceArgsFromReview(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromReviewRecursive1(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromReviewRecursive2(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromReviewRecursive3(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromReviewRecursive4(TypedDict, total=False):
    """Arguments for Review"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyReviewArgs = FindManyReviewArgsFromReview
FindFirstReviewArgs = FindManyReviewArgsFromReview


    

class ReviewWhereInput(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    comment: Union[None, _str, 'types.StringFilter']
    grade: 'enums.EGrade'
    ClientHistory: 'ClientHistoryListRelationFilter'
    Client: 'ClientRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ReviewWhereInputRecursive1', List['ReviewWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ReviewWhereInputRecursive1']
    OR: List['ReviewWhereInputRecursive1']
    NOT: List['ReviewWhereInputRecursive1']


class ReviewWhereInputRecursive1(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    comment: Union[None, _str, 'types.StringFilter']
    grade: 'enums.EGrade'
    ClientHistory: 'ClientHistoryListRelationFilter'
    Client: 'ClientRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ReviewWhereInputRecursive2', List['ReviewWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ReviewWhereInputRecursive2']
    OR: List['ReviewWhereInputRecursive2']
    NOT: List['ReviewWhereInputRecursive2']


class ReviewWhereInputRecursive2(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    comment: Union[None, _str, 'types.StringFilter']
    grade: 'enums.EGrade'
    ClientHistory: 'ClientHistoryListRelationFilter'
    Client: 'ClientRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ReviewWhereInputRecursive3', List['ReviewWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ReviewWhereInputRecursive3']
    OR: List['ReviewWhereInputRecursive3']
    NOT: List['ReviewWhereInputRecursive3']


class ReviewWhereInputRecursive3(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    comment: Union[None, _str, 'types.StringFilter']
    grade: 'enums.EGrade'
    ClientHistory: 'ClientHistoryListRelationFilter'
    Client: 'ClientRelationFilter'
    Service: 'ServiceRelationFilter'

    # should be noted that AND and NOT should be Union['ReviewWhereInputRecursive4', List['ReviewWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ReviewWhereInputRecursive4']
    OR: List['ReviewWhereInputRecursive4']
    NOT: List['ReviewWhereInputRecursive4']


class ReviewWhereInputRecursive4(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    serviceId: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    comment: Union[None, _str, 'types.StringFilter']
    grade: 'enums.EGrade'
    ClientHistory: 'ClientHistoryListRelationFilter'
    Client: 'ClientRelationFilter'
    Service: 'ServiceRelationFilter'



# aggregate Review types


    

class ReviewScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    comment: Union[_str, 'types.StringWithAggregatesFilter']
    grade: 'enums.EGrade'

    AND: List['ReviewScalarWhereWithAggregatesInputRecursive1']
    OR: List['ReviewScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ReviewScalarWhereWithAggregatesInputRecursive1']


class ReviewScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    comment: Union[_str, 'types.StringWithAggregatesFilter']
    grade: 'enums.EGrade'

    AND: List['ReviewScalarWhereWithAggregatesInputRecursive2']
    OR: List['ReviewScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ReviewScalarWhereWithAggregatesInputRecursive2']


class ReviewScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    comment: Union[_str, 'types.StringWithAggregatesFilter']
    grade: 'enums.EGrade'

    AND: List['ReviewScalarWhereWithAggregatesInputRecursive3']
    OR: List['ReviewScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ReviewScalarWhereWithAggregatesInputRecursive3']


class ReviewScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    comment: Union[_str, 'types.StringWithAggregatesFilter']
    grade: 'enums.EGrade'

    AND: List['ReviewScalarWhereWithAggregatesInputRecursive4']
    OR: List['ReviewScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ReviewScalarWhereWithAggregatesInputRecursive4']


class ReviewScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Review arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    comment: Union[_str, 'types.StringWithAggregatesFilter']
    grade: 'enums.EGrade'



class ReviewGroupByOutput(TypedDict, total=False):
    id: _str
    serviceId: _str
    clientId: _str
    comment: _str
    grade: 'enums.EGrade'
    _sum: 'ReviewSumAggregateOutput'
    _avg: 'ReviewAvgAggregateOutput'
    _min: 'ReviewMinAggregateOutput'
    _max: 'ReviewMaxAggregateOutput'
    _count: 'ReviewCountAggregateOutput'


class ReviewAvgAggregateOutput(TypedDict, total=False):
    """Review output for aggregating averages"""


class ReviewSumAggregateOutput(TypedDict, total=False):
    """Review output for aggregating sums"""


class ReviewScalarAggregateOutput(TypedDict, total=False):
    """Review output including scalar fields"""
    id: _str
    serviceId: _str
    clientId: _str
    comment: _str
    grade: 'enums.EGrade'


ReviewMinAggregateOutput = ReviewScalarAggregateOutput
ReviewMaxAggregateOutput = ReviewScalarAggregateOutput


class ReviewMaxAggregateInput(TypedDict, total=False):
    """Review input for aggregating by max"""
    id: bool
    serviceId: bool
    clientId: bool
    comment: bool
    grade: bool


class ReviewMinAggregateInput(TypedDict, total=False):
    """Review input for aggregating by min"""
    id: bool
    serviceId: bool
    clientId: bool
    comment: bool
    grade: bool


class ReviewNumberAggregateInput(TypedDict, total=False):
    """Review input for aggregating numbers"""


ReviewAvgAggregateInput = ReviewNumberAggregateInput
ReviewSumAggregateInput = ReviewNumberAggregateInput


ReviewCountAggregateInput = TypedDict(
    'ReviewCountAggregateInput',
    {
        'id': bool,
        'serviceId': bool,
        'clientId': bool,
        'comment': bool,
        'grade': bool,
        '_all': bool,
    },
    total=False,
)

ReviewCountAggregateOutput = TypedDict(
    'ReviewCountAggregateOutput',
    {
        'id': int,
        'serviceId': int,
        'clientId': int,
        'comment': int,
        'grade': int,
        '_all': int,
    },
    total=False,
)


ReviewKeys = Literal[
    'id',
    'serviceId',
    'clientId',
    'comment',
    'grade',
    'ClientHistory',
    'Client',
    'Service',
]
ReviewScalarFieldKeys = Literal[
    'id',
    'serviceId',
    'clientId',
    'comment',
    'grade',
]
ReviewScalarFieldKeysT = TypeVar('ReviewScalarFieldKeysT', bound=ReviewScalarFieldKeys)

ReviewRelationalFieldKeys = Literal[
        'ClientHistory',
        'Client',
        'Service',
    ]

# Role types

class RoleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Role create method"""
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    description: _str
    User: 'UserCreateManyNestedWithoutRelationsInput'


class RoleCreateInput(RoleOptionalCreateInput):
    """Required arguments to the Role create method"""
    id: _str
    name: _str
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RoleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Role create method, without relations"""
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    description: _str


class RoleCreateWithoutRelationsInput(RoleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Role create method, without relations"""
    id: _str
    name: _str
    updatedAt: datetime.datetime

class RoleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RoleCreateWithoutRelationsInput'
    where: 'RoleWhereUniqueInput'

class RoleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RoleCreateWithoutRelationsInput'
    connect: 'RoleWhereUniqueInput'
    connect_or_create: 'RoleConnectOrCreateWithoutRelationsInput'


class RoleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RoleCreateWithoutRelationsInput', List['RoleCreateWithoutRelationsInput']]
    connect: Union['RoleWhereUniqueInput', List['RoleWhereUniqueInput']]
    connect_or_create: Union['RoleConnectOrCreateWithoutRelationsInput', List['RoleConnectOrCreateWithoutRelationsInput']]

_RoleWhereUnique_id_Input = TypedDict(
    '_RoleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

RoleWhereUniqueInput = _RoleWhereUnique_id_Input


class RoleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    updatedAt: datetime.datetime
    description: _str
    User: 'UserUpdateManyWithoutRelationsInput'


class RoleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    updatedAt: datetime.datetime
    description: _str


class RoleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RoleCreateWithoutRelationsInput']
    connect: List['RoleWhereUniqueInput']
    connect_or_create: List['RoleConnectOrCreateWithoutRelationsInput']
    set: List['RoleWhereUniqueInput']
    disconnect: List['RoleWhereUniqueInput']
    delete: List['RoleWhereUniqueInput']

    # TODO
    # update: List['RoleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RoleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RoleScalarWhereInput']
    # upsert: List['RoleUpserteWithWhereUniqueWithoutRelationsInput']


class RoleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RoleCreateWithoutRelationsInput'
    connect: 'RoleWhereUniqueInput'
    connect_or_create: 'RoleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RoleUpdateInput'
    # upsert: 'RoleUpsertWithoutRelationsInput'


class RoleUpsertInput(TypedDict):
    create: 'RoleCreateInput'
    update: 'RoleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Role_id_OrderByInput = TypedDict(
    '_Role_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Role_name_OrderByInput = TypedDict(
    '_Role_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Role_createdAt_OrderByInput = TypedDict(
    '_Role_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Role_deletedAt_OrderByInput = TypedDict(
    '_Role_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Role_updatedAt_OrderByInput = TypedDict(
    '_Role_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Role_description_OrderByInput = TypedDict(
    '_Role_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Role_RelevanceInner = TypedDict(
    '_Role_RelevanceInner',
    {
        'fields': 'List[RoleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Role_RelevanceOrderByInput = TypedDict(
    '_Role_RelevanceOrderByInput',
    {
        '_relevance': '_Role_RelevanceInner',
    },
    total=True
)

RoleOrderByInput = Union[
    '_Role_id_OrderByInput',
    '_Role_name_OrderByInput',
    '_Role_createdAt_OrderByInput',
    '_Role_deletedAt_OrderByInput',
    '_Role_updatedAt_OrderByInput',
    '_Role_description_OrderByInput',
    '_Role_RelevanceOrderByInput',
]



# recursive Role types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RoleRelationFilter = TypedDict(
    'RoleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RoleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RoleInclude(TypedDict, total=False):
    """Role relational arguments"""
    User: Union[bool, 'FindManyUserArgsFromRole']


    

class CabinetIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Office: Union[bool, 'OfficeArgsFromRoleRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive1']


class CabinetIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Office: Union[bool, 'OfficeArgsFromRoleRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive2']


class CabinetIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Office: Union[bool, 'OfficeArgsFromRoleRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive3']


class CabinetIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Office: Union[bool, 'OfficeArgsFromRoleRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive4']


class CabinetIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class CabinetArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyCabinetArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive1']


class ClientIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive2']


class ClientIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive3']


class ClientIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive4']


class ClientIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ClientArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyClientArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive1']
    Review: Union[bool, 'ReviewArgsFromRoleRecursive1']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive1']


class ClientHistoryIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive2']
    Review: Union[bool, 'ReviewArgsFromRoleRecursive2']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive2']


class ClientHistoryIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive3']
    Review: Union[bool, 'ReviewArgsFromRoleRecursive3']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive3']


class ClientHistoryIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive4']
    Review: Union[bool, 'ReviewArgsFromRoleRecursive4']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive4']


class ClientHistoryIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ClientHistoryArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyClientHistoryArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive1']


class DepartmentIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive2']


class DepartmentIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive3']


class DepartmentIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive4']


class DepartmentIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class DepartmentArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyDepartmentArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Department: Union[bool, 'DepartmentArgsFromRoleRecursive1']
    User: Union[bool, 'UserArgsFromRoleRecursive1']


class DepartmentUserIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Department: Union[bool, 'DepartmentArgsFromRoleRecursive2']
    User: Union[bool, 'UserArgsFromRoleRecursive2']


class DepartmentUserIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Department: Union[bool, 'DepartmentArgsFromRoleRecursive3']
    User: Union[bool, 'UserArgsFromRoleRecursive3']


class DepartmentUserIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Department: Union[bool, 'DepartmentArgsFromRoleRecursive4']
    User: Union[bool, 'UserArgsFromRoleRecursive4']


class DepartmentUserIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class DepartmentUserArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyDepartmentUserArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromRoleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive1']


class OfficeIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromRoleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive2']


class OfficeIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromRoleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive3']


class OfficeIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromRoleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive4']


class OfficeIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class OfficeArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyOfficeArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""


class OpportunityIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""


class OpportunityIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""


class OpportunityIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""


class OpportunityIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class OpportunityArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyOpportunityArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""


class PositionIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""


class PositionIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""


class PositionIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""


class PositionIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class PositionArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyPositionArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'UserArgsFromRoleRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive1']


class ProductIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'UserArgsFromRoleRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive2']


class ProductIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'UserArgsFromRoleRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive3']


class ProductIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'UserArgsFromRoleRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromRoleRecursive4']


class ProductIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ProductArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyProductArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive1']
    Product: Union[bool, 'ProductArgsFromRoleRecursive1']


class ProductSaleIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive2']
    Product: Union[bool, 'ProductArgsFromRoleRecursive2']


class ProductSaleIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive3']
    Product: Union[bool, 'ProductArgsFromRoleRecursive3']


class ProductSaleIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive4']
    Product: Union[bool, 'ProductArgsFromRoleRecursive4']


class ProductSaleIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ProductSaleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyProductSaleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive1']
    Client: Union[bool, 'ClientArgsFromRoleRecursive1']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive1']


class ReviewIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive2']
    Client: Union[bool, 'ClientArgsFromRoleRecursive2']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive2']


class ReviewIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive3']
    Client: Union[bool, 'ClientArgsFromRoleRecursive3']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive3']


class ReviewIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive4']
    Client: Union[bool, 'ClientArgsFromRoleRecursive4']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive4']


class ReviewIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ReviewArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyReviewArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'FindManyUserArgsFromRoleRecursive1']


class RoleIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'FindManyUserArgsFromRoleRecursive2']


class RoleIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'FindManyUserArgsFromRoleRecursive3']


class RoleIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    User: Union[bool, 'FindManyUserArgsFromRoleRecursive4']


class RoleIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class RoleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyRoleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive1']
    User: Union[bool, 'UserArgsFromRoleRecursive1']


class ScheduleIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive2']
    User: Union[bool, 'UserArgsFromRoleRecursive2']


class ScheduleIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive3']
    User: Union[bool, 'UserArgsFromRoleRecursive3']


class ScheduleIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive4']
    User: Union[bool, 'UserArgsFromRoleRecursive4']


class ScheduleIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ScheduleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyScheduleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromRoleRecursive1']


class ServiceIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromRoleRecursive2']


class ServiceIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromRoleRecursive3']


class ServiceIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromRoleRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromRoleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromRoleRecursive4']


class ServiceIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ServiceArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyServiceArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Service: Union[bool, 'FindManyServiceArgsFromRoleRecursive1']


class ServiceCategoryIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Service: Union[bool, 'FindManyServiceArgsFromRoleRecursive2']


class ServiceCategoryIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Service: Union[bool, 'FindManyServiceArgsFromRoleRecursive3']


class ServiceCategoryIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Service: Union[bool, 'FindManyServiceArgsFromRoleRecursive4']


class ServiceCategoryIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ServiceCategoryArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyServiceCategoryArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive1']
    Office: Union[bool, 'OfficeArgsFromRoleRecursive1']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive1']
    User: Union[bool, 'UserArgsFromRoleRecursive1']


class ServiceRecordIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive2']
    Office: Union[bool, 'OfficeArgsFromRoleRecursive2']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive2']
    User: Union[bool, 'UserArgsFromRoleRecursive2']


class ServiceRecordIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive3']
    Office: Union[bool, 'OfficeArgsFromRoleRecursive3']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive3']
    User: Union[bool, 'UserArgsFromRoleRecursive3']


class ServiceRecordIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Client: Union[bool, 'ClientArgsFromRoleRecursive4']
    Office: Union[bool, 'OfficeArgsFromRoleRecursive4']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive4']
    User: Union[bool, 'UserArgsFromRoleRecursive4']


class ServiceRecordIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ServiceRecordArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyServiceRecordArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromRoleRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive1']
    Role: Union[bool, 'RoleArgsFromRoleRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive1']


class UserIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromRoleRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive2']
    Role: Union[bool, 'RoleArgsFromRoleRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive2']


class UserIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromRoleRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive3']
    Role: Union[bool, 'RoleArgsFromRoleRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive3']


class UserIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromRoleRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromRoleRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromRoleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromRoleRecursive4']
    Role: Union[bool, 'RoleArgsFromRoleRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromRoleRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromRoleRecursive4']


class UserIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class UserArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyUserArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive1']
    User: Union[bool, 'UserArgsFromRoleRecursive1']


class UserOnCabinetIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive2']
    User: Union[bool, 'UserArgsFromRoleRecursive2']


class UserOnCabinetIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive3']
    User: Union[bool, 'UserArgsFromRoleRecursive3']


class UserOnCabinetIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    Cabinet: Union[bool, 'CabinetArgsFromRoleRecursive4']
    User: Union[bool, 'UserArgsFromRoleRecursive4']


class UserOnCabinetIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class UserOnCabinetArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyUserOnCabinetArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromRoleRecursive1']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromRoleRecursive1']


class WorkerOnServiceIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromRoleRecursive2']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromRoleRecursive2']


class WorkerOnServiceIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromRoleRecursive3']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromRoleRecursive3']


class WorkerOnServiceIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromRoleRecursive4']
    Service: Union[bool, 'ServiceArgsFromRoleRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromRoleRecursive4']


class WorkerOnServiceIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class WorkerOnServiceArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyWorkerOnServiceArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyRoleArgs = FindManyRoleArgsFromRole
FindFirstRoleArgs = FindManyRoleArgsFromRole


    

class RoleWhereInput(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    description: Union[_str, 'types.StringFilter']
    User: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive1', List['RoleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive1']
    OR: List['RoleWhereInputRecursive1']
    NOT: List['RoleWhereInputRecursive1']


class RoleWhereInputRecursive1(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    description: Union[_str, 'types.StringFilter']
    User: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive2', List['RoleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive2']
    OR: List['RoleWhereInputRecursive2']
    NOT: List['RoleWhereInputRecursive2']


class RoleWhereInputRecursive2(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    description: Union[_str, 'types.StringFilter']
    User: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive3', List['RoleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive3']
    OR: List['RoleWhereInputRecursive3']
    NOT: List['RoleWhereInputRecursive3']


class RoleWhereInputRecursive3(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    description: Union[_str, 'types.StringFilter']
    User: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive4', List['RoleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive4']
    OR: List['RoleWhereInputRecursive4']
    NOT: List['RoleWhereInputRecursive4']


class RoleWhereInputRecursive4(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    description: Union[_str, 'types.StringFilter']
    User: 'UserListRelationFilter'



# aggregate Role types


    

class RoleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RoleScalarWhereWithAggregatesInputRecursive1']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive1']


class RoleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RoleScalarWhereWithAggregatesInputRecursive2']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive2']


class RoleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RoleScalarWhereWithAggregatesInputRecursive3']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive3']


class RoleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RoleScalarWhereWithAggregatesInputRecursive4']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive4']


class RoleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class RoleGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    createdAt: datetime.datetime
    deletedAt: datetime.datetime
    updatedAt: datetime.datetime
    description: _str
    _sum: 'RoleSumAggregateOutput'
    _avg: 'RoleAvgAggregateOutput'
    _min: 'RoleMinAggregateOutput'
    _max: 'RoleMaxAggregateOutput'
    _count: 'RoleCountAggregateOutput'


class RoleAvgAggregateOutput(TypedDict, total=False):
    """Role output for aggregating averages"""


class RoleSumAggregateOutput(TypedDict, total=False):
    """Role output for aggregating sums"""


class RoleScalarAggregateOutput(TypedDict, total=False):
    """Role output including scalar fields"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    deletedAt: datetime.datetime
    updatedAt: datetime.datetime
    description: _str


RoleMinAggregateOutput = RoleScalarAggregateOutput
RoleMaxAggregateOutput = RoleScalarAggregateOutput


class RoleMaxAggregateInput(TypedDict, total=False):
    """Role input for aggregating by max"""
    id: bool
    name: bool
    createdAt: bool
    deletedAt: bool
    updatedAt: bool
    description: bool


class RoleMinAggregateInput(TypedDict, total=False):
    """Role input for aggregating by min"""
    id: bool
    name: bool
    createdAt: bool
    deletedAt: bool
    updatedAt: bool
    description: bool


class RoleNumberAggregateInput(TypedDict, total=False):
    """Role input for aggregating numbers"""


RoleAvgAggregateInput = RoleNumberAggregateInput
RoleSumAggregateInput = RoleNumberAggregateInput


RoleCountAggregateInput = TypedDict(
    'RoleCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'createdAt': bool,
        'deletedAt': bool,
        'updatedAt': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

RoleCountAggregateOutput = TypedDict(
    'RoleCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'createdAt': int,
        'deletedAt': int,
        'updatedAt': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


RoleKeys = Literal[
    'id',
    'name',
    'createdAt',
    'deletedAt',
    'updatedAt',
    'description',
    'User',
]
RoleScalarFieldKeys = Literal[
    'id',
    'name',
    'createdAt',
    'deletedAt',
    'updatedAt',
    'description',
]
RoleScalarFieldKeysT = TypeVar('RoleScalarFieldKeysT', bound=RoleScalarFieldKeys)

RoleRelationalFieldKeys = Literal[
        'User',
    ]

# Schedule types

class ScheduleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Schedule create method"""
    userId: _str
    cabinetId: _str
    Cabinet: 'CabinetCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class ScheduleCreateInput(ScheduleOptionalCreateInput):
    """Required arguments to the Schedule create method"""
    id: _str
    date: datetime.datetime
    startTime: datetime.datetime
    endTime: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ScheduleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Schedule create method, without relations"""
    userId: _str
    cabinetId: _str


class ScheduleCreateWithoutRelationsInput(ScheduleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Schedule create method, without relations"""
    id: _str
    date: datetime.datetime
    startTime: datetime.datetime
    endTime: datetime.datetime

class ScheduleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ScheduleCreateWithoutRelationsInput'
    where: 'ScheduleWhereUniqueInput'

class ScheduleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ScheduleCreateWithoutRelationsInput'
    connect: 'ScheduleWhereUniqueInput'
    connect_or_create: 'ScheduleConnectOrCreateWithoutRelationsInput'


class ScheduleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ScheduleCreateWithoutRelationsInput', List['ScheduleCreateWithoutRelationsInput']]
    connect: Union['ScheduleWhereUniqueInput', List['ScheduleWhereUniqueInput']]
    connect_or_create: Union['ScheduleConnectOrCreateWithoutRelationsInput', List['ScheduleConnectOrCreateWithoutRelationsInput']]

_ScheduleWhereUnique_id_Input = TypedDict(
    '_ScheduleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ScheduleWhereUniqueInput = _ScheduleWhereUnique_id_Input


class ScheduleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    date: datetime.datetime
    startTime: datetime.datetime
    endTime: datetime.datetime
    Cabinet: 'CabinetUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class ScheduleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    date: datetime.datetime
    startTime: datetime.datetime
    endTime: datetime.datetime


class ScheduleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ScheduleCreateWithoutRelationsInput']
    connect: List['ScheduleWhereUniqueInput']
    connect_or_create: List['ScheduleConnectOrCreateWithoutRelationsInput']
    set: List['ScheduleWhereUniqueInput']
    disconnect: List['ScheduleWhereUniqueInput']
    delete: List['ScheduleWhereUniqueInput']

    # TODO
    # update: List['ScheduleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ScheduleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ScheduleScalarWhereInput']
    # upsert: List['ScheduleUpserteWithWhereUniqueWithoutRelationsInput']


class ScheduleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ScheduleCreateWithoutRelationsInput'
    connect: 'ScheduleWhereUniqueInput'
    connect_or_create: 'ScheduleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ScheduleUpdateInput'
    # upsert: 'ScheduleUpsertWithoutRelationsInput'


class ScheduleUpsertInput(TypedDict):
    create: 'ScheduleCreateInput'
    update: 'ScheduleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Schedule_id_OrderByInput = TypedDict(
    '_Schedule_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Schedule_date_OrderByInput = TypedDict(
    '_Schedule_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_Schedule_startTime_OrderByInput = TypedDict(
    '_Schedule_startTime_OrderByInput',
    {
        'startTime': 'SortOrder',
    },
    total=True
)

_Schedule_endTime_OrderByInput = TypedDict(
    '_Schedule_endTime_OrderByInput',
    {
        'endTime': 'SortOrder',
    },
    total=True
)

_Schedule_userId_OrderByInput = TypedDict(
    '_Schedule_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Schedule_cabinetId_OrderByInput = TypedDict(
    '_Schedule_cabinetId_OrderByInput',
    {
        'cabinetId': 'SortOrder',
    },
    total=True
)

_Schedule_RelevanceInner = TypedDict(
    '_Schedule_RelevanceInner',
    {
        'fields': 'List[ScheduleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Schedule_RelevanceOrderByInput = TypedDict(
    '_Schedule_RelevanceOrderByInput',
    {
        '_relevance': '_Schedule_RelevanceInner',
    },
    total=True
)

ScheduleOrderByInput = Union[
    '_Schedule_id_OrderByInput',
    '_Schedule_date_OrderByInput',
    '_Schedule_startTime_OrderByInput',
    '_Schedule_endTime_OrderByInput',
    '_Schedule_userId_OrderByInput',
    '_Schedule_cabinetId_OrderByInput',
    '_Schedule_RelevanceOrderByInput',
]



# recursive Schedule types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ScheduleRelationFilter = TypedDict(
    'ScheduleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ScheduleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ScheduleInclude(TypedDict, total=False):
    """Schedule relational arguments"""
    Cabinet: Union[bool, 'CabinetArgsFromSchedule']
    User: Union[bool, 'UserArgsFromSchedule']


    

class CabinetIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive1']


class CabinetIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive2']


class CabinetIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive3']


class CabinetIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive4']


class CabinetIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class CabinetArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyCabinetArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive1']


class ClientIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive2']


class ClientIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive3']


class ClientIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive4']


class ClientIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ClientArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyClientArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive1']
    Review: Union[bool, 'ReviewArgsFromScheduleRecursive1']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive1']


class ClientHistoryIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive2']
    Review: Union[bool, 'ReviewArgsFromScheduleRecursive2']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive2']


class ClientHistoryIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive3']
    Review: Union[bool, 'ReviewArgsFromScheduleRecursive3']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive3']


class ClientHistoryIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive4']
    Review: Union[bool, 'ReviewArgsFromScheduleRecursive4']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive4']


class ClientHistoryIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ClientHistoryArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyClientHistoryArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive1']


class DepartmentIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive2']


class DepartmentIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive3']


class DepartmentIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive4']


class DepartmentIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class DepartmentArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyDepartmentArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Department: Union[bool, 'DepartmentArgsFromScheduleRecursive1']
    User: Union[bool, 'UserArgsFromScheduleRecursive1']


class DepartmentUserIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Department: Union[bool, 'DepartmentArgsFromScheduleRecursive2']
    User: Union[bool, 'UserArgsFromScheduleRecursive2']


class DepartmentUserIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Department: Union[bool, 'DepartmentArgsFromScheduleRecursive3']
    User: Union[bool, 'UserArgsFromScheduleRecursive3']


class DepartmentUserIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Department: Union[bool, 'DepartmentArgsFromScheduleRecursive4']
    User: Union[bool, 'UserArgsFromScheduleRecursive4']


class DepartmentUserIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class DepartmentUserArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyDepartmentUserArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromScheduleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive1']


class OfficeIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromScheduleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive2']


class OfficeIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromScheduleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive3']


class OfficeIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromScheduleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive4']


class OfficeIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class OfficeArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyOfficeArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""


class OpportunityIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""


class OpportunityIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""


class OpportunityIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""


class OpportunityIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class OpportunityArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyOpportunityArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""


class PositionIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""


class PositionIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""


class PositionIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""


class PositionIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class PositionArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyPositionArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'UserArgsFromScheduleRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive1']


class ProductIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'UserArgsFromScheduleRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive2']


class ProductIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'UserArgsFromScheduleRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive3']


class ProductIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'UserArgsFromScheduleRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromScheduleRecursive4']


class ProductIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ProductArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyProductArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive1']
    Product: Union[bool, 'ProductArgsFromScheduleRecursive1']


class ProductSaleIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive2']
    Product: Union[bool, 'ProductArgsFromScheduleRecursive2']


class ProductSaleIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive3']
    Product: Union[bool, 'ProductArgsFromScheduleRecursive3']


class ProductSaleIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive4']
    Product: Union[bool, 'ProductArgsFromScheduleRecursive4']


class ProductSaleIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ProductSaleArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyProductSaleArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive1']
    Client: Union[bool, 'ClientArgsFromScheduleRecursive1']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive1']


class ReviewIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive2']
    Client: Union[bool, 'ClientArgsFromScheduleRecursive2']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive2']


class ReviewIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive3']
    Client: Union[bool, 'ClientArgsFromScheduleRecursive3']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive3']


class ReviewIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive4']
    Client: Union[bool, 'ClientArgsFromScheduleRecursive4']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive4']


class ReviewIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ReviewArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyReviewArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'FindManyUserArgsFromScheduleRecursive1']


class RoleIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'FindManyUserArgsFromScheduleRecursive2']


class RoleIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'FindManyUserArgsFromScheduleRecursive3']


class RoleIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User: Union[bool, 'FindManyUserArgsFromScheduleRecursive4']


class RoleIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class RoleArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyRoleArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive1']
    User: Union[bool, 'UserArgsFromScheduleRecursive1']


class ScheduleIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive2']
    User: Union[bool, 'UserArgsFromScheduleRecursive2']


class ScheduleIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive3']
    User: Union[bool, 'UserArgsFromScheduleRecursive3']


class ScheduleIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive4']
    User: Union[bool, 'UserArgsFromScheduleRecursive4']


class ScheduleIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ScheduleArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyScheduleArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromScheduleRecursive1']


class ServiceIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromScheduleRecursive2']


class ServiceIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromScheduleRecursive3']


class ServiceIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromScheduleRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromScheduleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromScheduleRecursive4']


class ServiceIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ServiceArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyServiceArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Service: Union[bool, 'FindManyServiceArgsFromScheduleRecursive1']


class ServiceCategoryIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Service: Union[bool, 'FindManyServiceArgsFromScheduleRecursive2']


class ServiceCategoryIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Service: Union[bool, 'FindManyServiceArgsFromScheduleRecursive3']


class ServiceCategoryIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Service: Union[bool, 'FindManyServiceArgsFromScheduleRecursive4']


class ServiceCategoryIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ServiceCategoryArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyServiceCategoryArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive1']
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive1']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive1']
    User: Union[bool, 'UserArgsFromScheduleRecursive1']


class ServiceRecordIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive2']
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive2']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive2']
    User: Union[bool, 'UserArgsFromScheduleRecursive2']


class ServiceRecordIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive3']
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive3']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive3']
    User: Union[bool, 'UserArgsFromScheduleRecursive3']


class ServiceRecordIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Client: Union[bool, 'ClientArgsFromScheduleRecursive4']
    Office: Union[bool, 'OfficeArgsFromScheduleRecursive4']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive4']
    User: Union[bool, 'UserArgsFromScheduleRecursive4']


class ServiceRecordIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class ServiceRecordArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyServiceRecordArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromScheduleRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive1']
    Role: Union[bool, 'RoleArgsFromScheduleRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive1']


class UserIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromScheduleRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive2']
    Role: Union[bool, 'RoleArgsFromScheduleRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive2']


class UserIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromScheduleRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive3']
    Role: Union[bool, 'RoleArgsFromScheduleRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive3']


class UserIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromScheduleRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromScheduleRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromScheduleRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromScheduleRecursive4']
    Role: Union[bool, 'RoleArgsFromScheduleRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromScheduleRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromScheduleRecursive4']


class UserIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class UserArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyUserArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive1']
    User: Union[bool, 'UserArgsFromScheduleRecursive1']


class UserOnCabinetIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive2']
    User: Union[bool, 'UserArgsFromScheduleRecursive2']


class UserOnCabinetIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive3']
    User: Union[bool, 'UserArgsFromScheduleRecursive3']


class UserOnCabinetIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    Cabinet: Union[bool, 'CabinetArgsFromScheduleRecursive4']
    User: Union[bool, 'UserArgsFromScheduleRecursive4']


class UserOnCabinetIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class UserOnCabinetArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyUserOnCabinetArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromSchedule(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromScheduleRecursive1']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromScheduleRecursive1']


class WorkerOnServiceIncludeFromScheduleRecursive1(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromScheduleRecursive2']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromScheduleRecursive2']


class WorkerOnServiceIncludeFromScheduleRecursive2(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromScheduleRecursive3']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromScheduleRecursive3']


class WorkerOnServiceIncludeFromScheduleRecursive3(TypedDict, total=False):
    """Relational arguments for Schedule"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromScheduleRecursive4']
    Service: Union[bool, 'ServiceArgsFromScheduleRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromScheduleRecursive4']


class WorkerOnServiceIncludeFromScheduleRecursive4(TypedDict, total=False):
    """Relational arguments for Schedule"""

    

class WorkerOnServiceArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    
    

class FindManyWorkerOnServiceArgsFromSchedule(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromScheduleRecursive1(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromScheduleRecursive2(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromScheduleRecursive3(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromScheduleRecursive4(TypedDict, total=False):
    """Arguments for Schedule"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyScheduleArgs = FindManyScheduleArgsFromSchedule
FindFirstScheduleArgs = FindManyScheduleArgsFromSchedule


    

class ScheduleWhereInput(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    cabinetId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ScheduleWhereInputRecursive1', List['ScheduleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ScheduleWhereInputRecursive1']
    OR: List['ScheduleWhereInputRecursive1']
    NOT: List['ScheduleWhereInputRecursive1']


class ScheduleWhereInputRecursive1(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    cabinetId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ScheduleWhereInputRecursive2', List['ScheduleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ScheduleWhereInputRecursive2']
    OR: List['ScheduleWhereInputRecursive2']
    NOT: List['ScheduleWhereInputRecursive2']


class ScheduleWhereInputRecursive2(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    cabinetId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ScheduleWhereInputRecursive3', List['ScheduleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ScheduleWhereInputRecursive3']
    OR: List['ScheduleWhereInputRecursive3']
    NOT: List['ScheduleWhereInputRecursive3']


class ScheduleWhereInputRecursive3(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    cabinetId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ScheduleWhereInputRecursive4', List['ScheduleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ScheduleWhereInputRecursive4']
    OR: List['ScheduleWhereInputRecursive4']
    NOT: List['ScheduleWhereInputRecursive4']


class ScheduleWhereInputRecursive4(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    cabinetId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'



# aggregate Schedule types


    

class ScheduleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ScheduleScalarWhereWithAggregatesInputRecursive1']
    OR: List['ScheduleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ScheduleScalarWhereWithAggregatesInputRecursive1']


class ScheduleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ScheduleScalarWhereWithAggregatesInputRecursive2']
    OR: List['ScheduleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ScheduleScalarWhereWithAggregatesInputRecursive2']


class ScheduleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ScheduleScalarWhereWithAggregatesInputRecursive3']
    OR: List['ScheduleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ScheduleScalarWhereWithAggregatesInputRecursive3']


class ScheduleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ScheduleScalarWhereWithAggregatesInputRecursive4']
    OR: List['ScheduleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ScheduleScalarWhereWithAggregatesInputRecursive4']


class ScheduleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Schedule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']



class ScheduleGroupByOutput(TypedDict, total=False):
    id: _str
    date: datetime.datetime
    startTime: datetime.datetime
    endTime: datetime.datetime
    userId: _str
    cabinetId: _str
    _sum: 'ScheduleSumAggregateOutput'
    _avg: 'ScheduleAvgAggregateOutput'
    _min: 'ScheduleMinAggregateOutput'
    _max: 'ScheduleMaxAggregateOutput'
    _count: 'ScheduleCountAggregateOutput'


class ScheduleAvgAggregateOutput(TypedDict, total=False):
    """Schedule output for aggregating averages"""


class ScheduleSumAggregateOutput(TypedDict, total=False):
    """Schedule output for aggregating sums"""


class ScheduleScalarAggregateOutput(TypedDict, total=False):
    """Schedule output including scalar fields"""
    id: _str
    date: datetime.datetime
    startTime: datetime.datetime
    endTime: datetime.datetime
    userId: _str
    cabinetId: _str


ScheduleMinAggregateOutput = ScheduleScalarAggregateOutput
ScheduleMaxAggregateOutput = ScheduleScalarAggregateOutput


class ScheduleMaxAggregateInput(TypedDict, total=False):
    """Schedule input for aggregating by max"""
    id: bool
    date: bool
    startTime: bool
    endTime: bool
    userId: bool
    cabinetId: bool


class ScheduleMinAggregateInput(TypedDict, total=False):
    """Schedule input for aggregating by min"""
    id: bool
    date: bool
    startTime: bool
    endTime: bool
    userId: bool
    cabinetId: bool


class ScheduleNumberAggregateInput(TypedDict, total=False):
    """Schedule input for aggregating numbers"""


ScheduleAvgAggregateInput = ScheduleNumberAggregateInput
ScheduleSumAggregateInput = ScheduleNumberAggregateInput


ScheduleCountAggregateInput = TypedDict(
    'ScheduleCountAggregateInput',
    {
        'id': bool,
        'date': bool,
        'startTime': bool,
        'endTime': bool,
        'userId': bool,
        'cabinetId': bool,
        '_all': bool,
    },
    total=False,
)

ScheduleCountAggregateOutput = TypedDict(
    'ScheduleCountAggregateOutput',
    {
        'id': int,
        'date': int,
        'startTime': int,
        'endTime': int,
        'userId': int,
        'cabinetId': int,
        '_all': int,
    },
    total=False,
)


ScheduleKeys = Literal[
    'id',
    'date',
    'startTime',
    'endTime',
    'userId',
    'cabinetId',
    'Cabinet',
    'User',
]
ScheduleScalarFieldKeys = Literal[
    'id',
    'date',
    'startTime',
    'endTime',
    'userId',
    'cabinetId',
]
ScheduleScalarFieldKeysT = TypeVar('ScheduleScalarFieldKeysT', bound=ScheduleScalarFieldKeys)

ScheduleRelationalFieldKeys = Literal[
        'Cabinet',
        'User',
    ]

# Service types

class ServiceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Service create method"""
    description: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    ClientHistory: 'ClientHistoryCreateManyNestedWithoutRelationsInput'
    Review: 'ReviewCreateManyNestedWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordCreateManyNestedWithoutRelationsInput'
    WorkerOnService: 'WorkerOnServiceCreateManyNestedWithoutRelationsInput'
    ServiceCategory: 'ServiceCategoryCreateManyNestedWithoutRelationsInput'


class ServiceCreateInput(ServiceOptionalCreateInput):
    """Required arguments to the Service create method"""
    id: _str
    name: _str
    price: _int
    duration: _float
    updatedAt: datetime.datetime
    creatorId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ServiceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Service create method, without relations"""
    description: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class ServiceCreateWithoutRelationsInput(ServiceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Service create method, without relations"""
    id: _str
    name: _str
    price: _int
    duration: _float
    updatedAt: datetime.datetime
    creatorId: _str

class ServiceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ServiceCreateWithoutRelationsInput'
    where: 'ServiceWhereUniqueInput'

class ServiceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceCreateWithoutRelationsInput'
    connect: 'ServiceWhereUniqueInput'
    connect_or_create: 'ServiceConnectOrCreateWithoutRelationsInput'


class ServiceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ServiceCreateWithoutRelationsInput', List['ServiceCreateWithoutRelationsInput']]
    connect: Union['ServiceWhereUniqueInput', List['ServiceWhereUniqueInput']]
    connect_or_create: Union['ServiceConnectOrCreateWithoutRelationsInput', List['ServiceConnectOrCreateWithoutRelationsInput']]

_ServiceWhereUnique_id_Input = TypedDict(
    '_ServiceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ServiceWhereUniqueInput = _ServiceWhereUnique_id_Input


class ServiceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    price: Union[AtomicIntInput, _int]
    duration: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    creatorId: _str
    ClientHistory: 'ClientHistoryUpdateManyWithoutRelationsInput'
    Review: 'ReviewUpdateManyWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordUpdateManyWithoutRelationsInput'
    WorkerOnService: 'WorkerOnServiceUpdateManyWithoutRelationsInput'
    ServiceCategory: 'ServiceCategoryUpdateManyWithoutRelationsInput'


class ServiceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    price: Union[AtomicIntInput, _int]
    duration: Union[AtomicFloatInput, _float]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    creatorId: _str


class ServiceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ServiceCreateWithoutRelationsInput']
    connect: List['ServiceWhereUniqueInput']
    connect_or_create: List['ServiceConnectOrCreateWithoutRelationsInput']
    set: List['ServiceWhereUniqueInput']
    disconnect: List['ServiceWhereUniqueInput']
    delete: List['ServiceWhereUniqueInput']

    # TODO
    # update: List['ServiceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ServiceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ServiceScalarWhereInput']
    # upsert: List['ServiceUpserteWithWhereUniqueWithoutRelationsInput']


class ServiceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceCreateWithoutRelationsInput'
    connect: 'ServiceWhereUniqueInput'
    connect_or_create: 'ServiceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ServiceUpdateInput'
    # upsert: 'ServiceUpsertWithoutRelationsInput'


class ServiceUpsertInput(TypedDict):
    create: 'ServiceCreateInput'
    update: 'ServiceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Service_id_OrderByInput = TypedDict(
    '_Service_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Service_name_OrderByInput = TypedDict(
    '_Service_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Service_description_OrderByInput = TypedDict(
    '_Service_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Service_price_OrderByInput = TypedDict(
    '_Service_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Service_duration_OrderByInput = TypedDict(
    '_Service_duration_OrderByInput',
    {
        'duration': 'SortOrder',
    },
    total=True
)

_Service_createdAt_OrderByInput = TypedDict(
    '_Service_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Service_updatedAt_OrderByInput = TypedDict(
    '_Service_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Service_deletedAt_OrderByInput = TypedDict(
    '_Service_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_Service_creatorId_OrderByInput = TypedDict(
    '_Service_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_Service_RelevanceInner = TypedDict(
    '_Service_RelevanceInner',
    {
        'fields': 'List[ServiceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Service_RelevanceOrderByInput = TypedDict(
    '_Service_RelevanceOrderByInput',
    {
        '_relevance': '_Service_RelevanceInner',
    },
    total=True
)

ServiceOrderByInput = Union[
    '_Service_id_OrderByInput',
    '_Service_name_OrderByInput',
    '_Service_description_OrderByInput',
    '_Service_price_OrderByInput',
    '_Service_duration_OrderByInput',
    '_Service_createdAt_OrderByInput',
    '_Service_updatedAt_OrderByInput',
    '_Service_deletedAt_OrderByInput',
    '_Service_creatorId_OrderByInput',
    '_Service_RelevanceOrderByInput',
]



# recursive Service types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ServiceRelationFilter = TypedDict(
    'ServiceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ServiceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ServiceInclude(TypedDict, total=False):
    """Service relational arguments"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromService']
    Review: Union[bool, 'FindManyReviewArgsFromService']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromService']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromService']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromService']


    

class CabinetIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Office: Union[bool, 'OfficeArgsFromServiceRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive1']


class CabinetIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Office: Union[bool, 'OfficeArgsFromServiceRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive2']


class CabinetIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Office: Union[bool, 'OfficeArgsFromServiceRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive3']


class CabinetIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Office: Union[bool, 'OfficeArgsFromServiceRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive4']


class CabinetIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class CabinetArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyCabinetArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive1']


class ClientIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive2']


class ClientIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive3']


class ClientIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive4']


class ClientIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ClientArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyClientArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive1']
    Review: Union[bool, 'ReviewArgsFromServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive1']


class ClientHistoryIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive2']
    Review: Union[bool, 'ReviewArgsFromServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive2']


class ClientHistoryIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive3']
    Review: Union[bool, 'ReviewArgsFromServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive3']


class ClientHistoryIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive4']
    Review: Union[bool, 'ReviewArgsFromServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive4']


class ClientHistoryIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ClientHistoryArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyClientHistoryArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive1']


class DepartmentIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive2']


class DepartmentIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive3']


class DepartmentIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive4']


class DepartmentIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class DepartmentArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyDepartmentArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecursive1']


class DepartmentUserIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecursive2']


class DepartmentUserIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecursive3']


class DepartmentUserIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecursive4']


class DepartmentUserIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class DepartmentUserArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyDepartmentUserArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive1']


class OfficeIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive2']


class OfficeIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive3']


class OfficeIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive4']


class OfficeIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class OfficeArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyOfficeArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""


class OpportunityIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""


class OpportunityIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""


class OpportunityIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""


class OpportunityIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class OpportunityArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyOpportunityArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""


class PositionIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""


class PositionIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""


class PositionIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""


class PositionIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class PositionArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyPositionArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'UserArgsFromServiceRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive1']


class ProductIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'UserArgsFromServiceRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive2']


class ProductIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'UserArgsFromServiceRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive3']


class ProductIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'UserArgsFromServiceRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecursive4']


class ProductIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ProductArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyProductArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive1']
    Product: Union[bool, 'ProductArgsFromServiceRecursive1']


class ProductSaleIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive2']
    Product: Union[bool, 'ProductArgsFromServiceRecursive2']


class ProductSaleIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive3']
    Product: Union[bool, 'ProductArgsFromServiceRecursive3']


class ProductSaleIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive4']
    Product: Union[bool, 'ProductArgsFromServiceRecursive4']


class ProductSaleIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ProductSaleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyProductSaleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive1']
    Client: Union[bool, 'ClientArgsFromServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive1']


class ReviewIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive2']
    Client: Union[bool, 'ClientArgsFromServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive2']


class ReviewIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive3']
    Client: Union[bool, 'ClientArgsFromServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive3']


class ReviewIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive4']
    Client: Union[bool, 'ClientArgsFromServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive4']


class ReviewIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ReviewArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyReviewArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecursive1']


class RoleIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecursive2']


class RoleIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecursive3']


class RoleIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecursive4']


class RoleIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class RoleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyRoleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecursive1']


class ScheduleIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecursive2']


class ScheduleIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecursive3']


class ScheduleIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecursive4']


class ScheduleIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ScheduleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyScheduleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecursive1']


class ServiceIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecursive2']


class ServiceIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecursive3']


class ServiceIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecursive4']


class ServiceIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ServiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyServiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecursive1']


class ServiceCategoryIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecursive2']


class ServiceCategoryIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecursive3']


class ServiceCategoryIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecursive4']


class ServiceCategoryIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ServiceCategoryArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyServiceCategoryArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive1']
    Office: Union[bool, 'OfficeArgsFromServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecursive1']


class ServiceRecordIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive2']
    Office: Union[bool, 'OfficeArgsFromServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecursive2']


class ServiceRecordIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive3']
    Office: Union[bool, 'OfficeArgsFromServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecursive3']


class ServiceRecordIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Client: Union[bool, 'ClientArgsFromServiceRecursive4']
    Office: Union[bool, 'OfficeArgsFromServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecursive4']


class ServiceRecordIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ServiceRecordArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyServiceRecordArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive1']
    Role: Union[bool, 'RoleArgsFromServiceRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive1']


class UserIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive2']
    Role: Union[bool, 'RoleArgsFromServiceRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive2']


class UserIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive3']
    Role: Union[bool, 'RoleArgsFromServiceRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive3']


class UserIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecursive4']
    Role: Union[bool, 'RoleArgsFromServiceRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecursive4']


class UserIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class UserArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyUserArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecursive1']


class UserOnCabinetIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecursive2']


class UserOnCabinetIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecursive3']


class UserOnCabinetIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecursive4']


class UserOnCabinetIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class UserOnCabinetArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyUserOnCabinetArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecursive1']


class WorkerOnServiceIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecursive2']


class WorkerOnServiceIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecursive3']


class WorkerOnServiceIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecursive4']


class WorkerOnServiceIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class WorkerOnServiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyWorkerOnServiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyServiceArgs = FindManyServiceArgsFromService
FindFirstServiceArgs = FindManyServiceArgsFromService


    

class ServiceWhereInput(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    duration: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    WorkerOnService: 'WorkerOnServiceListRelationFilter'
    ServiceCategory: 'ServiceCategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive1', List['ServiceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive1']
    OR: List['ServiceWhereInputRecursive1']
    NOT: List['ServiceWhereInputRecursive1']


class ServiceWhereInputRecursive1(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    duration: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    WorkerOnService: 'WorkerOnServiceListRelationFilter'
    ServiceCategory: 'ServiceCategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive2', List['ServiceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive2']
    OR: List['ServiceWhereInputRecursive2']
    NOT: List['ServiceWhereInputRecursive2']


class ServiceWhereInputRecursive2(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    duration: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    WorkerOnService: 'WorkerOnServiceListRelationFilter'
    ServiceCategory: 'ServiceCategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive3', List['ServiceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive3']
    OR: List['ServiceWhereInputRecursive3']
    NOT: List['ServiceWhereInputRecursive3']


class ServiceWhereInputRecursive3(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    duration: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    WorkerOnService: 'WorkerOnServiceListRelationFilter'
    ServiceCategory: 'ServiceCategoryListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive4', List['ServiceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive4']
    OR: List['ServiceWhereInputRecursive4']
    NOT: List['ServiceWhereInputRecursive4']


class ServiceWhereInputRecursive4(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    price: Union[_int, 'types.IntFilter']
    duration: Union[_float, 'types.FloatFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    creatorId: Union[_str, 'types.StringFilter']
    ClientHistory: 'ClientHistoryListRelationFilter'
    Review: 'ReviewListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    WorkerOnService: 'WorkerOnServiceListRelationFilter'
    ServiceCategory: 'ServiceCategoryListRelationFilter'



# aggregate Service types


    

class ServiceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    duration: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive1']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive1']


class ServiceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    duration: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive2']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive2']


class ServiceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    duration: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive3']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive3']


class ServiceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    duration: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive4']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive4']


class ServiceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_int, 'types.IntWithAggregatesFilter']
    duration: Union[_float, 'types.FloatWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']



class ServiceGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    price: _int
    duration: _float
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    creatorId: _str
    _sum: 'ServiceSumAggregateOutput'
    _avg: 'ServiceAvgAggregateOutput'
    _min: 'ServiceMinAggregateOutput'
    _max: 'ServiceMaxAggregateOutput'
    _count: 'ServiceCountAggregateOutput'


class ServiceAvgAggregateOutput(TypedDict, total=False):
    """Service output for aggregating averages"""
    price: float
    duration: float


class ServiceSumAggregateOutput(TypedDict, total=False):
    """Service output for aggregating sums"""
    price: _int
    duration: _float


class ServiceScalarAggregateOutput(TypedDict, total=False):
    """Service output including scalar fields"""
    id: _str
    name: _str
    description: _str
    price: _int
    duration: _float
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    deletedAt: datetime.datetime
    creatorId: _str


ServiceMinAggregateOutput = ServiceScalarAggregateOutput
ServiceMaxAggregateOutput = ServiceScalarAggregateOutput


class ServiceMaxAggregateInput(TypedDict, total=False):
    """Service input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    price: bool
    duration: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool
    creatorId: bool


class ServiceMinAggregateInput(TypedDict, total=False):
    """Service input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    price: bool
    duration: bool
    createdAt: bool
    updatedAt: bool
    deletedAt: bool
    creatorId: bool


class ServiceNumberAggregateInput(TypedDict, total=False):
    """Service input for aggregating numbers"""
    price: bool
    duration: bool


ServiceAvgAggregateInput = ServiceNumberAggregateInput
ServiceSumAggregateInput = ServiceNumberAggregateInput


ServiceCountAggregateInput = TypedDict(
    'ServiceCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'price': bool,
        'duration': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'deletedAt': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

ServiceCountAggregateOutput = TypedDict(
    'ServiceCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'price': int,
        'duration': int,
        'createdAt': int,
        'updatedAt': int,
        'deletedAt': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


ServiceKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'duration',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'creatorId',
    'ClientHistory',
    'Review',
    'ServiceRecord',
    'WorkerOnService',
    'ServiceCategory',
]
ServiceScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'price',
    'duration',
    'createdAt',
    'updatedAt',
    'deletedAt',
    'creatorId',
]
ServiceScalarFieldKeysT = TypeVar('ServiceScalarFieldKeysT', bound=ServiceScalarFieldKeys)

ServiceRelationalFieldKeys = Literal[
        'ClientHistory',
        'Review',
        'ServiceRecord',
        'WorkerOnService',
        'ServiceCategory',
    ]

# ServiceCategory types

class ServiceCategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ServiceCategory create method"""
    description: Optional[_str]
    Service: 'ServiceCreateManyNestedWithoutRelationsInput'


class ServiceCategoryCreateInput(ServiceCategoryOptionalCreateInput):
    """Required arguments to the ServiceCategory create method"""
    id: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ServiceCategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ServiceCategory create method, without relations"""
    description: Optional[_str]


class ServiceCategoryCreateWithoutRelationsInput(ServiceCategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the ServiceCategory create method, without relations"""
    id: _str
    name: _str

class ServiceCategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ServiceCategoryCreateWithoutRelationsInput'
    where: 'ServiceCategoryWhereUniqueInput'

class ServiceCategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceCategoryCreateWithoutRelationsInput'
    connect: 'ServiceCategoryWhereUniqueInput'
    connect_or_create: 'ServiceCategoryConnectOrCreateWithoutRelationsInput'


class ServiceCategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ServiceCategoryCreateWithoutRelationsInput', List['ServiceCategoryCreateWithoutRelationsInput']]
    connect: Union['ServiceCategoryWhereUniqueInput', List['ServiceCategoryWhereUniqueInput']]
    connect_or_create: Union['ServiceCategoryConnectOrCreateWithoutRelationsInput', List['ServiceCategoryConnectOrCreateWithoutRelationsInput']]

_ServiceCategoryWhereUnique_id_Input = TypedDict(
    '_ServiceCategoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ServiceCategoryWhereUniqueInput = _ServiceCategoryWhereUnique_id_Input


class ServiceCategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    Service: 'ServiceUpdateManyWithoutRelationsInput'


class ServiceCategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]


class ServiceCategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ServiceCategoryCreateWithoutRelationsInput']
    connect: List['ServiceCategoryWhereUniqueInput']
    connect_or_create: List['ServiceCategoryConnectOrCreateWithoutRelationsInput']
    set: List['ServiceCategoryWhereUniqueInput']
    disconnect: List['ServiceCategoryWhereUniqueInput']
    delete: List['ServiceCategoryWhereUniqueInput']

    # TODO
    # update: List['ServiceCategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ServiceCategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ServiceCategoryScalarWhereInput']
    # upsert: List['ServiceCategoryUpserteWithWhereUniqueWithoutRelationsInput']


class ServiceCategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceCategoryCreateWithoutRelationsInput'
    connect: 'ServiceCategoryWhereUniqueInput'
    connect_or_create: 'ServiceCategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ServiceCategoryUpdateInput'
    # upsert: 'ServiceCategoryUpsertWithoutRelationsInput'


class ServiceCategoryUpsertInput(TypedDict):
    create: 'ServiceCategoryCreateInput'
    update: 'ServiceCategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ServiceCategory_id_OrderByInput = TypedDict(
    '_ServiceCategory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ServiceCategory_name_OrderByInput = TypedDict(
    '_ServiceCategory_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_ServiceCategory_description_OrderByInput = TypedDict(
    '_ServiceCategory_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_ServiceCategory_RelevanceInner = TypedDict(
    '_ServiceCategory_RelevanceInner',
    {
        'fields': 'List[ServiceCategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ServiceCategory_RelevanceOrderByInput = TypedDict(
    '_ServiceCategory_RelevanceOrderByInput',
    {
        '_relevance': '_ServiceCategory_RelevanceInner',
    },
    total=True
)

ServiceCategoryOrderByInput = Union[
    '_ServiceCategory_id_OrderByInput',
    '_ServiceCategory_name_OrderByInput',
    '_ServiceCategory_description_OrderByInput',
    '_ServiceCategory_RelevanceOrderByInput',
]



# recursive ServiceCategory types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ServiceCategoryRelationFilter = TypedDict(
    'ServiceCategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ServiceCategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ServiceCategoryInclude(TypedDict, total=False):
    """ServiceCategory relational arguments"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceCategory']


    

class CabinetIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive1']


class CabinetIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive2']


class CabinetIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive3']


class CabinetIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive4']


class CabinetIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class CabinetArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyCabinetArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive1']


class ClientIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive2']


class ClientIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive3']


class ClientIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive4']


class ClientIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ClientArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyClientArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive1']
    Review: Union[bool, 'ReviewArgsFromServiceCategoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive1']


class ClientHistoryIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive2']
    Review: Union[bool, 'ReviewArgsFromServiceCategoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive2']


class ClientHistoryIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive3']
    Review: Union[bool, 'ReviewArgsFromServiceCategoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive3']


class ClientHistoryIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive4']
    Review: Union[bool, 'ReviewArgsFromServiceCategoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive4']


class ClientHistoryIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ClientHistoryArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyClientHistoryArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive1']


class DepartmentIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive2']


class DepartmentIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive3']


class DepartmentIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive4']


class DepartmentIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class DepartmentArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyDepartmentArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Department: Union[bool, 'DepartmentArgsFromServiceCategoryRecursive1']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive1']


class DepartmentUserIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Department: Union[bool, 'DepartmentArgsFromServiceCategoryRecursive2']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive2']


class DepartmentUserIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Department: Union[bool, 'DepartmentArgsFromServiceCategoryRecursive3']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive3']


class DepartmentUserIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Department: Union[bool, 'DepartmentArgsFromServiceCategoryRecursive4']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive4']


class DepartmentUserIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class DepartmentUserArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyDepartmentUserArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceCategoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive1']


class OfficeIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceCategoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive2']


class OfficeIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceCategoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive3']


class OfficeIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceCategoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive4']


class OfficeIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class OfficeArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyOfficeArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class OpportunityIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class OpportunityIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class OpportunityIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class OpportunityIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class OpportunityArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyOpportunityArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class PositionIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class PositionIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class PositionIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""


class PositionIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class PositionArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyPositionArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive1']


class ProductIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive2']


class ProductIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive3']


class ProductIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceCategoryRecursive4']


class ProductIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ProductArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyProductArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive1']
    Product: Union[bool, 'ProductArgsFromServiceCategoryRecursive1']


class ProductSaleIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive2']
    Product: Union[bool, 'ProductArgsFromServiceCategoryRecursive2']


class ProductSaleIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive3']
    Product: Union[bool, 'ProductArgsFromServiceCategoryRecursive3']


class ProductSaleIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive4']
    Product: Union[bool, 'ProductArgsFromServiceCategoryRecursive4']


class ProductSaleIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ProductSaleArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyProductSaleArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive1']
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive1']


class ReviewIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive2']
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive2']


class ReviewIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive3']
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive3']


class ReviewIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive4']
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive4']


class ReviewIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ReviewArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyReviewArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'FindManyUserArgsFromServiceCategoryRecursive1']


class RoleIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'FindManyUserArgsFromServiceCategoryRecursive2']


class RoleIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'FindManyUserArgsFromServiceCategoryRecursive3']


class RoleIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User: Union[bool, 'FindManyUserArgsFromServiceCategoryRecursive4']


class RoleIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class RoleArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyRoleArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive1']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive1']


class ScheduleIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive2']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive2']


class ScheduleIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive3']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive3']


class ScheduleIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive4']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive4']


class ScheduleIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ScheduleArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyScheduleArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceCategoryRecursive1']


class ServiceIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceCategoryRecursive2']


class ServiceIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceCategoryRecursive3']


class ServiceIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceCategoryRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromServiceCategoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceCategoryRecursive4']


class ServiceIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ServiceArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyServiceArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceCategoryRecursive1']


class ServiceCategoryIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceCategoryRecursive2']


class ServiceCategoryIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceCategoryRecursive3']


class ServiceCategoryIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceCategoryRecursive4']


class ServiceCategoryIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ServiceCategoryArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyServiceCategoryArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive1']
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive1']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive1']


class ServiceRecordIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive2']
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive2']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive2']


class ServiceRecordIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive3']
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive3']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive3']


class ServiceRecordIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Client: Union[bool, 'ClientArgsFromServiceCategoryRecursive4']
    Office: Union[bool, 'OfficeArgsFromServiceCategoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive4']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive4']


class ServiceRecordIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class ServiceRecordArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyServiceRecordArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromServiceCategoryRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive1']
    Role: Union[bool, 'RoleArgsFromServiceCategoryRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive1']


class UserIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromServiceCategoryRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive2']
    Role: Union[bool, 'RoleArgsFromServiceCategoryRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive2']


class UserIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromServiceCategoryRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive3']
    Role: Union[bool, 'RoleArgsFromServiceCategoryRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive3']


class UserIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceCategoryRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromServiceCategoryRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceCategoryRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceCategoryRecursive4']
    Role: Union[bool, 'RoleArgsFromServiceCategoryRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceCategoryRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceCategoryRecursive4']


class UserIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class UserArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyUserArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive1']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive1']


class UserOnCabinetIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive2']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive2']


class UserOnCabinetIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive3']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive3']


class UserOnCabinetIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceCategoryRecursive4']
    User: Union[bool, 'UserArgsFromServiceCategoryRecursive4']


class UserOnCabinetIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class UserOnCabinetArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyUserOnCabinetArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromServiceCategory(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive1']


class WorkerOnServiceIncludeFromServiceCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive2']


class WorkerOnServiceIncludeFromServiceCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive3']


class WorkerOnServiceIncludeFromServiceCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceCategoryRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceCategoryRecursive4']


class WorkerOnServiceIncludeFromServiceCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceCategory"""

    

class WorkerOnServiceArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    
    

class FindManyWorkerOnServiceArgsFromServiceCategory(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromServiceCategoryRecursive1(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromServiceCategoryRecursive2(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromServiceCategoryRecursive3(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromServiceCategoryRecursive4(TypedDict, total=False):
    """Arguments for ServiceCategory"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyServiceCategoryArgs = FindManyServiceCategoryArgsFromServiceCategory
FindFirstServiceCategoryArgs = FindManyServiceCategoryArgsFromServiceCategory


    

class ServiceCategoryWhereInput(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    Service: 'ServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceCategoryWhereInputRecursive1', List['ServiceCategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ServiceCategoryWhereInputRecursive1']
    OR: List['ServiceCategoryWhereInputRecursive1']
    NOT: List['ServiceCategoryWhereInputRecursive1']


class ServiceCategoryWhereInputRecursive1(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    Service: 'ServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceCategoryWhereInputRecursive2', List['ServiceCategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ServiceCategoryWhereInputRecursive2']
    OR: List['ServiceCategoryWhereInputRecursive2']
    NOT: List['ServiceCategoryWhereInputRecursive2']


class ServiceCategoryWhereInputRecursive2(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    Service: 'ServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceCategoryWhereInputRecursive3', List['ServiceCategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ServiceCategoryWhereInputRecursive3']
    OR: List['ServiceCategoryWhereInputRecursive3']
    NOT: List['ServiceCategoryWhereInputRecursive3']


class ServiceCategoryWhereInputRecursive3(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    Service: 'ServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceCategoryWhereInputRecursive4', List['ServiceCategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ServiceCategoryWhereInputRecursive4']
    OR: List['ServiceCategoryWhereInputRecursive4']
    NOT: List['ServiceCategoryWhereInputRecursive4']


class ServiceCategoryWhereInputRecursive4(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    Service: 'ServiceListRelationFilter'



# aggregate ServiceCategory types


    

class ServiceCategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive1']


class ServiceCategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive2']


class ServiceCategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive3']


class ServiceCategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ServiceCategoryScalarWhereWithAggregatesInputRecursive4']


class ServiceCategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ServiceCategory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class ServiceCategoryGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    _sum: 'ServiceCategorySumAggregateOutput'
    _avg: 'ServiceCategoryAvgAggregateOutput'
    _min: 'ServiceCategoryMinAggregateOutput'
    _max: 'ServiceCategoryMaxAggregateOutput'
    _count: 'ServiceCategoryCountAggregateOutput'


class ServiceCategoryAvgAggregateOutput(TypedDict, total=False):
    """ServiceCategory output for aggregating averages"""


class ServiceCategorySumAggregateOutput(TypedDict, total=False):
    """ServiceCategory output for aggregating sums"""


class ServiceCategoryScalarAggregateOutput(TypedDict, total=False):
    """ServiceCategory output including scalar fields"""
    id: _str
    name: _str
    description: _str


ServiceCategoryMinAggregateOutput = ServiceCategoryScalarAggregateOutput
ServiceCategoryMaxAggregateOutput = ServiceCategoryScalarAggregateOutput


class ServiceCategoryMaxAggregateInput(TypedDict, total=False):
    """ServiceCategory input for aggregating by max"""
    id: bool
    name: bool
    description: bool


class ServiceCategoryMinAggregateInput(TypedDict, total=False):
    """ServiceCategory input for aggregating by min"""
    id: bool
    name: bool
    description: bool


class ServiceCategoryNumberAggregateInput(TypedDict, total=False):
    """ServiceCategory input for aggregating numbers"""


ServiceCategoryAvgAggregateInput = ServiceCategoryNumberAggregateInput
ServiceCategorySumAggregateInput = ServiceCategoryNumberAggregateInput


ServiceCategoryCountAggregateInput = TypedDict(
    'ServiceCategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

ServiceCategoryCountAggregateOutput = TypedDict(
    'ServiceCategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


ServiceCategoryKeys = Literal[
    'id',
    'name',
    'description',
    'Service',
]
ServiceCategoryScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
]
ServiceCategoryScalarFieldKeysT = TypeVar('ServiceCategoryScalarFieldKeysT', bound=ServiceCategoryScalarFieldKeys)

ServiceCategoryRelationalFieldKeys = Literal[
        'Service',
    ]

# ServiceRecord types

class ServiceRecordOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ServiceRecord create method"""
    clientId: _str
    workerId: _str
    serviceId: _str
    officeId: _str
    workCabinetId: _str
    result: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    Client: 'ClientCreateNestedWithoutRelationsInput'
    Office: 'OfficeCreateNestedWithoutRelationsInput'
    Service: 'ServiceCreateNestedWithoutRelationsInput'
    Cabinet: 'CabinetCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class ServiceRecordCreateInput(ServiceRecordOptionalCreateInput):
    """Required arguments to the ServiceRecord create method"""
    id: _str
    dateTime: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ServiceRecordOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ServiceRecord create method, without relations"""
    clientId: _str
    workerId: _str
    serviceId: _str
    officeId: _str
    workCabinetId: _str
    result: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]


class ServiceRecordCreateWithoutRelationsInput(ServiceRecordOptionalCreateWithoutRelationsInput):
    """Required arguments to the ServiceRecord create method, without relations"""
    id: _str
    dateTime: datetime.datetime
    updatedAt: datetime.datetime

class ServiceRecordConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ServiceRecordCreateWithoutRelationsInput'
    where: 'ServiceRecordWhereUniqueInput'

class ServiceRecordCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceRecordCreateWithoutRelationsInput'
    connect: 'ServiceRecordWhereUniqueInput'
    connect_or_create: 'ServiceRecordConnectOrCreateWithoutRelationsInput'


class ServiceRecordCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ServiceRecordCreateWithoutRelationsInput', List['ServiceRecordCreateWithoutRelationsInput']]
    connect: Union['ServiceRecordWhereUniqueInput', List['ServiceRecordWhereUniqueInput']]
    connect_or_create: Union['ServiceRecordConnectOrCreateWithoutRelationsInput', List['ServiceRecordConnectOrCreateWithoutRelationsInput']]

_ServiceRecordWhereUnique_id_Input = TypedDict(
    '_ServiceRecordWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ServiceRecordWhereUniqueInput = _ServiceRecordWhereUnique_id_Input


class ServiceRecordUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    dateTime: datetime.datetime
    result: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    updatedAt: datetime.datetime
    Client: 'ClientUpdateOneWithoutRelationsInput'
    Office: 'OfficeUpdateOneWithoutRelationsInput'
    Service: 'ServiceUpdateOneWithoutRelationsInput'
    Cabinet: 'CabinetUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class ServiceRecordUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    dateTime: datetime.datetime
    result: Optional[_str]
    createdAt: datetime.datetime
    deletedAt: Optional[datetime.datetime]
    updatedAt: datetime.datetime


class ServiceRecordUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ServiceRecordCreateWithoutRelationsInput']
    connect: List['ServiceRecordWhereUniqueInput']
    connect_or_create: List['ServiceRecordConnectOrCreateWithoutRelationsInput']
    set: List['ServiceRecordWhereUniqueInput']
    disconnect: List['ServiceRecordWhereUniqueInput']
    delete: List['ServiceRecordWhereUniqueInput']

    # TODO
    # update: List['ServiceRecordUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ServiceRecordUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ServiceRecordScalarWhereInput']
    # upsert: List['ServiceRecordUpserteWithWhereUniqueWithoutRelationsInput']


class ServiceRecordUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceRecordCreateWithoutRelationsInput'
    connect: 'ServiceRecordWhereUniqueInput'
    connect_or_create: 'ServiceRecordConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ServiceRecordUpdateInput'
    # upsert: 'ServiceRecordUpsertWithoutRelationsInput'


class ServiceRecordUpsertInput(TypedDict):
    create: 'ServiceRecordCreateInput'
    update: 'ServiceRecordUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ServiceRecord_id_OrderByInput = TypedDict(
    '_ServiceRecord_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ServiceRecord_clientId_OrderByInput = TypedDict(
    '_ServiceRecord_clientId_OrderByInput',
    {
        'clientId': 'SortOrder',
    },
    total=True
)

_ServiceRecord_workerId_OrderByInput = TypedDict(
    '_ServiceRecord_workerId_OrderByInput',
    {
        'workerId': 'SortOrder',
    },
    total=True
)

_ServiceRecord_dateTime_OrderByInput = TypedDict(
    '_ServiceRecord_dateTime_OrderByInput',
    {
        'dateTime': 'SortOrder',
    },
    total=True
)

_ServiceRecord_serviceId_OrderByInput = TypedDict(
    '_ServiceRecord_serviceId_OrderByInput',
    {
        'serviceId': 'SortOrder',
    },
    total=True
)

_ServiceRecord_officeId_OrderByInput = TypedDict(
    '_ServiceRecord_officeId_OrderByInput',
    {
        'officeId': 'SortOrder',
    },
    total=True
)

_ServiceRecord_workCabinetId_OrderByInput = TypedDict(
    '_ServiceRecord_workCabinetId_OrderByInput',
    {
        'workCabinetId': 'SortOrder',
    },
    total=True
)

_ServiceRecord_result_OrderByInput = TypedDict(
    '_ServiceRecord_result_OrderByInput',
    {
        'result': 'SortOrder',
    },
    total=True
)

_ServiceRecord_createdAt_OrderByInput = TypedDict(
    '_ServiceRecord_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ServiceRecord_deletedAt_OrderByInput = TypedDict(
    '_ServiceRecord_deletedAt_OrderByInput',
    {
        'deletedAt': 'SortOrder',
    },
    total=True
)

_ServiceRecord_updatedAt_OrderByInput = TypedDict(
    '_ServiceRecord_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_ServiceRecord_RelevanceInner = TypedDict(
    '_ServiceRecord_RelevanceInner',
    {
        'fields': 'List[ServiceRecordScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ServiceRecord_RelevanceOrderByInput = TypedDict(
    '_ServiceRecord_RelevanceOrderByInput',
    {
        '_relevance': '_ServiceRecord_RelevanceInner',
    },
    total=True
)

ServiceRecordOrderByInput = Union[
    '_ServiceRecord_id_OrderByInput',
    '_ServiceRecord_clientId_OrderByInput',
    '_ServiceRecord_workerId_OrderByInput',
    '_ServiceRecord_dateTime_OrderByInput',
    '_ServiceRecord_serviceId_OrderByInput',
    '_ServiceRecord_officeId_OrderByInput',
    '_ServiceRecord_workCabinetId_OrderByInput',
    '_ServiceRecord_result_OrderByInput',
    '_ServiceRecord_createdAt_OrderByInput',
    '_ServiceRecord_deletedAt_OrderByInput',
    '_ServiceRecord_updatedAt_OrderByInput',
    '_ServiceRecord_RelevanceOrderByInput',
]



# recursive ServiceRecord types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ServiceRecordRelationFilter = TypedDict(
    'ServiceRecordRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ServiceRecordListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ServiceRecordInclude(TypedDict, total=False):
    """ServiceRecord relational arguments"""
    Client: Union[bool, 'ClientArgsFromServiceRecord']
    Office: Union[bool, 'OfficeArgsFromServiceRecord']
    Service: Union[bool, 'ServiceArgsFromServiceRecord']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecord']
    User: Union[bool, 'UserArgsFromServiceRecord']


    

class CabinetIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive1']


class CabinetIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive2']


class CabinetIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive3']


class CabinetIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive4']


class CabinetIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class CabinetArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyCabinetArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive1']


class ClientIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive2']


class ClientIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive3']


class ClientIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive4']


class ClientIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ClientArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyClientArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive1']
    Review: Union[bool, 'ReviewArgsFromServiceRecordRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive1']


class ClientHistoryIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive2']
    Review: Union[bool, 'ReviewArgsFromServiceRecordRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive2']


class ClientHistoryIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive3']
    Review: Union[bool, 'ReviewArgsFromServiceRecordRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive3']


class ClientHistoryIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive4']
    Review: Union[bool, 'ReviewArgsFromServiceRecordRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive4']


class ClientHistoryIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ClientHistoryArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyClientHistoryArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive1']


class DepartmentIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive2']


class DepartmentIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive3']


class DepartmentIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive4']


class DepartmentIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class DepartmentArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyDepartmentArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecordRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive1']


class DepartmentUserIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecordRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive2']


class DepartmentUserIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecordRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive3']


class DepartmentUserIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Department: Union[bool, 'DepartmentArgsFromServiceRecordRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive4']


class DepartmentUserIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class DepartmentUserArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyDepartmentUserArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecordRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive1']


class OfficeIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecordRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive2']


class OfficeIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecordRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive3']


class OfficeIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromServiceRecordRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive4']


class OfficeIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class OfficeArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyOfficeArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class OpportunityIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class OpportunityIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class OpportunityIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class OpportunityIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class OpportunityArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyOpportunityArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class PositionIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class PositionIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class PositionIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""


class PositionIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class PositionArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyPositionArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'UserArgsFromServiceRecordRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive1']


class ProductIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'UserArgsFromServiceRecordRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive2']


class ProductIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'UserArgsFromServiceRecordRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive3']


class ProductIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'UserArgsFromServiceRecordRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromServiceRecordRecursive4']


class ProductIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ProductArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyProductArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive1']
    Product: Union[bool, 'ProductArgsFromServiceRecordRecursive1']


class ProductSaleIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive2']
    Product: Union[bool, 'ProductArgsFromServiceRecordRecursive2']


class ProductSaleIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive3']
    Product: Union[bool, 'ProductArgsFromServiceRecordRecursive3']


class ProductSaleIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive4']
    Product: Union[bool, 'ProductArgsFromServiceRecordRecursive4']


class ProductSaleIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ProductSaleArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyProductSaleArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive1']
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive1']


class ReviewIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive2']
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive2']


class ReviewIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive3']
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive3']


class ReviewIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive4']
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive4']


class ReviewIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ReviewArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyReviewArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecordRecursive1']


class RoleIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecordRecursive2']


class RoleIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecordRecursive3']


class RoleIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User: Union[bool, 'FindManyUserArgsFromServiceRecordRecursive4']


class RoleIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class RoleArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyRoleArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive1']


class ScheduleIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive2']


class ScheduleIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive3']


class ScheduleIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive4']


class ScheduleIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ScheduleArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyScheduleArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecordRecursive1']


class ServiceIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecordRecursive2']


class ServiceIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecordRecursive3']


class ServiceIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromServiceRecordRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromServiceRecordRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromServiceRecordRecursive4']


class ServiceIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ServiceArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyServiceArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecordRecursive1']


class ServiceCategoryIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecordRecursive2']


class ServiceCategoryIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecordRecursive3']


class ServiceCategoryIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Service: Union[bool, 'FindManyServiceArgsFromServiceRecordRecursive4']


class ServiceCategoryIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ServiceCategoryArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyServiceCategoryArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive1']
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive1']


class ServiceRecordIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive2']
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive2']


class ServiceRecordIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive3']
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive3']


class ServiceRecordIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Client: Union[bool, 'ClientArgsFromServiceRecordRecursive4']
    Office: Union[bool, 'OfficeArgsFromServiceRecordRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive4']


class ServiceRecordIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class ServiceRecordArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyServiceRecordArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecordRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive1']
    Role: Union[bool, 'RoleArgsFromServiceRecordRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive1']


class UserIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecordRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive2']
    Role: Union[bool, 'RoleArgsFromServiceRecordRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive2']


class UserIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecordRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive3']
    Role: Union[bool, 'RoleArgsFromServiceRecordRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive3']


class UserIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromServiceRecordRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromServiceRecordRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromServiceRecordRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromServiceRecordRecursive4']
    Role: Union[bool, 'RoleArgsFromServiceRecordRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromServiceRecordRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromServiceRecordRecursive4']


class UserIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class UserArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyUserArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive1']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive1']


class UserOnCabinetIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive2']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive2']


class UserOnCabinetIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive3']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive3']


class UserOnCabinetIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    Cabinet: Union[bool, 'CabinetArgsFromServiceRecordRecursive4']
    User: Union[bool, 'UserArgsFromServiceRecordRecursive4']


class UserOnCabinetIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class UserOnCabinetArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyUserOnCabinetArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromServiceRecord(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive1']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive1']


class WorkerOnServiceIncludeFromServiceRecordRecursive1(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive2']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive2']


class WorkerOnServiceIncludeFromServiceRecordRecursive2(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive3']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive3']


class WorkerOnServiceIncludeFromServiceRecordRecursive3(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive4']
    Service: Union[bool, 'ServiceArgsFromServiceRecordRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromServiceRecordRecursive4']


class WorkerOnServiceIncludeFromServiceRecordRecursive4(TypedDict, total=False):
    """Relational arguments for ServiceRecord"""

    

class WorkerOnServiceArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    
    

class FindManyWorkerOnServiceArgsFromServiceRecord(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromServiceRecordRecursive1(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromServiceRecordRecursive2(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromServiceRecordRecursive3(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromServiceRecordRecursive4(TypedDict, total=False):
    """Arguments for ServiceRecord"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyServiceRecordArgs = FindManyServiceRecordArgsFromServiceRecord
FindFirstServiceRecordArgs = FindManyServiceRecordArgsFromServiceRecord


    

class ServiceRecordWhereInput(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    workerId: Union[_str, 'types.StringFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeFilter']
    serviceId: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    workCabinetId: Union[_str, 'types.StringFilter']
    result: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Client: 'ClientRelationFilter'
    Office: 'OfficeRelationFilter'
    Service: 'ServiceRelationFilter'
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceRecordWhereInputRecursive1', List['ServiceRecordWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ServiceRecordWhereInputRecursive1']
    OR: List['ServiceRecordWhereInputRecursive1']
    NOT: List['ServiceRecordWhereInputRecursive1']


class ServiceRecordWhereInputRecursive1(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    workerId: Union[_str, 'types.StringFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeFilter']
    serviceId: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    workCabinetId: Union[_str, 'types.StringFilter']
    result: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Client: 'ClientRelationFilter'
    Office: 'OfficeRelationFilter'
    Service: 'ServiceRelationFilter'
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceRecordWhereInputRecursive2', List['ServiceRecordWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ServiceRecordWhereInputRecursive2']
    OR: List['ServiceRecordWhereInputRecursive2']
    NOT: List['ServiceRecordWhereInputRecursive2']


class ServiceRecordWhereInputRecursive2(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    workerId: Union[_str, 'types.StringFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeFilter']
    serviceId: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    workCabinetId: Union[_str, 'types.StringFilter']
    result: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Client: 'ClientRelationFilter'
    Office: 'OfficeRelationFilter'
    Service: 'ServiceRelationFilter'
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceRecordWhereInputRecursive3', List['ServiceRecordWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ServiceRecordWhereInputRecursive3']
    OR: List['ServiceRecordWhereInputRecursive3']
    NOT: List['ServiceRecordWhereInputRecursive3']


class ServiceRecordWhereInputRecursive3(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    workerId: Union[_str, 'types.StringFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeFilter']
    serviceId: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    workCabinetId: Union[_str, 'types.StringFilter']
    result: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Client: 'ClientRelationFilter'
    Office: 'OfficeRelationFilter'
    Service: 'ServiceRelationFilter'
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ServiceRecordWhereInputRecursive4', List['ServiceRecordWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ServiceRecordWhereInputRecursive4']
    OR: List['ServiceRecordWhereInputRecursive4']
    NOT: List['ServiceRecordWhereInputRecursive4']


class ServiceRecordWhereInputRecursive4(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    workerId: Union[_str, 'types.StringFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeFilter']
    serviceId: Union[_str, 'types.StringFilter']
    officeId: Union[_str, 'types.StringFilter']
    workCabinetId: Union[_str, 'types.StringFilter']
    result: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    deletedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    Client: 'ClientRelationFilter'
    Office: 'OfficeRelationFilter'
    Service: 'ServiceRelationFilter'
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'



# aggregate ServiceRecord types


    

class ServiceRecordScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    workerId: Union[_str, 'types.StringWithAggregatesFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    workCabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ServiceRecordScalarWhereWithAggregatesInputRecursive1']
    OR: List['ServiceRecordScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ServiceRecordScalarWhereWithAggregatesInputRecursive1']


class ServiceRecordScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    workerId: Union[_str, 'types.StringWithAggregatesFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    workCabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ServiceRecordScalarWhereWithAggregatesInputRecursive2']
    OR: List['ServiceRecordScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ServiceRecordScalarWhereWithAggregatesInputRecursive2']


class ServiceRecordScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    workerId: Union[_str, 'types.StringWithAggregatesFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    workCabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ServiceRecordScalarWhereWithAggregatesInputRecursive3']
    OR: List['ServiceRecordScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ServiceRecordScalarWhereWithAggregatesInputRecursive3']


class ServiceRecordScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    workerId: Union[_str, 'types.StringWithAggregatesFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    workCabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ServiceRecordScalarWhereWithAggregatesInputRecursive4']
    OR: List['ServiceRecordScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ServiceRecordScalarWhereWithAggregatesInputRecursive4']


class ServiceRecordScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ServiceRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    workerId: Union[_str, 'types.StringWithAggregatesFilter']
    dateTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    officeId: Union[_str, 'types.StringWithAggregatesFilter']
    workCabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deletedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ServiceRecordGroupByOutput(TypedDict, total=False):
    id: _str
    clientId: _str
    workerId: _str
    dateTime: datetime.datetime
    serviceId: _str
    officeId: _str
    workCabinetId: _str
    result: _str
    createdAt: datetime.datetime
    deletedAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ServiceRecordSumAggregateOutput'
    _avg: 'ServiceRecordAvgAggregateOutput'
    _min: 'ServiceRecordMinAggregateOutput'
    _max: 'ServiceRecordMaxAggregateOutput'
    _count: 'ServiceRecordCountAggregateOutput'


class ServiceRecordAvgAggregateOutput(TypedDict, total=False):
    """ServiceRecord output for aggregating averages"""


class ServiceRecordSumAggregateOutput(TypedDict, total=False):
    """ServiceRecord output for aggregating sums"""


class ServiceRecordScalarAggregateOutput(TypedDict, total=False):
    """ServiceRecord output including scalar fields"""
    id: _str
    clientId: _str
    workerId: _str
    dateTime: datetime.datetime
    serviceId: _str
    officeId: _str
    workCabinetId: _str
    result: _str
    createdAt: datetime.datetime
    deletedAt: datetime.datetime
    updatedAt: datetime.datetime


ServiceRecordMinAggregateOutput = ServiceRecordScalarAggregateOutput
ServiceRecordMaxAggregateOutput = ServiceRecordScalarAggregateOutput


class ServiceRecordMaxAggregateInput(TypedDict, total=False):
    """ServiceRecord input for aggregating by max"""
    id: bool
    clientId: bool
    workerId: bool
    dateTime: bool
    serviceId: bool
    officeId: bool
    workCabinetId: bool
    result: bool
    createdAt: bool
    deletedAt: bool
    updatedAt: bool


class ServiceRecordMinAggregateInput(TypedDict, total=False):
    """ServiceRecord input for aggregating by min"""
    id: bool
    clientId: bool
    workerId: bool
    dateTime: bool
    serviceId: bool
    officeId: bool
    workCabinetId: bool
    result: bool
    createdAt: bool
    deletedAt: bool
    updatedAt: bool


class ServiceRecordNumberAggregateInput(TypedDict, total=False):
    """ServiceRecord input for aggregating numbers"""


ServiceRecordAvgAggregateInput = ServiceRecordNumberAggregateInput
ServiceRecordSumAggregateInput = ServiceRecordNumberAggregateInput


ServiceRecordCountAggregateInput = TypedDict(
    'ServiceRecordCountAggregateInput',
    {
        'id': bool,
        'clientId': bool,
        'workerId': bool,
        'dateTime': bool,
        'serviceId': bool,
        'officeId': bool,
        'workCabinetId': bool,
        'result': bool,
        'createdAt': bool,
        'deletedAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ServiceRecordCountAggregateOutput = TypedDict(
    'ServiceRecordCountAggregateOutput',
    {
        'id': int,
        'clientId': int,
        'workerId': int,
        'dateTime': int,
        'serviceId': int,
        'officeId': int,
        'workCabinetId': int,
        'result': int,
        'createdAt': int,
        'deletedAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ServiceRecordKeys = Literal[
    'id',
    'clientId',
    'workerId',
    'dateTime',
    'serviceId',
    'officeId',
    'workCabinetId',
    'result',
    'createdAt',
    'deletedAt',
    'updatedAt',
    'Client',
    'Office',
    'Service',
    'Cabinet',
    'User',
]
ServiceRecordScalarFieldKeys = Literal[
    'id',
    'clientId',
    'workerId',
    'dateTime',
    'serviceId',
    'officeId',
    'workCabinetId',
    'result',
    'createdAt',
    'deletedAt',
    'updatedAt',
]
ServiceRecordScalarFieldKeysT = TypeVar('ServiceRecordScalarFieldKeysT', bound=ServiceRecordScalarFieldKeys)

ServiceRecordRelationalFieldKeys = Literal[
        'Client',
        'Office',
        'Service',
        'Cabinet',
        'User',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    middleName: Optional[_str]
    createdAt: datetime.datetime
    roleId: _str
    telegramId: Optional[_str]
    DepartmentUser: 'DepartmentUserCreateManyNestedWithoutRelationsInput'
    Product: 'ProductCreateManyNestedWithoutRelationsInput'
    Schedule: 'ScheduleCreateManyNestedWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordCreateManyNestedWithoutRelationsInput'
    Role: 'RoleCreateNestedWithoutRelationsInput'
    UserOnCabinet: 'UserOnCabinetCreateManyNestedWithoutRelationsInput'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceCreateManyNestedWithoutRelationsInput'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    id: _str
    lastName: _str
    firstName: _str
    birthDate: datetime.datetime
    updatedAt: datetime.datetime
    login: _str
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    middleName: Optional[_str]
    createdAt: datetime.datetime
    roleId: _str
    telegramId: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    id: _str
    lastName: _str
    firstName: _str
    birthDate: datetime.datetime
    updatedAt: datetime.datetime
    login: _str
    email: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_login_Input = TypedDict(
    '_UserWhereUnique_login_Input',
    {
        'login': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_telegramId_Input = TypedDict(
    '_UserWhereUnique_telegramId_Input',
    {
        'telegramId': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_login_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_telegramId_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    lastName: _str
    firstName: _str
    middleName: Optional[_str]
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    login: _str
    email: _str
    password: _str
    telegramId: Optional[_str]
    DepartmentUser: 'DepartmentUserUpdateManyWithoutRelationsInput'
    Product: 'ProductUpdateManyWithoutRelationsInput'
    Schedule: 'ScheduleUpdateManyWithoutRelationsInput'
    ServiceRecord: 'ServiceRecordUpdateManyWithoutRelationsInput'
    Role: 'RoleUpdateOneWithoutRelationsInput'
    UserOnCabinet: 'UserOnCabinetUpdateManyWithoutRelationsInput'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceUpdateManyWithoutRelationsInput'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    lastName: _str
    firstName: _str
    middleName: Optional[_str]
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    login: _str
    email: _str
    password: _str
    telegramId: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_lastName_OrderByInput = TypedDict(
    '_User_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_User_firstName_OrderByInput = TypedDict(
    '_User_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_User_middleName_OrderByInput = TypedDict(
    '_User_middleName_OrderByInput',
    {
        'middleName': 'SortOrder',
    },
    total=True
)

_User_birthDate_OrderByInput = TypedDict(
    '_User_birthDate_OrderByInput',
    {
        'birthDate': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_login_OrderByInput = TypedDict(
    '_User_login_OrderByInput',
    {
        'login': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_roleId_OrderByInput = TypedDict(
    '_User_roleId_OrderByInput',
    {
        'roleId': 'SortOrder',
    },
    total=True
)

_User_telegramId_OrderByInput = TypedDict(
    '_User_telegramId_OrderByInput',
    {
        'telegramId': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_lastName_OrderByInput',
    '_User_firstName_OrderByInput',
    '_User_middleName_OrderByInput',
    '_User_birthDate_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_login_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_roleId_OrderByInput',
    '_User_telegramId_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUser']
    Product: Union[bool, 'FindManyProductArgsFromUser']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUser']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUser']
    Role: Union[bool, 'RoleArgsFromUser']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUser']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUser']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUser']


    

class CabinetIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Office: Union[bool, 'OfficeArgsFromUserRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive1']


class CabinetIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Office: Union[bool, 'OfficeArgsFromUserRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive2']


class CabinetIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Office: Union[bool, 'OfficeArgsFromUserRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive3']


class CabinetIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Office: Union[bool, 'OfficeArgsFromUserRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive4']


class CabinetIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CabinetArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCabinetArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive1']


class ClientIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive2']


class ClientIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive3']


class ClientIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive4']


class ClientIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ClientArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyClientArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive1']
    Review: Union[bool, 'ReviewArgsFromUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserRecursive1']


class ClientHistoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive2']
    Review: Union[bool, 'ReviewArgsFromUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserRecursive2']


class ClientHistoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive3']
    Review: Union[bool, 'ReviewArgsFromUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserRecursive3']


class ClientHistoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive4']
    Review: Union[bool, 'ReviewArgsFromUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserRecursive4']


class ClientHistoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ClientHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyClientHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive1']


class DepartmentIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive2']


class DepartmentIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive3']


class DepartmentIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive4']


class DepartmentIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DepartmentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDepartmentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Department: Union[bool, 'DepartmentArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class DepartmentUserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Department: Union[bool, 'DepartmentArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class DepartmentUserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Department: Union[bool, 'DepartmentArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class DepartmentUserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Department: Union[bool, 'DepartmentArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class DepartmentUserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DepartmentUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDepartmentUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive1']


class OfficeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive2']


class OfficeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive3']


class OfficeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive4']


class OfficeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class OfficeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOfficeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class OpportunityIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class OpportunityIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class OpportunityIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class OpportunityIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class OpportunityArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOpportunityArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class PositionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class PositionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class PositionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class PositionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PositionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPositionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive1']


class ProductIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive2']


class ProductIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive3']


class ProductIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'UserArgsFromUserRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserRecursive4']


class ProductIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProductArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProductArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive1']
    Product: Union[bool, 'ProductArgsFromUserRecursive1']


class ProductSaleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive2']
    Product: Union[bool, 'ProductArgsFromUserRecursive2']


class ProductSaleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive3']
    Product: Union[bool, 'ProductArgsFromUserRecursive3']


class ProductSaleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive4']
    Product: Union[bool, 'ProductArgsFromUserRecursive4']


class ProductSaleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProductSaleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProductSaleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive1']
    Client: Union[bool, 'ClientArgsFromUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserRecursive1']


class ReviewIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive2']
    Client: Union[bool, 'ClientArgsFromUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserRecursive2']


class ReviewIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive3']
    Client: Union[bool, 'ClientArgsFromUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserRecursive3']


class ReviewIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive4']
    Client: Union[bool, 'ClientArgsFromUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserRecursive4']


class ReviewIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ReviewArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyReviewArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'FindManyUserArgsFromUserRecursive1']


class RoleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'FindManyUserArgsFromUserRecursive2']


class RoleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'FindManyUserArgsFromUserRecursive3']


class RoleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User: Union[bool, 'FindManyUserArgsFromUserRecursive4']


class RoleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class ScheduleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class ScheduleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class ScheduleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class ScheduleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ScheduleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyScheduleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserRecursive1']


class ServiceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserRecursive2']


class ServiceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserRecursive3']


class ServiceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserRecursive4']


class ServiceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ServiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyServiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Service: Union[bool, 'FindManyServiceArgsFromUserRecursive1']


class ServiceCategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Service: Union[bool, 'FindManyServiceArgsFromUserRecursive2']


class ServiceCategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Service: Union[bool, 'FindManyServiceArgsFromUserRecursive3']


class ServiceCategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Service: Union[bool, 'FindManyServiceArgsFromUserRecursive4']


class ServiceCategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ServiceCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyServiceCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive1']
    Office: Union[bool, 'OfficeArgsFromUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class ServiceRecordIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive2']
    Office: Union[bool, 'OfficeArgsFromUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class ServiceRecordIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive3']
    Office: Union[bool, 'OfficeArgsFromUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class ServiceRecordIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Client: Union[bool, 'ClientArgsFromUserRecursive4']
    Office: Union[bool, 'OfficeArgsFromUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class ServiceRecordIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ServiceRecordArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyServiceRecordArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromUserRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive1']
    Role: Union[bool, 'RoleArgsFromUserRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromUserRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive2']
    Role: Union[bool, 'RoleArgsFromUserRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromUserRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive3']
    Role: Union[bool, 'RoleArgsFromUserRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromUserRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserRecursive4']
    Role: Union[bool, 'RoleArgsFromUserRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class UserOnCabinetIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class UserOnCabinetIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class UserOnCabinetIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Cabinet: Union[bool, 'CabinetArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class UserOnCabinetIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserOnCabinetArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserOnCabinetArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserRecursive1']


class WorkerOnServiceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserRecursive2']


class WorkerOnServiceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserRecursive3']


class WorkerOnServiceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserRecursive4']


class WorkerOnServiceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class WorkerOnServiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyWorkerOnServiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    login: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    roleId: Union[_str, 'types.StringFilter']
    telegramId: Union[None, _str, 'types.StringFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'
    Product: 'ProductListRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    Role: 'RoleRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceListRelationFilter'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    login: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    roleId: Union[_str, 'types.StringFilter']
    telegramId: Union[None, _str, 'types.StringFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'
    Product: 'ProductListRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    Role: 'RoleRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceListRelationFilter'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    login: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    roleId: Union[_str, 'types.StringFilter']
    telegramId: Union[None, _str, 'types.StringFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'
    Product: 'ProductListRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    Role: 'RoleRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceListRelationFilter'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    login: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    roleId: Union[_str, 'types.StringFilter']
    telegramId: Union[None, _str, 'types.StringFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'
    Product: 'ProductListRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    Role: 'RoleRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceListRelationFilter'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    middleName: Union[None, _str, 'types.StringFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    login: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    roleId: Union[_str, 'types.StringFilter']
    telegramId: Union[None, _str, 'types.StringFilter']
    DepartmentUser: 'DepartmentUserListRelationFilter'
    Product: 'ProductListRelationFilter'
    Schedule: 'ScheduleListRelationFilter'
    ServiceRecord: 'ServiceRecordListRelationFilter'
    Role: 'RoleRelationFilter'
    UserOnCabinet: 'UserOnCabinetListRelationFilter'
    WorkerOnService_WorkerOnService_creatorIdToUser: 'WorkerOnServiceListRelationFilter'
    WorkerOnService_WorkerOnService_userIdToUser: 'WorkerOnServiceListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    roleId: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    roleId: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    roleId: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    roleId: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    middleName: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    roleId: Union[_str, 'types.StringWithAggregatesFilter']
    telegramId: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    lastName: _str
    firstName: _str
    middleName: _str
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    login: _str
    email: _str
    password: _str
    roleId: _str
    telegramId: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    lastName: _str
    firstName: _str
    middleName: _str
    birthDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    login: _str
    email: _str
    password: _str
    roleId: _str
    telegramId: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    lastName: bool
    firstName: bool
    middleName: bool
    birthDate: bool
    createdAt: bool
    updatedAt: bool
    login: bool
    email: bool
    password: bool
    roleId: bool
    telegramId: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    lastName: bool
    firstName: bool
    middleName: bool
    birthDate: bool
    createdAt: bool
    updatedAt: bool
    login: bool
    email: bool
    password: bool
    roleId: bool
    telegramId: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'lastName': bool,
        'firstName': bool,
        'middleName': bool,
        'birthDate': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'login': bool,
        'email': bool,
        'password': bool,
        'roleId': bool,
        'telegramId': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'lastName': int,
        'firstName': int,
        'middleName': int,
        'birthDate': int,
        'createdAt': int,
        'updatedAt': int,
        'login': int,
        'email': int,
        'password': int,
        'roleId': int,
        'telegramId': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'lastName',
    'firstName',
    'middleName',
    'birthDate',
    'createdAt',
    'updatedAt',
    'login',
    'email',
    'password',
    'roleId',
    'telegramId',
    'DepartmentUser',
    'Product',
    'Schedule',
    'ServiceRecord',
    'Role',
    'UserOnCabinet',
    'WorkerOnService_WorkerOnService_creatorIdToUser',
    'WorkerOnService_WorkerOnService_userIdToUser',
]
UserScalarFieldKeys = Literal[
    'id',
    'lastName',
    'firstName',
    'middleName',
    'birthDate',
    'createdAt',
    'updatedAt',
    'login',
    'email',
    'password',
    'roleId',
    'telegramId',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'DepartmentUser',
        'Product',
        'Schedule',
        'ServiceRecord',
        'Role',
        'UserOnCabinet',
        'WorkerOnService_WorkerOnService_creatorIdToUser',
        'WorkerOnService_WorkerOnService_userIdToUser',
    ]

# UserOnCabinet types

class UserOnCabinetOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserOnCabinet create method"""
    cabinetId: _str
    userId: _str
    Cabinet: 'CabinetCreateNestedWithoutRelationsInput'
    User: 'UserCreateNestedWithoutRelationsInput'


class UserOnCabinetCreateInput(UserOnCabinetOptionalCreateInput):
    """Required arguments to the UserOnCabinet create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOnCabinetOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserOnCabinet create method, without relations"""
    cabinetId: _str
    userId: _str


class UserOnCabinetCreateWithoutRelationsInput(UserOnCabinetOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserOnCabinet create method, without relations"""

class UserOnCabinetConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserOnCabinetCreateWithoutRelationsInput'
    where: 'UserOnCabinetWhereUniqueInput'

class UserOnCabinetCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserOnCabinetCreateWithoutRelationsInput'
    connect: 'UserOnCabinetWhereUniqueInput'
    connect_or_create: 'UserOnCabinetConnectOrCreateWithoutRelationsInput'


class UserOnCabinetCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserOnCabinetCreateWithoutRelationsInput', List['UserOnCabinetCreateWithoutRelationsInput']]
    connect: Union['UserOnCabinetWhereUniqueInput', List['UserOnCabinetWhereUniqueInput']]
    connect_or_create: Union['UserOnCabinetConnectOrCreateWithoutRelationsInput', List['UserOnCabinetConnectOrCreateWithoutRelationsInput']]

_UserOnCabinetCompoundPrimaryKeyInner = TypedDict(
    '_UserOnCabinetCompoundPrimaryKeyInner',
    {
        'cabinetId': '_str',
        'userId': '_str',
    },
    total=True
)

_UserOnCabinetCompoundPrimaryKey = TypedDict(
    '_UserOnCabinetCompoundPrimaryKey',
    {
        'cabinetId_userId': '_UserOnCabinetCompoundPrimaryKeyInner',
    },
    total=True
)

UserOnCabinetWhereUniqueInput = _UserOnCabinetCompoundPrimaryKey


class UserOnCabinetUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    Cabinet: 'CabinetUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'


class UserOnCabinetUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class UserOnCabinetUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserOnCabinetCreateWithoutRelationsInput']
    connect: List['UserOnCabinetWhereUniqueInput']
    connect_or_create: List['UserOnCabinetConnectOrCreateWithoutRelationsInput']
    set: List['UserOnCabinetWhereUniqueInput']
    disconnect: List['UserOnCabinetWhereUniqueInput']
    delete: List['UserOnCabinetWhereUniqueInput']

    # TODO
    # update: List['UserOnCabinetUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserOnCabinetUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserOnCabinetScalarWhereInput']
    # upsert: List['UserOnCabinetUpserteWithWhereUniqueWithoutRelationsInput']


class UserOnCabinetUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserOnCabinetCreateWithoutRelationsInput'
    connect: 'UserOnCabinetWhereUniqueInput'
    connect_or_create: 'UserOnCabinetConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserOnCabinetUpdateInput'
    # upsert: 'UserOnCabinetUpsertWithoutRelationsInput'


class UserOnCabinetUpsertInput(TypedDict):
    create: 'UserOnCabinetCreateInput'
    update: 'UserOnCabinetUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserOnCabinet_cabinetId_OrderByInput = TypedDict(
    '_UserOnCabinet_cabinetId_OrderByInput',
    {
        'cabinetId': 'SortOrder',
    },
    total=True
)

_UserOnCabinet_userId_OrderByInput = TypedDict(
    '_UserOnCabinet_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserOnCabinet_RelevanceInner = TypedDict(
    '_UserOnCabinet_RelevanceInner',
    {
        'fields': 'List[UserOnCabinetScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserOnCabinet_RelevanceOrderByInput = TypedDict(
    '_UserOnCabinet_RelevanceOrderByInput',
    {
        '_relevance': '_UserOnCabinet_RelevanceInner',
    },
    total=True
)

UserOnCabinetOrderByInput = Union[
    '_UserOnCabinet_cabinetId_OrderByInput',
    '_UserOnCabinet_userId_OrderByInput',
    '_UserOnCabinet_RelevanceOrderByInput',
]



# recursive UserOnCabinet types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserOnCabinetRelationFilter = TypedDict(
    'UserOnCabinetRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserOnCabinetListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserOnCabinetInclude(TypedDict, total=False):
    """UserOnCabinet relational arguments"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinet']
    User: Union[bool, 'UserArgsFromUserOnCabinet']


    

class CabinetIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive1']


class CabinetIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive2']


class CabinetIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive3']


class CabinetIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive4']


class CabinetIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class CabinetArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyCabinetArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive1']


class ClientIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive2']


class ClientIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive3']


class ClientIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive4']


class ClientIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ClientArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyClientArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive1']
    Review: Union[bool, 'ReviewArgsFromUserOnCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive1']


class ClientHistoryIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive2']
    Review: Union[bool, 'ReviewArgsFromUserOnCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive2']


class ClientHistoryIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive3']
    Review: Union[bool, 'ReviewArgsFromUserOnCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive3']


class ClientHistoryIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive4']
    Review: Union[bool, 'ReviewArgsFromUserOnCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive4']


class ClientHistoryIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ClientHistoryArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyClientHistoryArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive1']


class DepartmentIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive2']


class DepartmentIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive3']


class DepartmentIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive4']


class DepartmentIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class DepartmentArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyDepartmentArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Department: Union[bool, 'DepartmentArgsFromUserOnCabinetRecursive1']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']


class DepartmentUserIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Department: Union[bool, 'DepartmentArgsFromUserOnCabinetRecursive2']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']


class DepartmentUserIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Department: Union[bool, 'DepartmentArgsFromUserOnCabinetRecursive3']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']


class DepartmentUserIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Department: Union[bool, 'DepartmentArgsFromUserOnCabinetRecursive4']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']


class DepartmentUserIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class DepartmentUserArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyDepartmentUserArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserOnCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive1']


class OfficeIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserOnCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive2']


class OfficeIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserOnCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive3']


class OfficeIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromUserOnCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive4']


class OfficeIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class OfficeArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyOfficeArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class OpportunityIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class OpportunityIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class OpportunityIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class OpportunityIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class OpportunityArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyOpportunityArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class PositionIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class PositionIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class PositionIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""


class PositionIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class PositionArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyPositionArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive1']


class ProductIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive2']


class ProductIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive3']


class ProductIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromUserOnCabinetRecursive4']


class ProductIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ProductArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyProductArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive1']
    Product: Union[bool, 'ProductArgsFromUserOnCabinetRecursive1']


class ProductSaleIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive2']
    Product: Union[bool, 'ProductArgsFromUserOnCabinetRecursive2']


class ProductSaleIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive3']
    Product: Union[bool, 'ProductArgsFromUserOnCabinetRecursive3']


class ProductSaleIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive4']
    Product: Union[bool, 'ProductArgsFromUserOnCabinetRecursive4']


class ProductSaleIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ProductSaleArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyProductSaleArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive1']
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive1']


class ReviewIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive2']
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive2']


class ReviewIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive3']
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive3']


class ReviewIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive4']
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive4']


class ReviewIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ReviewArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyReviewArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'FindManyUserArgsFromUserOnCabinetRecursive1']


class RoleIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'FindManyUserArgsFromUserOnCabinetRecursive2']


class RoleIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'FindManyUserArgsFromUserOnCabinetRecursive3']


class RoleIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User: Union[bool, 'FindManyUserArgsFromUserOnCabinetRecursive4']


class RoleIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class RoleArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyRoleArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive1']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']


class ScheduleIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive2']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']


class ScheduleIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive3']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']


class ScheduleIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive4']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']


class ScheduleIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ScheduleArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyScheduleArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserOnCabinetRecursive1']


class ServiceIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserOnCabinetRecursive2']


class ServiceIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserOnCabinetRecursive3']


class ServiceIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromUserOnCabinetRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromUserOnCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromUserOnCabinetRecursive4']


class ServiceIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ServiceArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyServiceArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromUserOnCabinetRecursive1']


class ServiceCategoryIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromUserOnCabinetRecursive2']


class ServiceCategoryIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromUserOnCabinetRecursive3']


class ServiceCategoryIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Service: Union[bool, 'FindManyServiceArgsFromUserOnCabinetRecursive4']


class ServiceCategoryIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ServiceCategoryArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyServiceCategoryArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive1']
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive1']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']


class ServiceRecordIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive2']
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive2']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']


class ServiceRecordIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive3']
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive3']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']


class ServiceRecordIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Client: Union[bool, 'ClientArgsFromUserOnCabinetRecursive4']
    Office: Union[bool, 'OfficeArgsFromUserOnCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive4']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']


class ServiceRecordIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class ServiceRecordArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyServiceRecordArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromUserOnCabinetRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive1']
    Role: Union[bool, 'RoleArgsFromUserOnCabinetRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive1']


class UserIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromUserOnCabinetRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive2']
    Role: Union[bool, 'RoleArgsFromUserOnCabinetRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive2']


class UserIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromUserOnCabinetRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive3']
    Role: Union[bool, 'RoleArgsFromUserOnCabinetRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive3']


class UserIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromUserOnCabinetRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromUserOnCabinetRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromUserOnCabinetRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromUserOnCabinetRecursive4']
    Role: Union[bool, 'RoleArgsFromUserOnCabinetRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromUserOnCabinetRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive4']


class UserIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class UserArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyUserArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive1']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']


class UserOnCabinetIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive2']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']


class UserOnCabinetIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive3']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']


class UserOnCabinetIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    Cabinet: Union[bool, 'CabinetArgsFromUserOnCabinetRecursive4']
    User: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']


class UserOnCabinetIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class UserOnCabinetArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyUserOnCabinetArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromUserOnCabinet(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive1']


class WorkerOnServiceIncludeFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive2']


class WorkerOnServiceIncludeFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive3']


class WorkerOnServiceIncludeFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']
    Service: Union[bool, 'ServiceArgsFromUserOnCabinetRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromUserOnCabinetRecursive4']


class WorkerOnServiceIncludeFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnCabinet"""

    

class WorkerOnServiceArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    
    

class FindManyWorkerOnServiceArgsFromUserOnCabinet(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive1(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive2(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive3(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromUserOnCabinetRecursive4(TypedDict, total=False):
    """Arguments for UserOnCabinet"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyUserOnCabinetArgs = FindManyUserOnCabinetArgsFromUserOnCabinet
FindFirstUserOnCabinetArgs = FindManyUserOnCabinetArgsFromUserOnCabinet


    

class UserOnCabinetWhereInput(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserOnCabinetWhereInputRecursive1', List['UserOnCabinetWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserOnCabinetWhereInputRecursive1']
    OR: List['UserOnCabinetWhereInputRecursive1']
    NOT: List['UserOnCabinetWhereInputRecursive1']


class UserOnCabinetWhereInputRecursive1(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserOnCabinetWhereInputRecursive2', List['UserOnCabinetWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserOnCabinetWhereInputRecursive2']
    OR: List['UserOnCabinetWhereInputRecursive2']
    NOT: List['UserOnCabinetWhereInputRecursive2']


class UserOnCabinetWhereInputRecursive2(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserOnCabinetWhereInputRecursive3', List['UserOnCabinetWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserOnCabinetWhereInputRecursive3']
    OR: List['UserOnCabinetWhereInputRecursive3']
    NOT: List['UserOnCabinetWhereInputRecursive3']


class UserOnCabinetWhereInputRecursive3(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserOnCabinetWhereInputRecursive4', List['UserOnCabinetWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserOnCabinetWhereInputRecursive4']
    OR: List['UserOnCabinetWhereInputRecursive4']
    NOT: List['UserOnCabinetWhereInputRecursive4']


class UserOnCabinetWhereInputRecursive4(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    Cabinet: 'CabinetRelationFilter'
    User: 'UserRelationFilter'



# aggregate UserOnCabinet types


    

class UserOnCabinetScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive1']


class UserOnCabinetScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive2']


class UserOnCabinetScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive3']


class UserOnCabinetScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserOnCabinetScalarWhereWithAggregatesInputRecursive4']


class UserOnCabinetScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserOnCabinet arguments for searching"""
    cabinetId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class UserOnCabinetGroupByOutput(TypedDict, total=False):
    cabinetId: _str
    userId: _str
    _sum: 'UserOnCabinetSumAggregateOutput'
    _avg: 'UserOnCabinetAvgAggregateOutput'
    _min: 'UserOnCabinetMinAggregateOutput'
    _max: 'UserOnCabinetMaxAggregateOutput'
    _count: 'UserOnCabinetCountAggregateOutput'


class UserOnCabinetAvgAggregateOutput(TypedDict, total=False):
    """UserOnCabinet output for aggregating averages"""


class UserOnCabinetSumAggregateOutput(TypedDict, total=False):
    """UserOnCabinet output for aggregating sums"""


class UserOnCabinetScalarAggregateOutput(TypedDict, total=False):
    """UserOnCabinet output including scalar fields"""
    cabinetId: _str
    userId: _str


UserOnCabinetMinAggregateOutput = UserOnCabinetScalarAggregateOutput
UserOnCabinetMaxAggregateOutput = UserOnCabinetScalarAggregateOutput


class UserOnCabinetMaxAggregateInput(TypedDict, total=False):
    """UserOnCabinet input for aggregating by max"""
    cabinetId: bool
    userId: bool


class UserOnCabinetMinAggregateInput(TypedDict, total=False):
    """UserOnCabinet input for aggregating by min"""
    cabinetId: bool
    userId: bool


class UserOnCabinetNumberAggregateInput(TypedDict, total=False):
    """UserOnCabinet input for aggregating numbers"""


UserOnCabinetAvgAggregateInput = UserOnCabinetNumberAggregateInput
UserOnCabinetSumAggregateInput = UserOnCabinetNumberAggregateInput


UserOnCabinetCountAggregateInput = TypedDict(
    'UserOnCabinetCountAggregateInput',
    {
        'cabinetId': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

UserOnCabinetCountAggregateOutput = TypedDict(
    'UserOnCabinetCountAggregateOutput',
    {
        'cabinetId': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


UserOnCabinetKeys = Literal[
    'cabinetId',
    'userId',
    'Cabinet',
    'User',
]
UserOnCabinetScalarFieldKeys = Literal[
    'cabinetId',
    'userId',
]
UserOnCabinetScalarFieldKeysT = TypeVar('UserOnCabinetScalarFieldKeysT', bound=UserOnCabinetScalarFieldKeys)

UserOnCabinetRelationalFieldKeys = Literal[
        'Cabinet',
        'User',
    ]

# WorkerOnService types

class WorkerOnServiceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the WorkerOnService create method"""
    serviceId: _str
    userId: _str
    creatorId: _str
    User_WorkerOnService_creatorIdToUser: 'UserCreateNestedWithoutRelationsInput'
    Service: 'ServiceCreateNestedWithoutRelationsInput'
    User_WorkerOnService_userIdToUser: 'UserCreateNestedWithoutRelationsInput'


class WorkerOnServiceCreateInput(WorkerOnServiceOptionalCreateInput):
    """Required arguments to the WorkerOnService create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class WorkerOnServiceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the WorkerOnService create method, without relations"""
    serviceId: _str
    userId: _str
    creatorId: _str


class WorkerOnServiceCreateWithoutRelationsInput(WorkerOnServiceOptionalCreateWithoutRelationsInput):
    """Required arguments to the WorkerOnService create method, without relations"""

class WorkerOnServiceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'WorkerOnServiceCreateWithoutRelationsInput'
    where: 'WorkerOnServiceWhereUniqueInput'

class WorkerOnServiceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'WorkerOnServiceCreateWithoutRelationsInput'
    connect: 'WorkerOnServiceWhereUniqueInput'
    connect_or_create: 'WorkerOnServiceConnectOrCreateWithoutRelationsInput'


class WorkerOnServiceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['WorkerOnServiceCreateWithoutRelationsInput', List['WorkerOnServiceCreateWithoutRelationsInput']]
    connect: Union['WorkerOnServiceWhereUniqueInput', List['WorkerOnServiceWhereUniqueInput']]
    connect_or_create: Union['WorkerOnServiceConnectOrCreateWithoutRelationsInput', List['WorkerOnServiceConnectOrCreateWithoutRelationsInput']]

_WorkerOnServiceCompoundPrimaryKeyInner = TypedDict(
    '_WorkerOnServiceCompoundPrimaryKeyInner',
    {
        'serviceId': '_str',
        'userId': '_str',
    },
    total=True
)

_WorkerOnServiceCompoundPrimaryKey = TypedDict(
    '_WorkerOnServiceCompoundPrimaryKey',
    {
        'serviceId_userId': '_WorkerOnServiceCompoundPrimaryKeyInner',
    },
    total=True
)

WorkerOnServiceWhereUniqueInput = _WorkerOnServiceCompoundPrimaryKey


class WorkerOnServiceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    User_WorkerOnService_creatorIdToUser: 'UserUpdateOneWithoutRelationsInput'
    Service: 'ServiceUpdateOneWithoutRelationsInput'
    User_WorkerOnService_userIdToUser: 'UserUpdateOneWithoutRelationsInput'


class WorkerOnServiceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class WorkerOnServiceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['WorkerOnServiceCreateWithoutRelationsInput']
    connect: List['WorkerOnServiceWhereUniqueInput']
    connect_or_create: List['WorkerOnServiceConnectOrCreateWithoutRelationsInput']
    set: List['WorkerOnServiceWhereUniqueInput']
    disconnect: List['WorkerOnServiceWhereUniqueInput']
    delete: List['WorkerOnServiceWhereUniqueInput']

    # TODO
    # update: List['WorkerOnServiceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['WorkerOnServiceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['WorkerOnServiceScalarWhereInput']
    # upsert: List['WorkerOnServiceUpserteWithWhereUniqueWithoutRelationsInput']


class WorkerOnServiceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'WorkerOnServiceCreateWithoutRelationsInput'
    connect: 'WorkerOnServiceWhereUniqueInput'
    connect_or_create: 'WorkerOnServiceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'WorkerOnServiceUpdateInput'
    # upsert: 'WorkerOnServiceUpsertWithoutRelationsInput'


class WorkerOnServiceUpsertInput(TypedDict):
    create: 'WorkerOnServiceCreateInput'
    update: 'WorkerOnServiceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_WorkerOnService_serviceId_OrderByInput = TypedDict(
    '_WorkerOnService_serviceId_OrderByInput',
    {
        'serviceId': 'SortOrder',
    },
    total=True
)

_WorkerOnService_userId_OrderByInput = TypedDict(
    '_WorkerOnService_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_WorkerOnService_creatorId_OrderByInput = TypedDict(
    '_WorkerOnService_creatorId_OrderByInput',
    {
        'creatorId': 'SortOrder',
    },
    total=True
)

_WorkerOnService_RelevanceInner = TypedDict(
    '_WorkerOnService_RelevanceInner',
    {
        'fields': 'List[WorkerOnServiceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_WorkerOnService_RelevanceOrderByInput = TypedDict(
    '_WorkerOnService_RelevanceOrderByInput',
    {
        '_relevance': '_WorkerOnService_RelevanceInner',
    },
    total=True
)

WorkerOnServiceOrderByInput = Union[
    '_WorkerOnService_serviceId_OrderByInput',
    '_WorkerOnService_userId_OrderByInput',
    '_WorkerOnService_creatorId_OrderByInput',
    '_WorkerOnService_RelevanceOrderByInput',
]



# recursive WorkerOnService types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

WorkerOnServiceRelationFilter = TypedDict(
    'WorkerOnServiceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class WorkerOnServiceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class WorkerOnServiceInclude(TypedDict, total=False):
    """WorkerOnService relational arguments"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromWorkerOnService']
    Service: Union[bool, 'ServiceArgsFromWorkerOnService']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromWorkerOnService']


    

class CabinetIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive1']


class CabinetIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive2']


class CabinetIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive3']


class CabinetIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive4']


class CabinetIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class CabinetArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'CabinetIncludeFromCabinetRecursive1'


class CabinetArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'CabinetIncludeFromCabinetRecursive2'


class CabinetArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'CabinetIncludeFromCabinetRecursive3'


class CabinetArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'CabinetIncludeFromCabinetRecursive4'


class CabinetArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyCabinetArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive1'


class FindManyCabinetArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive2'


class FindManyCabinetArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive3'


class FindManyCabinetArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    include: 'CabinetIncludeFromCabinetRecursive4'


class FindManyCabinetArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['CabinetOrderByInput', List['CabinetOrderByInput']]
    where: 'CabinetWhereInput'
    cursor: 'CabinetWhereUniqueInput'
    distinct: List['CabinetScalarFieldKeys']
    
    

class ClientIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive1']


class ClientIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive2']


class ClientIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive3']


class ClientIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive4']


class ClientIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ClientArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientIncludeFromClientRecursive1'


class ClientArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientIncludeFromClientRecursive2'


class ClientArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientIncludeFromClientRecursive3'


class ClientArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientIncludeFromClientRecursive4'


class ClientArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyClientArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive1'


class FindManyClientArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive2'


class FindManyClientArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive3'


class FindManyClientArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    include: 'ClientIncludeFromClientRecursive4'


class FindManyClientArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientOrderByInput', List['ClientOrderByInput']]
    where: 'ClientWhereInput'
    cursor: 'ClientWhereUniqueInput'
    distinct: List['ClientScalarFieldKeys']
    
    

class ClientHistoryIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive1']
    Review: Union[bool, 'ReviewArgsFromWorkerOnServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive1']


class ClientHistoryIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive2']
    Review: Union[bool, 'ReviewArgsFromWorkerOnServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive2']


class ClientHistoryIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive3']
    Review: Union[bool, 'ReviewArgsFromWorkerOnServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive3']


class ClientHistoryIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive4']
    Review: Union[bool, 'ReviewArgsFromWorkerOnServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive4']


class ClientHistoryIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ClientHistoryArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class ClientHistoryArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class ClientHistoryArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class ClientHistoryArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class ClientHistoryArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyClientHistoryArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive1'


class FindManyClientHistoryArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive2'


class FindManyClientHistoryArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive3'


class FindManyClientHistoryArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    include: 'ClientHistoryIncludeFromClientHistoryRecursive4'


class FindManyClientHistoryArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ClientHistoryOrderByInput', List['ClientHistoryOrderByInput']]
    where: 'ClientHistoryWhereInput'
    cursor: 'ClientHistoryWhereUniqueInput'
    distinct: List['ClientHistoryScalarFieldKeys']
    
    

class DepartmentIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive1']


class DepartmentIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive2']


class DepartmentIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive3']


class DepartmentIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive4']


class DepartmentIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class DepartmentArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class DepartmentArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class DepartmentArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class DepartmentArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class DepartmentArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyDepartmentArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive1'


class FindManyDepartmentArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive2'


class FindManyDepartmentArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive3'


class FindManyDepartmentArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    include: 'DepartmentIncludeFromDepartmentRecursive4'


class FindManyDepartmentArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentOrderByInput', List['DepartmentOrderByInput']]
    where: 'DepartmentWhereInput'
    cursor: 'DepartmentWhereUniqueInput'
    distinct: List['DepartmentScalarFieldKeys']
    
    

class DepartmentUserIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Department: Union[bool, 'DepartmentArgsFromWorkerOnServiceRecursive1']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']


class DepartmentUserIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Department: Union[bool, 'DepartmentArgsFromWorkerOnServiceRecursive2']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']


class DepartmentUserIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Department: Union[bool, 'DepartmentArgsFromWorkerOnServiceRecursive3']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']


class DepartmentUserIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Department: Union[bool, 'DepartmentArgsFromWorkerOnServiceRecursive4']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']


class DepartmentUserIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class DepartmentUserArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class DepartmentUserArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class DepartmentUserArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class DepartmentUserArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class DepartmentUserArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyDepartmentUserArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive1'


class FindManyDepartmentUserArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive2'


class FindManyDepartmentUserArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive3'


class FindManyDepartmentUserArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    include: 'DepartmentUserIncludeFromDepartmentUserRecursive4'


class FindManyDepartmentUserArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['DepartmentUserOrderByInput', List['DepartmentUserOrderByInput']]
    where: 'DepartmentUserWhereInput'
    cursor: 'DepartmentUserWhereUniqueInput'
    distinct: List['DepartmentUserScalarFieldKeys']
    
    

class OfficeIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromWorkerOnServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive1']


class OfficeIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromWorkerOnServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive2']


class OfficeIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromWorkerOnServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive3']


class OfficeIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'FindManyCabinetArgsFromWorkerOnServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive4']


class OfficeIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class OfficeArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OfficeIncludeFromOfficeRecursive1'


class OfficeArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OfficeIncludeFromOfficeRecursive2'


class OfficeArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OfficeIncludeFromOfficeRecursive3'


class OfficeArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OfficeIncludeFromOfficeRecursive4'


class OfficeArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyOfficeArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive1'


class FindManyOfficeArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive2'


class FindManyOfficeArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive3'


class FindManyOfficeArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    include: 'OfficeIncludeFromOfficeRecursive4'


class FindManyOfficeArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OfficeOrderByInput', List['OfficeOrderByInput']]
    where: 'OfficeWhereInput'
    cursor: 'OfficeWhereUniqueInput'
    distinct: List['OfficeScalarFieldKeys']
    
    

class OpportunityIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class OpportunityIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class OpportunityIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class OpportunityIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class OpportunityIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class OpportunityArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class OpportunityArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class OpportunityArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class OpportunityArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class OpportunityArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyOpportunityArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive1'


class FindManyOpportunityArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive2'


class FindManyOpportunityArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive3'


class FindManyOpportunityArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    include: 'OpportunityIncludeFromOpportunityRecursive4'


class FindManyOpportunityArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['OpportunityOrderByInput', List['OpportunityOrderByInput']]
    where: 'OpportunityWhereInput'
    cursor: 'OpportunityWhereUniqueInput'
    distinct: List['OpportunityScalarFieldKeys']
    
    

class PositionIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class PositionIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class PositionIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class PositionIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""


class PositionIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class PositionArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'PositionIncludeFromPositionRecursive1'


class PositionArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'PositionIncludeFromPositionRecursive2'


class PositionArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'PositionIncludeFromPositionRecursive3'


class PositionArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'PositionIncludeFromPositionRecursive4'


class PositionArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyPositionArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive1'


class FindManyPositionArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive2'


class FindManyPositionArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive3'


class FindManyPositionArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    include: 'PositionIncludeFromPositionRecursive4'


class FindManyPositionArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['PositionOrderByInput', List['PositionOrderByInput']]
    where: 'PositionWhereInput'
    cursor: 'PositionWhereUniqueInput'
    distinct: List['PositionScalarFieldKeys']
    
    

class ProductIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive1']


class ProductIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive2']


class ProductIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive3']


class ProductIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']
    ProductSale: Union[bool, 'FindManyProductSaleArgsFromWorkerOnServiceRecursive4']


class ProductIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ProductArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductIncludeFromProductRecursive1'


class ProductArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductIncludeFromProductRecursive2'


class ProductArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductIncludeFromProductRecursive3'


class ProductArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductIncludeFromProductRecursive4'


class ProductArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyProductArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive1'


class FindManyProductArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive2'


class FindManyProductArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive3'


class FindManyProductArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    include: 'ProductIncludeFromProductRecursive4'


class FindManyProductArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductOrderByInput', List['ProductOrderByInput']]
    where: 'ProductWhereInput'
    cursor: 'ProductWhereUniqueInput'
    distinct: List['ProductScalarFieldKeys']
    
    

class ProductSaleIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive1']
    Product: Union[bool, 'ProductArgsFromWorkerOnServiceRecursive1']


class ProductSaleIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive2']
    Product: Union[bool, 'ProductArgsFromWorkerOnServiceRecursive2']


class ProductSaleIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive3']
    Product: Union[bool, 'ProductArgsFromWorkerOnServiceRecursive3']


class ProductSaleIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive4']
    Product: Union[bool, 'ProductArgsFromWorkerOnServiceRecursive4']


class ProductSaleIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ProductSaleArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class ProductSaleArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class ProductSaleArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class ProductSaleArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class ProductSaleArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyProductSaleArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive1'


class FindManyProductSaleArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive2'


class FindManyProductSaleArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive3'


class FindManyProductSaleArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    include: 'ProductSaleIncludeFromProductSaleRecursive4'


class FindManyProductSaleArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ProductSaleOrderByInput', List['ProductSaleOrderByInput']]
    where: 'ProductSaleWhereInput'
    cursor: 'ProductSaleWhereUniqueInput'
    distinct: List['ProductSaleScalarFieldKeys']
    
    

class ReviewIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive1']
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive1']


class ReviewIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive2']
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive2']


class ReviewIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive3']
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive3']


class ReviewIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive4']
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive4']


class ReviewIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ReviewArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ReviewIncludeFromReviewRecursive1'


class ReviewArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ReviewIncludeFromReviewRecursive2'


class ReviewArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ReviewIncludeFromReviewRecursive3'


class ReviewArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ReviewIncludeFromReviewRecursive4'


class ReviewArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyReviewArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive1'


class FindManyReviewArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive2'


class FindManyReviewArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive3'


class FindManyReviewArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    include: 'ReviewIncludeFromReviewRecursive4'


class FindManyReviewArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ReviewOrderByInput', List['ReviewOrderByInput']]
    where: 'ReviewWhereInput'
    cursor: 'ReviewWhereUniqueInput'
    distinct: List['ReviewScalarFieldKeys']
    
    

class RoleIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'FindManyUserArgsFromWorkerOnServiceRecursive1']


class RoleIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'FindManyUserArgsFromWorkerOnServiceRecursive2']


class RoleIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'FindManyUserArgsFromWorkerOnServiceRecursive3']


class RoleIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User: Union[bool, 'FindManyUserArgsFromWorkerOnServiceRecursive4']


class RoleIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class RoleArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyRoleArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    
    

class ScheduleIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive1']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']


class ScheduleIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive2']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']


class ScheduleIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive3']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']


class ScheduleIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive4']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']


class ScheduleIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ScheduleArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ScheduleIncludeFromScheduleRecursive1'


class ScheduleArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ScheduleIncludeFromScheduleRecursive2'


class ScheduleArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ScheduleIncludeFromScheduleRecursive3'


class ScheduleArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ScheduleIncludeFromScheduleRecursive4'


class ScheduleArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyScheduleArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive1'


class FindManyScheduleArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive2'


class FindManyScheduleArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive3'


class FindManyScheduleArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    include: 'ScheduleIncludeFromScheduleRecursive4'


class FindManyScheduleArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ScheduleOrderByInput', List['ScheduleOrderByInput']]
    where: 'ScheduleWhereInput'
    cursor: 'ScheduleWhereUniqueInput'
    distinct: List['ScheduleScalarFieldKeys']
    
    

class ServiceIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive1']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive1']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive1']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromWorkerOnServiceRecursive1']


class ServiceIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive2']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive2']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive2']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromWorkerOnServiceRecursive2']


class ServiceIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive3']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive3']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive3']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromWorkerOnServiceRecursive3']


class ServiceIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    ClientHistory: Union[bool, 'FindManyClientHistoryArgsFromWorkerOnServiceRecursive4']
    Review: Union[bool, 'FindManyReviewArgsFromWorkerOnServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive4']
    WorkerOnService: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive4']
    ServiceCategory: Union[bool, 'FindManyServiceCategoryArgsFromWorkerOnServiceRecursive4']


class ServiceIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ServiceArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyServiceArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class ServiceCategoryIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Service: Union[bool, 'FindManyServiceArgsFromWorkerOnServiceRecursive1']


class ServiceCategoryIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Service: Union[bool, 'FindManyServiceArgsFromWorkerOnServiceRecursive2']


class ServiceCategoryIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Service: Union[bool, 'FindManyServiceArgsFromWorkerOnServiceRecursive3']


class ServiceCategoryIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Service: Union[bool, 'FindManyServiceArgsFromWorkerOnServiceRecursive4']


class ServiceCategoryIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ServiceCategoryArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class ServiceCategoryArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class ServiceCategoryArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class ServiceCategoryArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class ServiceCategoryArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyServiceCategoryArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive1'


class FindManyServiceCategoryArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive2'


class FindManyServiceCategoryArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive3'


class FindManyServiceCategoryArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    include: 'ServiceCategoryIncludeFromServiceCategoryRecursive4'


class FindManyServiceCategoryArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceCategoryOrderByInput', List['ServiceCategoryOrderByInput']]
    where: 'ServiceCategoryWhereInput'
    cursor: 'ServiceCategoryWhereUniqueInput'
    distinct: List['ServiceCategoryScalarFieldKeys']
    
    

class ServiceRecordIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive1']
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive1']
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive1']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']


class ServiceRecordIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive2']
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive2']
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive2']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']


class ServiceRecordIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive3']
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive3']
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive3']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']


class ServiceRecordIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Client: Union[bool, 'ClientArgsFromWorkerOnServiceRecursive4']
    Office: Union[bool, 'OfficeArgsFromWorkerOnServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive4']
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive4']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']


class ServiceRecordIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class ServiceRecordArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class ServiceRecordArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class ServiceRecordArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class ServiceRecordArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class ServiceRecordArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyServiceRecordArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive1'


class FindManyServiceRecordArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive2'


class FindManyServiceRecordArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive3'


class FindManyServiceRecordArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    include: 'ServiceRecordIncludeFromServiceRecordRecursive4'


class FindManyServiceRecordArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['ServiceRecordOrderByInput', List['ServiceRecordOrderByInput']]
    where: 'ServiceRecordWhereInput'
    cursor: 'ServiceRecordWhereUniqueInput'
    distinct: List['ServiceRecordScalarFieldKeys']
    
    

class UserIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive1']
    Product: Union[bool, 'FindManyProductArgsFromWorkerOnServiceRecursive1']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive1']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive1']
    Role: Union[bool, 'RoleArgsFromWorkerOnServiceRecursive1']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive1']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive1']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive1']


class UserIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive2']
    Product: Union[bool, 'FindManyProductArgsFromWorkerOnServiceRecursive2']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive2']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive2']
    Role: Union[bool, 'RoleArgsFromWorkerOnServiceRecursive2']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive2']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive2']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive2']


class UserIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive3']
    Product: Union[bool, 'FindManyProductArgsFromWorkerOnServiceRecursive3']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive3']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive3']
    Role: Union[bool, 'RoleArgsFromWorkerOnServiceRecursive3']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive3']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive3']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive3']


class UserIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    DepartmentUser: Union[bool, 'FindManyDepartmentUserArgsFromWorkerOnServiceRecursive4']
    Product: Union[bool, 'FindManyProductArgsFromWorkerOnServiceRecursive4']
    Schedule: Union[bool, 'FindManyScheduleArgsFromWorkerOnServiceRecursive4']
    ServiceRecord: Union[bool, 'FindManyServiceRecordArgsFromWorkerOnServiceRecursive4']
    Role: Union[bool, 'RoleArgsFromWorkerOnServiceRecursive4']
    UserOnCabinet: Union[bool, 'FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive4']
    WorkerOnService_WorkerOnService_creatorIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive4']
    WorkerOnService_WorkerOnService_userIdToUser: Union[bool, 'FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive4']


class UserIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class UserArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyUserArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserOnCabinetIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive1']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']


class UserOnCabinetIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive2']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']


class UserOnCabinetIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive3']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']


class UserOnCabinetIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    Cabinet: Union[bool, 'CabinetArgsFromWorkerOnServiceRecursive4']
    User: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']


class UserOnCabinetIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class UserOnCabinetArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class UserOnCabinetArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class UserOnCabinetArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class UserOnCabinetArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class UserOnCabinetArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyUserOnCabinetArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive1'


class FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive2'


class FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive3'


class FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    include: 'UserOnCabinetIncludeFromUserOnCabinetRecursive4'


class FindManyUserOnCabinetArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['UserOnCabinetOrderByInput', List['UserOnCabinetOrderByInput']]
    where: 'UserOnCabinetWhereInput'
    cursor: 'UserOnCabinetWhereUniqueInput'
    distinct: List['UserOnCabinetScalarFieldKeys']
    
    

class WorkerOnServiceIncludeFromWorkerOnService(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive1']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive1']


class WorkerOnServiceIncludeFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive2']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive2']


class WorkerOnServiceIncludeFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive3']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive3']


class WorkerOnServiceIncludeFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""
    User_WorkerOnService_creatorIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']
    Service: Union[bool, 'ServiceArgsFromWorkerOnServiceRecursive4']
    User_WorkerOnService_userIdToUser: Union[bool, 'UserArgsFromWorkerOnServiceRecursive4']


class WorkerOnServiceIncludeFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Relational arguments for WorkerOnService"""

    

class WorkerOnServiceArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class WorkerOnServiceArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class WorkerOnServiceArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class WorkerOnServiceArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class WorkerOnServiceArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    
    

class FindManyWorkerOnServiceArgsFromWorkerOnService(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive1'


class FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive1(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive2'


class FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive2(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive3'


class FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive3(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    include: 'WorkerOnServiceIncludeFromWorkerOnServiceRecursive4'


class FindManyWorkerOnServiceArgsFromWorkerOnServiceRecursive4(TypedDict, total=False):
    """Arguments for WorkerOnService"""
    take: int
    skip: int
    order_by: Union['WorkerOnServiceOrderByInput', List['WorkerOnServiceOrderByInput']]
    where: 'WorkerOnServiceWhereInput'
    cursor: 'WorkerOnServiceWhereUniqueInput'
    distinct: List['WorkerOnServiceScalarFieldKeys']
    


FindManyWorkerOnServiceArgs = FindManyWorkerOnServiceArgsFromWorkerOnService
FindFirstWorkerOnServiceArgs = FindManyWorkerOnServiceArgsFromWorkerOnService


    

class WorkerOnServiceWhereInput(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User_WorkerOnService_creatorIdToUser: 'UserRelationFilter'
    Service: 'ServiceRelationFilter'
    User_WorkerOnService_userIdToUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkerOnServiceWhereInputRecursive1', List['WorkerOnServiceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['WorkerOnServiceWhereInputRecursive1']
    OR: List['WorkerOnServiceWhereInputRecursive1']
    NOT: List['WorkerOnServiceWhereInputRecursive1']


class WorkerOnServiceWhereInputRecursive1(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User_WorkerOnService_creatorIdToUser: 'UserRelationFilter'
    Service: 'ServiceRelationFilter'
    User_WorkerOnService_userIdToUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkerOnServiceWhereInputRecursive2', List['WorkerOnServiceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['WorkerOnServiceWhereInputRecursive2']
    OR: List['WorkerOnServiceWhereInputRecursive2']
    NOT: List['WorkerOnServiceWhereInputRecursive2']


class WorkerOnServiceWhereInputRecursive2(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User_WorkerOnService_creatorIdToUser: 'UserRelationFilter'
    Service: 'ServiceRelationFilter'
    User_WorkerOnService_userIdToUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkerOnServiceWhereInputRecursive3', List['WorkerOnServiceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['WorkerOnServiceWhereInputRecursive3']
    OR: List['WorkerOnServiceWhereInputRecursive3']
    NOT: List['WorkerOnServiceWhereInputRecursive3']


class WorkerOnServiceWhereInputRecursive3(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User_WorkerOnService_creatorIdToUser: 'UserRelationFilter'
    Service: 'ServiceRelationFilter'
    User_WorkerOnService_userIdToUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WorkerOnServiceWhereInputRecursive4', List['WorkerOnServiceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['WorkerOnServiceWhereInputRecursive4']
    OR: List['WorkerOnServiceWhereInputRecursive4']
    NOT: List['WorkerOnServiceWhereInputRecursive4']


class WorkerOnServiceWhereInputRecursive4(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    creatorId: Union[_str, 'types.StringFilter']
    User_WorkerOnService_creatorIdToUser: 'UserRelationFilter'
    Service: 'ServiceRelationFilter'
    User_WorkerOnService_userIdToUser: 'UserRelationFilter'



# aggregate WorkerOnService types


    

class WorkerOnServiceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive1']
    OR: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive1']


class WorkerOnServiceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive2']
    OR: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive2']


class WorkerOnServiceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive3']
    OR: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive3']


class WorkerOnServiceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive4']
    OR: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['WorkerOnServiceScalarWhereWithAggregatesInputRecursive4']


class WorkerOnServiceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """WorkerOnService arguments for searching"""
    serviceId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    creatorId: Union[_str, 'types.StringWithAggregatesFilter']



class WorkerOnServiceGroupByOutput(TypedDict, total=False):
    serviceId: _str
    userId: _str
    creatorId: _str
    _sum: 'WorkerOnServiceSumAggregateOutput'
    _avg: 'WorkerOnServiceAvgAggregateOutput'
    _min: 'WorkerOnServiceMinAggregateOutput'
    _max: 'WorkerOnServiceMaxAggregateOutput'
    _count: 'WorkerOnServiceCountAggregateOutput'


class WorkerOnServiceAvgAggregateOutput(TypedDict, total=False):
    """WorkerOnService output for aggregating averages"""


class WorkerOnServiceSumAggregateOutput(TypedDict, total=False):
    """WorkerOnService output for aggregating sums"""


class WorkerOnServiceScalarAggregateOutput(TypedDict, total=False):
    """WorkerOnService output including scalar fields"""
    serviceId: _str
    userId: _str
    creatorId: _str


WorkerOnServiceMinAggregateOutput = WorkerOnServiceScalarAggregateOutput
WorkerOnServiceMaxAggregateOutput = WorkerOnServiceScalarAggregateOutput


class WorkerOnServiceMaxAggregateInput(TypedDict, total=False):
    """WorkerOnService input for aggregating by max"""
    serviceId: bool
    userId: bool
    creatorId: bool


class WorkerOnServiceMinAggregateInput(TypedDict, total=False):
    """WorkerOnService input for aggregating by min"""
    serviceId: bool
    userId: bool
    creatorId: bool


class WorkerOnServiceNumberAggregateInput(TypedDict, total=False):
    """WorkerOnService input for aggregating numbers"""


WorkerOnServiceAvgAggregateInput = WorkerOnServiceNumberAggregateInput
WorkerOnServiceSumAggregateInput = WorkerOnServiceNumberAggregateInput


WorkerOnServiceCountAggregateInput = TypedDict(
    'WorkerOnServiceCountAggregateInput',
    {
        'serviceId': bool,
        'userId': bool,
        'creatorId': bool,
        '_all': bool,
    },
    total=False,
)

WorkerOnServiceCountAggregateOutput = TypedDict(
    'WorkerOnServiceCountAggregateOutput',
    {
        'serviceId': int,
        'userId': int,
        'creatorId': int,
        '_all': int,
    },
    total=False,
)


WorkerOnServiceKeys = Literal[
    'serviceId',
    'userId',
    'creatorId',
    'User_WorkerOnService_creatorIdToUser',
    'Service',
    'User_WorkerOnService_userIdToUser',
]
WorkerOnServiceScalarFieldKeys = Literal[
    'serviceId',
    'userId',
    'creatorId',
]
WorkerOnServiceScalarFieldKeysT = TypeVar('WorkerOnServiceScalarFieldKeysT', bound=WorkerOnServiceScalarFieldKeys)

WorkerOnServiceRelationalFieldKeys = Literal[
        'User_WorkerOnService_creatorIdToUser',
        'Service',
        'User_WorkerOnService_userIdToUser',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields